<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>文件包含补充CGI技术原理</title>
      <link href="/posts/832d.html"/>
      <url>/posts/832d.html</url>
      
        <content type="html"><![CDATA[<h3 id="CGI技术原理"><a href="#CGI技术原理" class="headerlink" title="CGI技术原理"></a>CGI技术原理</h3><h4 id="1-1-CGI的提出"><a href="#1-1-CGI的提出" class="headerlink" title="1.1 CGI的提出"></a>1.1 CGI的提出</h4><p>CGI是外部扩展应用程序与WWW服务器交互的一个标准接口。按照CGI标准编写的外部扩展应用程序可以处理客户端（一般是WWW浏览器）输入的协同工作数据，完成客户端与服务器的交互操作。这在实际应用中非常有用，如可以编写CGI外部扩展程序来访问外部数据库，客户端用户可以通过它和WWW服务器来进行数据查询。CGI一般分两种：标准CGI和缓冲CGI。所有的WWW服务器均应支持标准CGI，按标准CGI编写的程序与具体的WWW服务器无关。而按缓冲CGI编写的程序与WWW服务器有关。</p><h3 id="1-2-CGI的工作原理"><a href="#1-2-CGI的工作原理" class="headerlink" title="1.2 CGI的工作原理"></a>1.2 CGI的工作原理</h3><h4 id="1．标准CGI"><a href="#1．标准CGI" class="headerlink" title="1．标准CGI"></a>1．标准CGI</h4><p>客户端、服务器、CGI接口与外部程序间的关系可用图1－1表示（编排者：图略）：如上图所示，服务器是客户端（如浏览器）与扩展程序之间的通道。当客户端的用户完成了一定输入工作（比如填充完HTML文档中的FORM表）之后向服务器发出HTTP请求（称为CGI请求），服务器守护进程接收到该请求后，就创建一个子进程（称为CGI进程）。该CGI子进程将CGI请求的有关数据设置成环境变量，在外部CGI程序与服务器间建立两条数据通道（标准I／O），然后启动URL指定的CGI程序，并与该子进程保持同步，以监测CGI程序的执行状态。子进程通过标准输出流将处理结果传递给服务器守护进程，守护进程再将处理结果作为应答消息回送到客户端。外部CGI程序通过环境变量、命令行参数、标准输入输出与WWW服务器进行通讯，传递有关参数和处理结果。<br>＊环境变量：当服务器守护进程创建子进程运行CGI程序时，设置相应的环境变量和命令行参数，以传递客户端和服务器的有关信息给该子进程。<br>＊命令行参数：命令行参数仅在有HTML文档中有SINDEX查询的情况下使用。<br>＊标准输入输出：当HTTP请求模式采用POST方式时，CGI程序通过标准输入流和有关环境变量来获取客户端传输数据；如采用GET方式时，CGI程序直接通过环境变量获取客户端传输数据。当CGI程序要返回处理结果（一般为HTML文档）给客户端时，它通过标准输出流将该结果数据传递给服务器守护进程。</p><h4 id="2．缓冲CGI"><a href="#2．缓冲CGI" class="headerlink" title="2．缓冲CGI"></a>2．缓冲CGI</h4><p>标准CGI使用Stdin／Stdout来进行数据通讯，这是由其最初开发环境（Unix操作系统）所决定的。但是许多Windows环境下的编程工具（如VB和Delphi等）是不支持这种I／O方式的，这时就不能用它们来开发基于标准CGI的应用程序。于是有些服务器提出了缓冲CGI的概念。缓冲CGI亦称为WinCGI。此时CGI扩展程序与服务器间通过缓冲CGI而不是标准CGI进行通讯，而缓冲CGI与服务器间的通讯还是通过标准CGI接口。后者由WWW服务器的内置缓冲处理程序实现。这几部分的关系可用图1－2表示（编排者：图略）：缓冲CGI的工作原理与标准CGI相似，不同的是当服务器守护进程接收到客户端的CGI请求时，所建立的CGI子进程将CGI请求的有关数据设置成环境变量外，还将它们保存在输入缓冲区中；通过缓冲处理程序在外部CGI程序与服务器间建立两条数据通道（输入／输出缓冲区）。CGI子进程通过输出缓冲区将处理结果传递给服务器守护进程。此处外部CGI程序通过环境变量和输入／输出缓冲区与WWW服务器进行通讯，传递有关参数和处理结果。此处环境变量的意义同上，不过这些环境变量及其相应值保存在输入缓冲区中。此外，输入缓冲区中还存放客户端的传输数据（如采用POST模式的话）。输出缓冲区用来存放扩展程序的处理结果。</p><h4 id="3．标准CGI与缓冲CGI的区别"><a href="#3．标准CGI与缓冲CGI的区别" class="headerlink" title="3．标准CGI与缓冲CGI的区别"></a>3．标准CGI与缓冲CGI的区别</h4><p>对CGI扩展程序而言，最主要差别在于数据的I／O不同：对缓冲CGI，服务器与CGI扩展程序间的数据交换是通过缓冲区；而标准CGI是通过标准I／O。使用缓冲CGI可选择更多的开发工具，可以开发Windows95和WindowsNT下的GUI扩展程序；而使用标准CGI所选用的开发工具必须支持标准I／O。只有少数几种WWW服务器支持缓冲CGI，因此基于它的扩展程序兼容性不如标准CGI好。</p><h3 id="1．3-CGI与其他WWW技术的关系"><a href="#1．3-CGI与其他WWW技术的关系" class="headerlink" title="1．3 CGI与其他WWW技术的关系"></a>1．3 CGI与其他WWW技术的关系</h3><p>CGI作为WWW服务器的标准扩展技术，由上面CGI的基本原理可知，它和许多其它的WWW技术密切相关，如HTTP、HTML、MIME和URL等，下面主要就它与前两种技术的关系进行研究。</p><h4 id="1．CGI与HTTP协议"><a href="#1．CGI与HTTP协议" class="headerlink" title="1．CGI与HTTP协议"></a>1．CGI与HTTP协议</h4><p>CGI通过HTTP协议在客户端和服务端进行通讯：＊客户端用户代理向服务器发送的请求是HTTP请求消息。该消息中含有处理用户输入的CGI扩展程序的URL值。＊CGI扩展程序在处理结束后，返回给客户端的应答是HTTP应答消息。因此CGI程序的输出数据必须符合HTTP应答消息的语法格式，这在基于CGI标准的开发中非常重要。</p><h4 id="2．CGI与HTML语言"><a href="#2．CGI与HTML语言" class="headerlink" title="2．CGI与HTML语言"></a>2．CGI与HTML语言</h4><p>CGI扩展程序的输出数据（HTTP应答消息）一般有两种：符合MIME类型的文档（最普遍的是HTML文档，表示为text/html）；指向其它文档的URL链接。这两种方式都与HTML语言有关，数据的组织须符合HTML语法格式。</p><h3 id="来自-https-www-cnblogs-com-lidabo-p-5756248-html"><a href="#来自-https-www-cnblogs-com-lidabo-p-5756248-html" class="headerlink" title="来自 https://www.cnblogs.com/lidabo/p/5756248.html"></a>来自 <a href="https://www.cnblogs.com/lidabo/p/5756248.html" target="_blank" rel="noopener">https://www.cnblogs.com/lidabo/p/5756248.html</a></h3>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件包含 </tag>
            
            <tag> CGI技术原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含1</title>
      <link href="/posts/6b68.html"/>
      <url>/posts/6b68.html</url>
      
        <content type="html"><![CDATA[<h3 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h3><p>产生的原因:主要原因是在编写代码的时候，调用(包含)其他文件,让其他文件按照php代码执行，这就产生了漏洞，如果调用的时候没用经过过滤或者严格的定义，可以被用户所控制，用户可以通过包含其他文件，来恶意的执行php代码。<br>示例代码:<br><?php    $filename=$_GET['filename'];    include($filename);?><br>例如:$_GET[‘filename’]没有经过滤直接代入了include中，这就导致攻击者可以通过修改$_GET[‘filename’]的值，恶心执行php代码，产生非预期的效果。<br>php中文件包含的四种函数:<br>require()         函数调用时出现错误，会直接报错并退出程序<br>require_one() 与require()函数一样，但相同的文件只能调用执行一次<br>include()          函数包含出现错误时会报错，但会继续执行后面的代码<br>include_one()  与include()函数一样，但相同的文件只能调用执行一次<br><img src="https://Lmg66.github.io/img/2.png" alt="图片"></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含2</title>
      <link href="/posts/e8ab.html"/>
      <url>/posts/e8ab.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言：自从博客弄好后就休息了一段时间，所以没学啥就分享一下之前学的文件包含中的php伪协议，因为懒得在打一遍就直接把OneNote中的笔记用图片分享，而图片没有做加速可能加载会比较慢还望谅解。"><a href="#前言：自从博客弄好后就休息了一段时间，所以没学啥就分享一下之前学的文件包含中的php伪协议，因为懒得在打一遍就直接把OneNote中的笔记用图片分享，而图片没有做加速可能加载会比较慢还望谅解。" class="headerlink" title="前言：自从博客弄好后就休息了一段时间，所以没学啥就分享一下之前学的文件包含中的php伪协议，因为懒得在打一遍就直接把OneNote中的笔记用图片分享，而图片没有做加速可能加载会比较慢还望谅解。"></a>前言：自从博客弄好后就休息了一段时间，所以没学啥就分享一下之前学的文件包含中的php伪协议，因为懒得在打一遍就直接把OneNote中的笔记用图片分享，而图片没有做加速可能加载会比较慢还望谅解。</h3><h3 id="正文：php伪协议的目的-个人理解-用来读取文件，获得源码，写入木马"><a href="#正文：php伪协议的目的-个人理解-用来读取文件，获得源码，写入木马" class="headerlink" title="正文：php伪协议的目的(个人理解):用来读取文件，获得源码，写入木马"></a>正文：php伪协议的目的(个人理解):用来读取文件，获得源码，写入木马</h3><p><img src="https://Lmg66.github.io/img/1.png" alt="图片"></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件包含 </tag>
            
            <tag> php伪协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两种搭建个人博客方法</title>
      <link href="/posts/2f31.html"/>
      <url>/posts/2f31.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言-整了一个阿里云的服务器-不过没用上-，想着搭一个博客，记录自己菜鸡的日常，中间走了很多弯路，浪费了不少时间，下面是我总结的两种搭建博客的快捷方法，希望能帮到你"><a href="#前言-整了一个阿里云的服务器-不过没用上-，想着搭一个博客，记录自己菜鸡的日常，中间走了很多弯路，浪费了不少时间，下面是我总结的两种搭建博客的快捷方法，希望能帮到你" class="headerlink" title="前言:整了一个阿里云的服务器(不过没用上)，想着搭一个博客，记录自己菜鸡的日常，中间走了很多弯路，浪费了不少时间，下面是我总结的两种搭建博客的快捷方法，希望能帮到你"></a>前言:整了一个阿里云的服务器(不过没用上)，想着搭一个博客，记录自己菜鸡的日常，中间走了很多弯路，浪费了不少时间，下面是我总结的两种搭建博客的快捷方法，希望能帮到你</h3><h1 id="方法一-个人服务器-宝塔-wordpress"><a href="#方法一-个人服务器-宝塔-wordpress" class="headerlink" title="方法一:个人服务器+宝塔+wordpress"></a>方法一:个人服务器+宝塔+wordpress</h1><hr><h2 id="方法一-优势"><a href="#方法一-优势" class="headerlink" title="方法一:优势"></a>方法一:优势</h2><ol><li>可拓展性强，可以添加论坛，个人游戏等等的个人项目</li><li>操作简单，wordpress后台是图形化页面</li><li>国内访问速度较快</li></ol><h2 id="方法一-劣势"><a href="#方法一-劣势" class="headerlink" title="方法一:劣势"></a>方法一:劣势</h2><ol><li>域名需要实名，服务器需要备案(大陆)，大概需要小半个月</li><li>需要费用，大概200元/年(学生优惠)</li><li>可能服务器被攻击，需要打补丁和后期维护</li></ol><h3 id="如果想用这种方法搭建个人博客，推荐一个我找了很久的很好的视频b站小游-他的主题也很好看可以使用，看他的视频完全够用了"><a href="#如果想用这种方法搭建个人博客，推荐一个我找了很久的很好的视频b站小游-他的主题也很好看可以使用，看他的视频完全够用了" class="headerlink" title="如果想用这种方法搭建个人博客，推荐一个我找了很久的很好的视频b站小游,他的主题也很好看可以使用，看他的视频完全够用了"></a>如果想用这种方法搭建个人博客，推荐一个我找了很久的很好的视频<a href="https://www.bilibili.com/video/BV1j4411C7Qf" target="_blank" rel="noopener">b站小游</a>,他的主题也很好看可以使用，看他的视频完全够用了</h3><hr><h1 id="方法二-基于github-码云-coding搭建-hexo"><a href="#方法二-基于github-码云-coding搭建-hexo" class="headerlink" title="方法二:基于github/码云/coding搭建+hexo"></a>方法二:基于github/码云/coding搭建+hexo</h1><hr><h2 id="方法二-优势"><a href="#方法二-优势" class="headerlink" title="方法二:优势"></a>方法二:优势</h2><ol><li>免费不用域名也不用服务器，如果你想自定义域名也可以绑定</li><li>不用担心网站被攻击，因为是是纯静态页面</li></ol><h2 id="方法二-劣势"><a href="#方法二-劣势" class="headerlink" title="方法二:劣势"></a>方法二:劣势</h2><ol><li>可拓展性差，因为没法数据交互，不过如果只是整博客完全够用</li><li>访问速度可能会慢些，github你懂的，推荐使用国内类似github的码云来搭建，访问速度还是可以的</li><li>需要学习的要多一些(一些基础的git，Markdown ，css，js，html)，没有图形化页面需要面对源码进行美化和发布文章</li></ol><h3 id="如果想用这种方法搭建个人博客，推荐我看的教程博客很不错过客-我的github也有我博客的源码，其他的需要啥自行百度"><a href="#如果想用这种方法搭建个人博客，推荐我看的教程博客很不错过客-我的github也有我博客的源码，其他的需要啥自行百度" class="headerlink" title="如果想用这种方法搭建个人博客，推荐我看的教程博客很不错过客,我的github也有我博客的源码，其他的需要啥自行百度"></a>如果想用这种方法搭建个人博客，推荐我看的教程博客很不错<a href="https://yafine-blog.cn/posts/4ab2.html" target="_blank" rel="noopener">过客</a>,我的github也有我博客的源码，其他的需要啥自行百度</h3><hr><h3 id="好的就这些，因为还没弄图床没法发图片都这样吧，具体问题可以留言，评论，私聊我qq"><a href="#好的就这些，因为还没弄图床没法发图片都这样吧，具体问题可以留言，评论，私聊我qq" class="headerlink" title="好的就这些，因为还没弄图床没法发图片都这样吧，具体问题可以留言，评论，私聊我qq"></a>好的就这些，因为还没弄图床没法发图片都这样吧，具体问题可以留言，评论，私聊我qq</h3>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客的搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
